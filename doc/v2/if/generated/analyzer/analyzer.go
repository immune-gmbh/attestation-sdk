// Code generated by Thrift Compiler (0.14.0). DO NOT EDIT.

package analyzer

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/immune-gmbh/attestation-sdk/if/generated/caching_policy"
	"github.com/immune-gmbh/attestation-sdk/if/generated/tpm"
	"time"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

var _ = caching_policy.GoUnusedProtection__
var _ = tpm.GoUnusedProtection__

type TPMType int64

const (
	TPMType_UNKNOWN TPMType = 0
	TPMType_TPM12   TPMType = 1
	TPMType_TPM20   TPMType = 2
)

func (p TPMType) String() string {
	switch p {
	case TPMType_UNKNOWN:
		return "UNKNOWN"
	case TPMType_TPM12:
		return "TPM12"
	case TPMType_TPM20:
		return "TPM20"
	}
	return "<UNSET>"
}

func TPMTypeFromString(s string) (TPMType, error) {
	switch s {
	case "UNKNOWN":
		return TPMType_UNKNOWN, nil
	case "TPM12":
		return TPMType_TPM12, nil
	case "TPM20":
		return TPMType_TPM20, nil
	}
	return TPMType(0), fmt.Errorf("not a valid TPMType string")
}

func TPMTypePtr(v TPMType) *TPMType { return &v }

func (p TPMType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TPMType) UnmarshalText(text []byte) error {
	q, err := TPMTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *TPMType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = TPMType(v)
	return nil
}

func (p *TPMType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type Flow int64

const (
	Flow_AUTO                           Flow = 0
	Flow_INTEL_LEGACY_TXT_DISABLED      Flow = 1
	Flow_INTEL_LEGACY_TXT_ENABLED       Flow = 2
	Flow_INTEL_CBNT0T                   Flow = 3
	Flow_INTEL_LEGACY_TPM12_TXT_ENABLED Flow = 4
	Flow_AMD_LEGACY_LOCALITY_0          Flow = 5
	Flow_AMD_LEGACY_LOCALITY_3          Flow = 6
	Flow_AMD_LOCALITY_0                 Flow = 7
	Flow_AMD_LOCALITY_3                 Flow = 8
)

func (p Flow) String() string {
	switch p {
	case Flow_AUTO:
		return "AUTO"
	case Flow_INTEL_LEGACY_TXT_DISABLED:
		return "INTEL_LEGACY_TXT_DISABLED"
	case Flow_INTEL_LEGACY_TXT_ENABLED:
		return "INTEL_LEGACY_TXT_ENABLED"
	case Flow_INTEL_CBNT0T:
		return "INTEL_CBNT0T"
	case Flow_INTEL_LEGACY_TPM12_TXT_ENABLED:
		return "INTEL_LEGACY_TPM12_TXT_ENABLED"
	case Flow_AMD_LEGACY_LOCALITY_0:
		return "AMD_LEGACY_LOCALITY_0"
	case Flow_AMD_LEGACY_LOCALITY_3:
		return "AMD_LEGACY_LOCALITY_3"
	case Flow_AMD_LOCALITY_0:
		return "AMD_LOCALITY_0"
	case Flow_AMD_LOCALITY_3:
		return "AMD_LOCALITY_3"
	}
	return "<UNSET>"
}

func FlowFromString(s string) (Flow, error) {
	switch s {
	case "AUTO":
		return Flow_AUTO, nil
	case "INTEL_LEGACY_TXT_DISABLED":
		return Flow_INTEL_LEGACY_TXT_DISABLED, nil
	case "INTEL_LEGACY_TXT_ENABLED":
		return Flow_INTEL_LEGACY_TXT_ENABLED, nil
	case "INTEL_CBNT0T":
		return Flow_INTEL_CBNT0T, nil
	case "INTEL_LEGACY_TPM12_TXT_ENABLED":
		return Flow_INTEL_LEGACY_TPM12_TXT_ENABLED, nil
	case "AMD_LEGACY_LOCALITY_0":
		return Flow_AMD_LEGACY_LOCALITY_0, nil
	case "AMD_LEGACY_LOCALITY_3":
		return Flow_AMD_LEGACY_LOCALITY_3, nil
	case "AMD_LOCALITY_0":
		return Flow_AMD_LOCALITY_0, nil
	case "AMD_LOCALITY_3":
		return Flow_AMD_LOCALITY_3, nil
	}
	return Flow(0), fmt.Errorf("not a valid Flow string")
}

func FlowPtr(v Flow) *Flow { return &v }

func (p Flow) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *Flow) UnmarshalText(text []byte) error {
	q, err := FlowFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *Flow) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = Flow(v)
	return nil
}

func (p *Flow) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type DiffDiagnosis int64

const (
	DiffDiagnosis_Undefined               DiffDiagnosis = 0
	DiffDiagnosis_Match                   DiffDiagnosis = 1
	DiffDiagnosis_UnsuspiciousDamage      DiffDiagnosis = 2
	DiffDiagnosis_SuspiciousDamage        DiffDiagnosis = 3
	DiffDiagnosis_FirmwareVersionMismatch DiffDiagnosis = 4
	DiffDiagnosis_InvalidOriginalFirmware DiffDiagnosis = 5
	DiffDiagnosis_KnownTamperedHost       DiffDiagnosis = 6
)

func (p DiffDiagnosis) String() string {
	switch p {
	case DiffDiagnosis_Undefined:
		return "Undefined"
	case DiffDiagnosis_Match:
		return "Match"
	case DiffDiagnosis_UnsuspiciousDamage:
		return "UnsuspiciousDamage"
	case DiffDiagnosis_SuspiciousDamage:
		return "SuspiciousDamage"
	case DiffDiagnosis_FirmwareVersionMismatch:
		return "FirmwareVersionMismatch"
	case DiffDiagnosis_InvalidOriginalFirmware:
		return "InvalidOriginalFirmware"
	case DiffDiagnosis_KnownTamperedHost:
		return "KnownTamperedHost"
	}
	return "<UNSET>"
}

func DiffDiagnosisFromString(s string) (DiffDiagnosis, error) {
	switch s {
	case "Undefined":
		return DiffDiagnosis_Undefined, nil
	case "Match":
		return DiffDiagnosis_Match, nil
	case "UnsuspiciousDamage":
		return DiffDiagnosis_UnsuspiciousDamage, nil
	case "SuspiciousDamage":
		return DiffDiagnosis_SuspiciousDamage, nil
	case "FirmwareVersionMismatch":
		return DiffDiagnosis_FirmwareVersionMismatch, nil
	case "InvalidOriginalFirmware":
		return DiffDiagnosis_InvalidOriginalFirmware, nil
	case "KnownTamperedHost":
		return DiffDiagnosis_KnownTamperedHost, nil
	}
	return DiffDiagnosis(0), fmt.Errorf("not a valid DiffDiagnosis string")
}

func DiffDiagnosisPtr(v DiffDiagnosis) *DiffDiagnosis { return &v }

func (p DiffDiagnosis) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *DiffDiagnosis) UnmarshalText(text []byte) error {
	q, err := DiffDiagnosisFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *DiffDiagnosis) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = DiffDiagnosis(v)
	return nil
}

func (p *DiffDiagnosis) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type AnalyzerID int64

const (
	AnalyzerID_DiffMeasuredBootAreas                 AnalyzerID = 1
	AnalyzerID_CompareEventLogAndRealMeasurements    AnalyzerID = 2
	AnalyzerID_ValidateMeasurementsFlow              AnalyzerID = 3
	AnalyzerID_ValidateImageIntelCBnTManifestsAndACM AnalyzerID = 4
)

func (p AnalyzerID) String() string {
	switch p {
	case AnalyzerID_DiffMeasuredBootAreas:
		return "DiffMeasuredBootAreas"
	case AnalyzerID_CompareEventLogAndRealMeasurements:
		return "CompareEventLogAndRealMeasurements"
	case AnalyzerID_ValidateMeasurementsFlow:
		return "ValidateMeasurementsFlow"
	case AnalyzerID_ValidateImageIntelCBnTManifestsAndACM:
		return "ValidateImageIntelCBnTManifestsAndACM"
	}
	return "<UNSET>"
}

func AnalyzerIDFromString(s string) (AnalyzerID, error) {
	switch s {
	case "DiffMeasuredBootAreas":
		return AnalyzerID_DiffMeasuredBootAreas, nil
	case "CompareEventLogAndRealMeasurements":
		return AnalyzerID_CompareEventLogAndRealMeasurements, nil
	case "ValidateMeasurementsFlow":
		return AnalyzerID_ValidateMeasurementsFlow, nil
	case "ValidateImageIntelCBnTManifestsAndACM":
		return AnalyzerID_ValidateImageIntelCBnTManifestsAndACM, nil
	}
	return AnalyzerID(0), fmt.Errorf("not a valid AnalyzerID string")
}

func AnalyzerIDPtr(v AnalyzerID) *AnalyzerID { return &v }

func (p AnalyzerID) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *AnalyzerID) UnmarshalText(text []byte) error {
	q, err := AnalyzerIDFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *AnalyzerID) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = AnalyzerID(v)
	return nil
}

func (p *AnalyzerID) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type ErrorClass int64

const (
	ErrorClass_InternalError         ErrorClass = 1
	ErrorClass_InvalidInput          ErrorClass = 2
	ErrorClass_NotSupported          ErrorClass = 3
	ErrorClass_InsecureConfiguration ErrorClass = 4
	ErrorClass_InvalidSignature      ErrorClass = 5
)

func (p ErrorClass) String() string {
	switch p {
	case ErrorClass_InternalError:
		return "InternalError"
	case ErrorClass_InvalidInput:
		return "InvalidInput"
	case ErrorClass_NotSupported:
		return "NotSupported"
	case ErrorClass_InsecureConfiguration:
		return "InsecureConfiguration"
	case ErrorClass_InvalidSignature:
		return "InvalidSignature"
	}
	return "<UNSET>"
}

func ErrorClassFromString(s string) (ErrorClass, error) {
	switch s {
	case "InternalError":
		return ErrorClass_InternalError, nil
	case "InvalidInput":
		return ErrorClass_InvalidInput, nil
	case "NotSupported":
		return ErrorClass_NotSupported, nil
	case "InsecureConfiguration":
		return ErrorClass_InsecureConfiguration, nil
	case "InvalidSignature":
		return ErrorClass_InvalidSignature, nil
	}
	return ErrorClass(0), fmt.Errorf("not a valid ErrorClass string")
}

func ErrorClassPtr(v ErrorClass) *ErrorClass { return &v }

func (p ErrorClass) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ErrorClass) UnmarshalText(text []byte) error {
	q, err := ErrorClassFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *ErrorClass) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = ErrorClass(v)
	return nil
}

func (p *ErrorClass) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// Attributes:
//   - UUID
//   - Description
type NodeInfo struct {
	UUID        string  `thrift:"UUID,1" db:"UUID" json:"UUID"`
	Description *string `thrift:"Description,2" db:"Description" json:"Description,omitempty"`
}

func NewNodeInfo() *NodeInfo {
	return &NodeInfo{}
}

func (p *NodeInfo) GetUUID() string {
	return p.UUID
}

var NodeInfo_Description_DEFAULT string

func (p *NodeInfo) GetDescription() string {
	if !p.IsSetDescription() {
		return NodeInfo_Description_DEFAULT
	}
	return *p.Description
}
func (p *NodeInfo) IsSetDescription() bool {
	return p.Description != nil
}

func (p *NodeInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NodeInfo) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UUID = v
	}
	return nil
}

func (p *NodeInfo) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Description = &v
	}
	return nil
}

func (p *NodeInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "NodeInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NodeInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "UUID", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:UUID: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.UUID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.UUID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:UUID: ", p), err)
	}
	return err
}

func (p *NodeInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err := oprot.WriteFieldBegin(ctx, "Description", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Description: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Description)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.Description (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Description: ", p), err)
		}
	}
	return err
}

func (p *NodeInfo) Equals(other *NodeInfo) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.UUID != other.UUID {
		return false
	}
	if p.Description != other.Description {
		if p.Description == nil || other.Description == nil {
			return false
		}
		if (*p.Description) != (*other.Description) {
			return false
		}
	}
	return true
}

func (p *NodeInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NodeInfo(%+v)", *p)
}

// Attributes:
//   - Offset
//   - Length
//   - HammingDistance
//   - RelatedMeasurements
//   - Nodes
type DiffEntry struct {
	Offset              int64       `thrift:"Offset,1" db:"Offset" json:"Offset"`
	Length              int64       `thrift:"Length,2" db:"Length" json:"Length"`
	HammingDistance     int64       `thrift:"HammingDistance,3" db:"HammingDistance" json:"HammingDistance"`
	RelatedMeasurements string      `thrift:"RelatedMeasurements,4" db:"RelatedMeasurements" json:"RelatedMeasurements"`
	Nodes               []*NodeInfo `thrift:"Nodes,5" db:"Nodes" json:"Nodes"`
}

func NewDiffEntry() *DiffEntry {
	return &DiffEntry{}
}

func (p *DiffEntry) GetOffset() int64 {
	return p.Offset
}

func (p *DiffEntry) GetLength() int64 {
	return p.Length
}

func (p *DiffEntry) GetHammingDistance() int64 {
	return p.HammingDistance
}

func (p *DiffEntry) GetRelatedMeasurements() string {
	return p.RelatedMeasurements
}

func (p *DiffEntry) GetNodes() []*NodeInfo {
	return p.Nodes
}
func (p *DiffEntry) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DiffEntry) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Offset = v
	}
	return nil
}

func (p *DiffEntry) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Length = v
	}
	return nil
}

func (p *DiffEntry) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.HammingDistance = v
	}
	return nil
}

func (p *DiffEntry) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.RelatedMeasurements = v
	}
	return nil
}

func (p *DiffEntry) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*NodeInfo, 0, size)
	p.Nodes = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &NodeInfo{}
		if err := _elem0.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.Nodes = append(p.Nodes, _elem0)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *DiffEntry) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "DiffEntry"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DiffEntry) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Offset", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Offset: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.Offset)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Offset (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Offset: ", p), err)
	}
	return err
}

func (p *DiffEntry) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Length", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Length: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.Length)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Length (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Length: ", p), err)
	}
	return err
}

func (p *DiffEntry) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "HammingDistance", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:HammingDistance: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.HammingDistance)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.HammingDistance (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:HammingDistance: ", p), err)
	}
	return err
}

func (p *DiffEntry) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "RelatedMeasurements", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:RelatedMeasurements: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.RelatedMeasurements)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.RelatedMeasurements (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:RelatedMeasurements: ", p), err)
	}
	return err
}

func (p *DiffEntry) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Nodes", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Nodes: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Nodes)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Nodes {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Nodes: ", p), err)
	}
	return err
}

func (p *DiffEntry) Equals(other *DiffEntry) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Offset != other.Offset {
		return false
	}
	if p.Length != other.Length {
		return false
	}
	if p.HammingDistance != other.HammingDistance {
		return false
	}
	if p.RelatedMeasurements != other.RelatedMeasurements {
		return false
	}
	if len(p.Nodes) != len(other.Nodes) {
		return false
	}
	for i, _tgt := range p.Nodes {
		_src1 := other.Nodes[i]
		if !_tgt.Equals(_src1) {
			return false
		}
	}
	return true
}

func (p *DiffEntry) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DiffEntry(%+v)", *p)
}

// Attributes:
//   - ID
//   - Value
type StatusRegister struct {
	ID    string `thrift:"id,1" db:"id" json:"id"`
	Value []byte `thrift:"value,2" db:"value" json:"value"`
}

func NewStatusRegister() *StatusRegister {
	return &StatusRegister{}
}

func (p *StatusRegister) GetID() string {
	return p.ID
}

func (p *StatusRegister) GetValue() []byte {
	return p.Value
}
func (p *StatusRegister) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StatusRegister) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *StatusRegister) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *StatusRegister) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "StatusRegister"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StatusRegister) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *StatusRegister) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "value", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err)
	}
	if err := oprot.WriteBinary(ctx, p.Value); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err)
	}
	return err
}

func (p *StatusRegister) Equals(other *StatusRegister) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.ID != other.ID {
		return false
	}
	if bytes.Compare(p.Value, other.Value) != 0 {
		return false
	}
	return true
}

func (p *StatusRegister) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StatusRegister(%+v)", *p)
}

// Attributes:
//   - Date
//   - SESVN
//   - TXTSVN
type ACMInfo struct {
	Date   int32 `thrift:"Date,1" db:"Date" json:"Date"`
	SESVN  int16 `thrift:"SESVN,2" db:"SESVN" json:"SESVN"`
	TXTSVN int16 `thrift:"TXTSVN,3" db:"TXTSVN" json:"TXTSVN"`
}

func NewACMInfo() *ACMInfo {
	return &ACMInfo{}
}

func (p *ACMInfo) GetDate() int32 {
	return p.Date
}

func (p *ACMInfo) GetSESVN() int16 {
	return p.SESVN
}

func (p *ACMInfo) GetTXTSVN() int16 {
	return p.TXTSVN
}
func (p *ACMInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ACMInfo) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Date = v
	}
	return nil
}

func (p *ACMInfo) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SESVN = v
	}
	return nil
}

func (p *ACMInfo) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TXTSVN = v
	}
	return nil
}

func (p *ACMInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ACMInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ACMInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Date", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Date: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Date)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Date (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Date: ", p), err)
	}
	return err
}

func (p *ACMInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "SESVN", thrift.I16, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:SESVN: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.SESVN)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SESVN (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:SESVN: ", p), err)
	}
	return err
}

func (p *ACMInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "TXTSVN", thrift.I16, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:TXTSVN: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.TXTSVN)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.TXTSVN (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:TXTSVN: ", p), err)
	}
	return err
}

func (p *ACMInfo) Equals(other *ACMInfo) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Date != other.Date {
		return false
	}
	if p.SESVN != other.SESVN {
		return false
	}
	if p.TXTSVN != other.TXTSVN {
		return false
	}
	return true
}

func (p *ACMInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ACMInfo(%+v)", *p)
}

// Attributes:
//   - Hostname
//   - AssetID
//   - SerialNumber
//   - ModelID
//   - IsVerified
type HostInfo struct {
	Hostname     *string `thrift:"Hostname,1" db:"Hostname" json:"Hostname,omitempty"`
	AssetID      *int64  `thrift:"AssetID,2" db:"AssetID" json:"AssetID,omitempty"`
	SerialNumber *string `thrift:"SerialNumber,3" db:"SerialNumber" json:"SerialNumber,omitempty"`
	ModelID      *int32  `thrift:"ModelID,4" db:"ModelID" json:"ModelID,omitempty"`
	IsVerified   bool    `thrift:"IsVerified,5" db:"IsVerified" json:"IsVerified"`
}

func NewHostInfo() *HostInfo {
	return &HostInfo{}
}

var HostInfo_Hostname_DEFAULT string

func (p *HostInfo) GetHostname() string {
	if !p.IsSetHostname() {
		return HostInfo_Hostname_DEFAULT
	}
	return *p.Hostname
}

var HostInfo_AssetID_DEFAULT int64

func (p *HostInfo) GetAssetID() int64 {
	if !p.IsSetAssetID() {
		return HostInfo_AssetID_DEFAULT
	}
	return *p.AssetID
}

var HostInfo_SerialNumber_DEFAULT string

func (p *HostInfo) GetSerialNumber() string {
	if !p.IsSetSerialNumber() {
		return HostInfo_SerialNumber_DEFAULT
	}
	return *p.SerialNumber
}

var HostInfo_ModelID_DEFAULT int32

func (p *HostInfo) GetModelID() int32 {
	if !p.IsSetModelID() {
		return HostInfo_ModelID_DEFAULT
	}
	return *p.ModelID
}

func (p *HostInfo) GetIsVerified() bool {
	return p.IsVerified
}
func (p *HostInfo) IsSetHostname() bool {
	return p.Hostname != nil
}

func (p *HostInfo) IsSetAssetID() bool {
	return p.AssetID != nil
}

func (p *HostInfo) IsSetSerialNumber() bool {
	return p.SerialNumber != nil
}

func (p *HostInfo) IsSetModelID() bool {
	return p.ModelID != nil
}

func (p *HostInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HostInfo) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Hostname = &v
	}
	return nil
}

func (p *HostInfo) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AssetID = &v
	}
	return nil
}

func (p *HostInfo) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SerialNumber = &v
	}
	return nil
}

func (p *HostInfo) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ModelID = &v
	}
	return nil
}

func (p *HostInfo) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.IsVerified = v
	}
	return nil
}

func (p *HostInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "HostInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HostInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetHostname() {
		if err := oprot.WriteFieldBegin(ctx, "Hostname", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Hostname: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Hostname)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.Hostname (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Hostname: ", p), err)
		}
	}
	return err
}

func (p *HostInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAssetID() {
		if err := oprot.WriteFieldBegin(ctx, "AssetID", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:AssetID: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.AssetID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.AssetID (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:AssetID: ", p), err)
		}
	}
	return err
}

func (p *HostInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSerialNumber() {
		if err := oprot.WriteFieldBegin(ctx, "SerialNumber", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:SerialNumber: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.SerialNumber)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.SerialNumber (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:SerialNumber: ", p), err)
		}
	}
	return err
}

func (p *HostInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetModelID() {
		if err := oprot.WriteFieldBegin(ctx, "ModelID", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ModelID: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.ModelID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ModelID (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ModelID: ", p), err)
		}
	}
	return err
}

func (p *HostInfo) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "IsVerified", thrift.BOOL, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:IsVerified: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.IsVerified)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.IsVerified (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:IsVerified: ", p), err)
	}
	return err
}

func (p *HostInfo) Equals(other *HostInfo) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Hostname != other.Hostname {
		if p.Hostname == nil || other.Hostname == nil {
			return false
		}
		if (*p.Hostname) != (*other.Hostname) {
			return false
		}
	}
	if p.AssetID != other.AssetID {
		if p.AssetID == nil || other.AssetID == nil {
			return false
		}
		if (*p.AssetID) != (*other.AssetID) {
			return false
		}
	}
	if p.SerialNumber != other.SerialNumber {
		if p.SerialNumber == nil || other.SerialNumber == nil {
			return false
		}
		if (*p.SerialNumber) != (*other.SerialNumber) {
			return false
		}
	}
	if p.ModelID != other.ModelID {
		if p.ModelID == nil || other.ModelID == nil {
			return false
		}
		if (*p.ModelID) != (*other.ModelID) {
			return false
		}
	}
	if p.IsVerified != other.IsVerified {
		return false
	}
	return true
}

func (p *HostInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HostInfo(%+v)", *p)
}

// Attributes:
//   - HostInfo
//   - Tags
//   - Artifacts
//   - AnalysisList
type AnalyzeFirmwareRequest struct {
	HostInfo     *HostInfo                     `thrift:"HostInfo,1" db:"HostInfo" json:"HostInfo,omitempty"`
	Tags         []string                      `thrift:"Tags,2" db:"Tags" json:"Tags,omitempty"`
	Artifacts    [][]byte                      `thrift:"Artifacts,3" db:"Artifacts" json:"Artifacts"`
	AnalysisList []*AnalyzeFirmwareRequestItem `thrift:"AnalysisList,4" db:"AnalysisList" json:"AnalysisList"`
}

func NewAnalyzeFirmwareRequest() *AnalyzeFirmwareRequest {
	return &AnalyzeFirmwareRequest{}
}

var AnalyzeFirmwareRequest_HostInfo_DEFAULT *HostInfo

func (p *AnalyzeFirmwareRequest) GetHostInfo() *HostInfo {
	if !p.IsSetHostInfo() {
		return AnalyzeFirmwareRequest_HostInfo_DEFAULT
	}
	return p.HostInfo
}

var AnalyzeFirmwareRequest_Tags_DEFAULT []string

func (p *AnalyzeFirmwareRequest) GetTags() []string {
	return p.Tags
}

func (p *AnalyzeFirmwareRequest) GetArtifacts() [][]byte {
	return p.Artifacts
}

func (p *AnalyzeFirmwareRequest) GetAnalysisList() []*AnalyzeFirmwareRequestItem {
	return p.AnalysisList
}
func (p *AnalyzeFirmwareRequest) IsSetHostInfo() bool {
	return p.HostInfo != nil
}

func (p *AnalyzeFirmwareRequest) IsSetTags() bool {
	return p.Tags != nil
}

func (p *AnalyzeFirmwareRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AnalyzeFirmwareRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.HostInfo = &HostInfo{}
	if err := p.HostInfo.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.HostInfo), err)
	}
	return nil
}

func (p *AnalyzeFirmwareRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Tags = tSlice
	for i := 0; i < size; i++ {
		var _elem2 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem2 = v
		}
		p.Tags = append(p.Tags, _elem2)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AnalyzeFirmwareRequest) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]byte, 0, size)
	p.Artifacts = tSlice
	for i := 0; i < size; i++ {
		var _elem3 []byte
		if v, err := iprot.ReadBinary(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem3 = v
		}
		p.Artifacts = append(p.Artifacts, _elem3)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AnalyzeFirmwareRequest) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*AnalyzeFirmwareRequestItem, 0, size)
	p.AnalysisList = tSlice
	for i := 0; i < size; i++ {
		_elem4 := &AnalyzeFirmwareRequestItem{}
		if err := _elem4.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
		}
		p.AnalysisList = append(p.AnalysisList, _elem4)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AnalyzeFirmwareRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AnalyzeFirmwareRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AnalyzeFirmwareRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetHostInfo() {
		if err := oprot.WriteFieldBegin(ctx, "HostInfo", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:HostInfo: ", p), err)
		}
		if err := p.HostInfo.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.HostInfo), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:HostInfo: ", p), err)
		}
	}
	return err
}

func (p *AnalyzeFirmwareRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTags() {
		if err := oprot.WriteFieldBegin(ctx, "Tags", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Tags: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Tags)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Tags {
			if err := oprot.WriteString(ctx, string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Tags: ", p), err)
		}
	}
	return err
}

func (p *AnalyzeFirmwareRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Artifacts", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Artifacts: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Artifacts)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Artifacts {
		if err := oprot.WriteBinary(ctx, v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Artifacts: ", p), err)
	}
	return err
}

func (p *AnalyzeFirmwareRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "AnalysisList", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:AnalysisList: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.AnalysisList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.AnalysisList {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:AnalysisList: ", p), err)
	}
	return err
}

func (p *AnalyzeFirmwareRequest) Equals(other *AnalyzeFirmwareRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.HostInfo.Equals(other.HostInfo) {
		return false
	}
	if len(p.Tags) != len(other.Tags) {
		return false
	}
	for i, _tgt := range p.Tags {
		_src5 := other.Tags[i]
		if _tgt != _src5 {
			return false
		}
	}
	if len(p.Artifacts) != len(other.Artifacts) {
		return false
	}
	for i, _tgt := range p.Artifacts {
		_src6 := other.Artifacts[i]
		if bytes.Compare(_tgt, _src6) != 0 {
			return false
		}
	}
	if len(p.AnalysisList) != len(other.AnalysisList) {
		return false
	}
	for i, _tgt := range p.AnalysisList {
		_src7 := other.AnalysisList[i]
		if !_tgt.Equals(_src7) {
			return false
		}
	}
	return true
}

func (p *AnalyzeFirmwareRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AnalyzeFirmwareRequest(%+v)", *p)
}

// Attributes:
//   - AnalysisRequestID
//   - AnalyzerID
//   - Input
type AnalyzeFirmwareRequestItem struct {
	AnalysisRequestID []byte         `thrift:"AnalysisRequestID,1" db:"AnalysisRequestID" json:"AnalysisRequestID,omitempty"`
	AnalyzerID        AnalyzerID     `thrift:"AnalyzerID,2" db:"AnalyzerID" json:"AnalyzerID"`
	Input             *AnalysisInput `thrift:"Input,3" db:"Input" json:"Input"`
}

func NewAnalyzeFirmwareRequestItem() *AnalyzeFirmwareRequestItem {
	return &AnalyzeFirmwareRequestItem{}
}

var AnalyzeFirmwareRequestItem_AnalysisRequestID_DEFAULT []byte

func (p *AnalyzeFirmwareRequestItem) GetAnalysisRequestID() []byte {
	return p.AnalysisRequestID
}

func (p *AnalyzeFirmwareRequestItem) GetAnalyzerID() AnalyzerID {
	return p.AnalyzerID
}

var AnalyzeFirmwareRequestItem_Input_DEFAULT *AnalysisInput

func (p *AnalyzeFirmwareRequestItem) GetInput() *AnalysisInput {
	if !p.IsSetInput() {
		return AnalyzeFirmwareRequestItem_Input_DEFAULT
	}
	return p.Input
}
func (p *AnalyzeFirmwareRequestItem) IsSetAnalysisRequestID() bool {
	return p.AnalysisRequestID != nil
}

func (p *AnalyzeFirmwareRequestItem) IsSetInput() bool {
	return p.Input != nil
}

func (p *AnalyzeFirmwareRequestItem) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AnalyzeFirmwareRequestItem) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AnalysisRequestID = v
	}
	return nil
}

func (p *AnalyzeFirmwareRequestItem) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := AnalyzerID(v)
		p.AnalyzerID = temp
	}
	return nil
}

func (p *AnalyzeFirmwareRequestItem) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	p.Input = &AnalysisInput{}
	if err := p.Input.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Input), err)
	}
	return nil
}

func (p *AnalyzeFirmwareRequestItem) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AnalyzeFirmwareRequestItem"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AnalyzeFirmwareRequestItem) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAnalysisRequestID() {
		if err := oprot.WriteFieldBegin(ctx, "AnalysisRequestID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:AnalysisRequestID: ", p), err)
		}
		if err := oprot.WriteBinary(ctx, p.AnalysisRequestID); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.AnalysisRequestID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:AnalysisRequestID: ", p), err)
		}
	}
	return err
}

func (p *AnalyzeFirmwareRequestItem) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "AnalyzerID", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:AnalyzerID: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.AnalyzerID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.AnalyzerID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:AnalyzerID: ", p), err)
	}
	return err
}

func (p *AnalyzeFirmwareRequestItem) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Input", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Input: ", p), err)
	}
	if err := p.Input.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Input), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Input: ", p), err)
	}
	return err
}

func (p *AnalyzeFirmwareRequestItem) Equals(other *AnalyzeFirmwareRequestItem) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if bytes.Compare(p.AnalysisRequestID, other.AnalysisRequestID) != 0 {
		return false
	}
	if p.AnalyzerID != other.AnalyzerID {
		return false
	}
	if !p.Input.Equals(other.Input) {
		return false
	}
	return true
}

func (p *AnalyzeFirmwareRequestItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AnalyzeFirmwareRequestItem(%+v)", *p)
}

// Attributes:
//   - List
type AnalyzeFirmwareResult_ struct {
	List []*AnalyzeFirmwareResultItem `thrift:"List,1" db:"List" json:"List"`
}

func NewAnalyzeFirmwareResult_() *AnalyzeFirmwareResult_ {
	return &AnalyzeFirmwareResult_{}
}

func (p *AnalyzeFirmwareResult_) GetList() []*AnalyzeFirmwareResultItem {
	return p.List
}
func (p *AnalyzeFirmwareResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AnalyzeFirmwareResult_) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*AnalyzeFirmwareResultItem, 0, size)
	p.List = tSlice
	for i := 0; i < size; i++ {
		_elem8 := &AnalyzeFirmwareResultItem{}
		if err := _elem8.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
		}
		p.List = append(p.List, _elem8)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AnalyzeFirmwareResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AnalyzeFirmwareResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AnalyzeFirmwareResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "List", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:List: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.List)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.List {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:List: ", p), err)
	}
	return err
}

func (p *AnalyzeFirmwareResult_) Equals(other *AnalyzeFirmwareResult_) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.List) != len(other.List) {
		return false
	}
	for i, _tgt := range p.List {
		_src9 := other.List[i]
		if !_tgt.Equals(_src9) {
			return false
		}
	}
	return true
}

func (p *AnalyzeFirmwareResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AnalyzeFirmwareResult_(%+v)", *p)
}

// Attributes:
//   - AnalysisRequestID
//   - AnalyzerID
//   - Report
//   - Errors
//   - Comments
type AnalyzeFirmwareResultItem struct {
	AnalysisRequestID []byte          `thrift:"AnalysisRequestID,1" db:"AnalysisRequestID" json:"AnalysisRequestID,omitempty"`
	AnalyzerID        AnalyzerID      `thrift:"AnalyzerID,2" db:"AnalyzerID" json:"AnalyzerID"`
	Report            *AnalysisReport `thrift:"Report,3" db:"Report" json:"Report"`
	Errors            []*Error        `thrift:"Errors,4" db:"Errors" json:"Errors"`
	Comments          []string        `thrift:"Comments,5" db:"Comments" json:"Comments"`
}

func NewAnalyzeFirmwareResultItem() *AnalyzeFirmwareResultItem {
	return &AnalyzeFirmwareResultItem{}
}

var AnalyzeFirmwareResultItem_AnalysisRequestID_DEFAULT []byte

func (p *AnalyzeFirmwareResultItem) GetAnalysisRequestID() []byte {
	return p.AnalysisRequestID
}

func (p *AnalyzeFirmwareResultItem) GetAnalyzerID() AnalyzerID {
	return p.AnalyzerID
}

var AnalyzeFirmwareResultItem_Report_DEFAULT *AnalysisReport

func (p *AnalyzeFirmwareResultItem) GetReport() *AnalysisReport {
	if !p.IsSetReport() {
		return AnalyzeFirmwareResultItem_Report_DEFAULT
	}
	return p.Report
}

func (p *AnalyzeFirmwareResultItem) GetErrors() []*Error {
	return p.Errors
}

func (p *AnalyzeFirmwareResultItem) GetComments() []string {
	return p.Comments
}
func (p *AnalyzeFirmwareResultItem) IsSetAnalysisRequestID() bool {
	return p.AnalysisRequestID != nil
}

func (p *AnalyzeFirmwareResultItem) IsSetReport() bool {
	return p.Report != nil
}

func (p *AnalyzeFirmwareResultItem) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AnalyzeFirmwareResultItem) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AnalysisRequestID = v
	}
	return nil
}

func (p *AnalyzeFirmwareResultItem) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := AnalyzerID(v)
		p.AnalyzerID = temp
	}
	return nil
}

func (p *AnalyzeFirmwareResultItem) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	p.Report = &AnalysisReport{}
	if err := p.Report.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Report), err)
	}
	return nil
}

func (p *AnalyzeFirmwareResultItem) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Error, 0, size)
	p.Errors = tSlice
	for i := 0; i < size; i++ {
		_elem10 := &Error{}
		if err := _elem10.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
		}
		p.Errors = append(p.Errors, _elem10)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AnalyzeFirmwareResultItem) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Comments = tSlice
	for i := 0; i < size; i++ {
		var _elem11 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem11 = v
		}
		p.Comments = append(p.Comments, _elem11)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AnalyzeFirmwareResultItem) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AnalyzeFirmwareResultItem"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AnalyzeFirmwareResultItem) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAnalysisRequestID() {
		if err := oprot.WriteFieldBegin(ctx, "AnalysisRequestID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:AnalysisRequestID: ", p), err)
		}
		if err := oprot.WriteBinary(ctx, p.AnalysisRequestID); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.AnalysisRequestID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:AnalysisRequestID: ", p), err)
		}
	}
	return err
}

func (p *AnalyzeFirmwareResultItem) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "AnalyzerID", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:AnalyzerID: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.AnalyzerID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.AnalyzerID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:AnalyzerID: ", p), err)
	}
	return err
}

func (p *AnalyzeFirmwareResultItem) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Report", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Report: ", p), err)
	}
	if err := p.Report.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Report), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Report: ", p), err)
	}
	return err
}

func (p *AnalyzeFirmwareResultItem) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Errors", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Errors: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Errors)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Errors {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Errors: ", p), err)
	}
	return err
}

func (p *AnalyzeFirmwareResultItem) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Comments", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Comments: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Comments)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Comments {
		if err := oprot.WriteString(ctx, string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Comments: ", p), err)
	}
	return err
}

func (p *AnalyzeFirmwareResultItem) Equals(other *AnalyzeFirmwareResultItem) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if bytes.Compare(p.AnalysisRequestID, other.AnalysisRequestID) != 0 {
		return false
	}
	if p.AnalyzerID != other.AnalyzerID {
		return false
	}
	if !p.Report.Equals(other.Report) {
		return false
	}
	if len(p.Errors) != len(other.Errors) {
		return false
	}
	for i, _tgt := range p.Errors {
		_src12 := other.Errors[i]
		if !_tgt.Equals(_src12) {
			return false
		}
	}
	if len(p.Comments) != len(other.Comments) {
		return false
	}
	for i, _tgt := range p.Comments {
		_src13 := other.Comments[i]
		if _tgt != _src13 {
			return false
		}
	}
	return true
}

func (p *AnalyzeFirmwareResultItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AnalyzeFirmwareResultItem(%+v)", *p)
}

// Attributes:
//   - ID
//   - Result_
type AnalyzeFirmwareJob struct {
	ID []byte `thrift:"ID,1" db:"ID" json:"ID"`
	// unused field # 2
	Result_ *AnalyzeFirmwareResult_ `thrift:"Result,3" db:"Result" json:"Result"`
}

func NewAnalyzeFirmwareJob() *AnalyzeFirmwareJob {
	return &AnalyzeFirmwareJob{}
}

func (p *AnalyzeFirmwareJob) GetID() []byte {
	return p.ID
}

var AnalyzeFirmwareJob_Result__DEFAULT *AnalyzeFirmwareResult_

func (p *AnalyzeFirmwareJob) GetResult_() *AnalyzeFirmwareResult_ {
	if !p.IsSetResult_() {
		return AnalyzeFirmwareJob_Result__DEFAULT
	}
	return p.Result_
}
func (p *AnalyzeFirmwareJob) IsSetResult_() bool {
	return p.Result_ != nil
}

func (p *AnalyzeFirmwareJob) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AnalyzeFirmwareJob) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *AnalyzeFirmwareJob) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	p.Result_ = &AnalyzeFirmwareResult_{}
	if err := p.Result_.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
	}
	return nil
}

func (p *AnalyzeFirmwareJob) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AnalyzeFirmwareJob"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AnalyzeFirmwareJob) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ID", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err)
	}
	if err := oprot.WriteBinary(ctx, p.ID); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err)
	}
	return err
}

func (p *AnalyzeFirmwareJob) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Result", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Result: ", p), err)
	}
	if err := p.Result_.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Result: ", p), err)
	}
	return err
}

func (p *AnalyzeFirmwareJob) Equals(other *AnalyzeFirmwareJob) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if bytes.Compare(p.ID, other.ID) != 0 {
		return false
	}
	if !p.Result_.Equals(other.Result_) {
		return false
	}
	return true
}

func (p *AnalyzeFirmwareJob) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AnalyzeFirmwareJob(%+v)", *p)
}

// Attributes:
//   - Values
type PCRValues struct {
	Values map[int64]map[tpm.Algo][]byte `thrift:"Values,1" db:"Values" json:"Values"`
}

func NewPCRValues() *PCRValues {
	return &PCRValues{}
}

func (p *PCRValues) GetValues() map[int64]map[tpm.Algo][]byte {
	return p.Values
}
func (p *PCRValues) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PCRValues) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[int64]map[tpm.Algo][]byte, size)
	p.Values = tMap
	for i := 0; i < size; i++ {
		var _key14 int64
		if v, err := iprot.ReadI64(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key14 = v
		}
		_, _, size, err := iprot.ReadMapBegin(ctx)
		if err != nil {
			return thrift.PrependError("error reading map begin: ", err)
		}
		tMap := make(map[tpm.Algo][]byte, size)
		_val15 := tMap
		for i := 0; i < size; i++ {
			var _key16 tpm.Algo
			if v, err := iprot.ReadI32(ctx); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				temp := tpm.Algo(v)
				_key16 = temp
			}
			var _val17 []byte
			if v, err := iprot.ReadBinary(ctx); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_val17 = v
			}
			_val15[_key16] = _val17
		}
		if err := iprot.ReadMapEnd(ctx); err != nil {
			return thrift.PrependError("error reading map end: ", err)
		}
		p.Values[_key14] = _val15
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *PCRValues) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "PCRValues"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PCRValues) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Values", thrift.MAP, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Values: ", p), err)
	}
	if err := oprot.WriteMapBegin(ctx, thrift.I64, thrift.MAP, len(p.Values)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Values {
		if err := oprot.WriteI64(ctx, int64(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.STRING, len(v)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range v {
			if err := oprot.WriteI32(ctx, int32(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteBinary(ctx, v); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
	}
	if err := oprot.WriteMapEnd(ctx); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Values: ", p), err)
	}
	return err
}

func (p *PCRValues) Equals(other *PCRValues) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.Values) != len(other.Values) {
		return false
	}
	for k, _tgt := range p.Values {
		_src18 := other.Values[k]
		if len(_tgt) != len(_src18) {
			return false
		}
		for k, _tgt := range _tgt {
			_src19 := _src18[k]
			if bytes.Compare(_tgt, _src19) != 0 {
				return false
			}
		}
	}
	return true
}

func (p *PCRValues) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PCRValues(%+v)", *p)
}

// Attributes:
//   - ArtifactIndex
//   - ManifoldImageID
type FirmwareReference struct {
	ArtifactIndex   *int64 `thrift:"ArtifactIndex,1" db:"ArtifactIndex" json:"ArtifactIndex,omitempty"`
	ManifoldImageID []byte `thrift:"ManifoldImageID,2" db:"ManifoldImageID" json:"ManifoldImageID,omitempty"`
}

func NewFirmwareReference() *FirmwareReference {
	return &FirmwareReference{}
}

var FirmwareReference_ArtifactIndex_DEFAULT int64

func (p *FirmwareReference) GetArtifactIndex() int64 {
	if !p.IsSetArtifactIndex() {
		return FirmwareReference_ArtifactIndex_DEFAULT
	}
	return *p.ArtifactIndex
}

var FirmwareReference_ManifoldImageID_DEFAULT []byte

func (p *FirmwareReference) GetManifoldImageID() []byte {
	return p.ManifoldImageID
}
func (p *FirmwareReference) CountSetFieldsFirmwareReference() int {
	count := 0
	if p.IsSetArtifactIndex() {
		count++
	}
	if p.IsSetManifoldImageID() {
		count++
	}
	return count

}

func (p *FirmwareReference) IsSetArtifactIndex() bool {
	return p.ArtifactIndex != nil
}

func (p *FirmwareReference) IsSetManifoldImageID() bool {
	return p.ManifoldImageID != nil
}

func (p *FirmwareReference) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FirmwareReference) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ArtifactIndex = &v
	}
	return nil
}

func (p *FirmwareReference) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ManifoldImageID = v
	}
	return nil
}

func (p *FirmwareReference) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if c := p.CountSetFieldsFirmwareReference(); c != 1 {
		return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
	}
	if err := oprot.WriteStructBegin(ctx, "FirmwareReference"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FirmwareReference) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetArtifactIndex() {
		if err := oprot.WriteFieldBegin(ctx, "ArtifactIndex", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ArtifactIndex: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.ArtifactIndex)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ArtifactIndex (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ArtifactIndex: ", p), err)
		}
	}
	return err
}

func (p *FirmwareReference) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetManifoldImageID() {
		if err := oprot.WriteFieldBegin(ctx, "ManifoldImageID", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ManifoldImageID: ", p), err)
		}
		if err := oprot.WriteBinary(ctx, p.ManifoldImageID); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ManifoldImageID (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ManifoldImageID: ", p), err)
		}
	}
	return err
}

func (p *FirmwareReference) Equals(other *FirmwareReference) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.ArtifactIndex != other.ArtifactIndex {
		if p.ArtifactIndex == nil || other.ArtifactIndex == nil {
			return false
		}
		if (*p.ArtifactIndex) != (*other.ArtifactIndex) {
			return false
		}
	}
	if bytes.Compare(p.ManifoldImageID, other.ManifoldImageID) != 0 {
		return false
	}
	return true
}

func (p *FirmwareReference) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FirmwareReference(%+v)", *p)
}

// Attributes:
//   - VersionAndDate
//   - Tarball
type OriginalFirmwareSelector struct {
	VersionAndDate *FirmwareVersionAndDate `thrift:"VersionAndDate,1" db:"VersionAndDate" json:"VersionAndDate,omitempty"`
	Tarball        *string                 `thrift:"Tarball,2" db:"Tarball" json:"Tarball,omitempty"`
}

func NewOriginalFirmwareSelector() *OriginalFirmwareSelector {
	return &OriginalFirmwareSelector{}
}

var OriginalFirmwareSelector_VersionAndDate_DEFAULT *FirmwareVersionAndDate

func (p *OriginalFirmwareSelector) GetVersionAndDate() *FirmwareVersionAndDate {
	if !p.IsSetVersionAndDate() {
		return OriginalFirmwareSelector_VersionAndDate_DEFAULT
	}
	return p.VersionAndDate
}

var OriginalFirmwareSelector_Tarball_DEFAULT string

func (p *OriginalFirmwareSelector) GetTarball() string {
	if !p.IsSetTarball() {
		return OriginalFirmwareSelector_Tarball_DEFAULT
	}
	return *p.Tarball
}
func (p *OriginalFirmwareSelector) CountSetFieldsOriginalFirmwareSelector() int {
	count := 0
	if p.IsSetVersionAndDate() {
		count++
	}
	if p.IsSetTarball() {
		count++
	}
	return count

}

func (p *OriginalFirmwareSelector) IsSetVersionAndDate() bool {
	return p.VersionAndDate != nil
}

func (p *OriginalFirmwareSelector) IsSetTarball() bool {
	return p.Tarball != nil
}

func (p *OriginalFirmwareSelector) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OriginalFirmwareSelector) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.VersionAndDate = &FirmwareVersionAndDate{}
	if err := p.VersionAndDate.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.VersionAndDate), err)
	}
	return nil
}

func (p *OriginalFirmwareSelector) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Tarball = &v
	}
	return nil
}

func (p *OriginalFirmwareSelector) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if c := p.CountSetFieldsOriginalFirmwareSelector(); c != 1 {
		return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
	}
	if err := oprot.WriteStructBegin(ctx, "OriginalFirmwareSelector"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OriginalFirmwareSelector) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetVersionAndDate() {
		if err := oprot.WriteFieldBegin(ctx, "VersionAndDate", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:VersionAndDate: ", p), err)
		}
		if err := p.VersionAndDate.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.VersionAndDate), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:VersionAndDate: ", p), err)
		}
	}
	return err
}

func (p *OriginalFirmwareSelector) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTarball() {
		if err := oprot.WriteFieldBegin(ctx, "Tarball", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Tarball: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Tarball)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.Tarball (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Tarball: ", p), err)
		}
	}
	return err
}

func (p *OriginalFirmwareSelector) Equals(other *OriginalFirmwareSelector) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.VersionAndDate.Equals(other.VersionAndDate) {
		return false
	}
	if p.Tarball != other.Tarball {
		if p.Tarball == nil || other.Tarball == nil {
			return false
		}
		if (*p.Tarball) != (*other.Tarball) {
			return false
		}
	}
	return true
}

func (p *OriginalFirmwareSelector) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OriginalFirmwareSelector(%+v)", *p)
}

// Attributes:
//   - Version
//   - ReleaseDate
//   - ModelID
type FirmwareVersionAndDate struct {
	Version     string `thrift:"Version,1" db:"Version" json:"Version"`
	ReleaseDate string `thrift:"ReleaseDate,2" db:"ReleaseDate" json:"ReleaseDate"`
	ModelID     *int64 `thrift:"ModelID,3" db:"ModelID" json:"ModelID,omitempty"`
}

func NewFirmwareVersionAndDate() *FirmwareVersionAndDate {
	return &FirmwareVersionAndDate{}
}

func (p *FirmwareVersionAndDate) GetVersion() string {
	return p.Version
}

func (p *FirmwareVersionAndDate) GetReleaseDate() string {
	return p.ReleaseDate
}

var FirmwareVersionAndDate_ModelID_DEFAULT int64

func (p *FirmwareVersionAndDate) GetModelID() int64 {
	if !p.IsSetModelID() {
		return FirmwareVersionAndDate_ModelID_DEFAULT
	}
	return *p.ModelID
}
func (p *FirmwareVersionAndDate) IsSetModelID() bool {
	return p.ModelID != nil
}

func (p *FirmwareVersionAndDate) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FirmwareVersionAndDate) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Version = v
	}
	return nil
}

func (p *FirmwareVersionAndDate) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ReleaseDate = v
	}
	return nil
}

func (p *FirmwareVersionAndDate) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ModelID = &v
	}
	return nil
}

func (p *FirmwareVersionAndDate) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "FirmwareVersionAndDate"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FirmwareVersionAndDate) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Version", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Version: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Version)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Version: ", p), err)
	}
	return err
}

func (p *FirmwareVersionAndDate) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ReleaseDate", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ReleaseDate: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ReleaseDate)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ReleaseDate (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ReleaseDate: ", p), err)
	}
	return err
}

func (p *FirmwareVersionAndDate) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetModelID() {
		if err := oprot.WriteFieldBegin(ctx, "ModelID", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ModelID: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.ModelID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ModelID (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ModelID: ", p), err)
		}
	}
	return err
}

func (p *FirmwareVersionAndDate) Equals(other *FirmwareVersionAndDate) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Version != other.Version {
		return false
	}
	if p.ReleaseDate != other.ReleaseDate {
		return false
	}
	if p.ModelID != other.ModelID {
		if p.ModelID == nil || other.ModelID == nil {
			return false
		}
		if (*p.ModelID) != (*other.ModelID) {
			return false
		}
	}
	return true
}

func (p *FirmwareVersionAndDate) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FirmwareVersionAndDate(%+v)", *p)
}

// Attributes:
//   - ErrorClass
//   - Code
//   - Description
type Error struct {
	ErrorClass  ErrorClass `thrift:"ErrorClass,1" db:"ErrorClass" json:"ErrorClass"`
	Code        int64      `thrift:"Code,2" db:"Code" json:"Code"`
	Description string     `thrift:"Description,3" db:"Description" json:"Description"`
}

func NewError() *Error {
	return &Error{}
}

func (p *Error) GetErrorClass() ErrorClass {
	return p.ErrorClass
}

func (p *Error) GetCode() int64 {
	return p.Code
}

func (p *Error) GetDescription() string {
	return p.Description
}
func (p *Error) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Error) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := ErrorClass(v)
		p.ErrorClass = temp
	}
	return nil
}

func (p *Error) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Code = v
	}
	return nil
}

func (p *Error) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Description = v
	}
	return nil
}

func (p *Error) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Error"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Error) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ErrorClass", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ErrorClass: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.ErrorClass)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ErrorClass (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ErrorClass: ", p), err)
	}
	return err
}

func (p *Error) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Code", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Code: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Code (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Code: ", p), err)
	}
	return err
}

func (p *Error) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Description", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Description: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Description)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Description (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Description: ", p), err)
	}
	return err
}

func (p *Error) Equals(other *Error) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.ErrorClass != other.ErrorClass {
		return false
	}
	if p.Code != other.Code {
		return false
	}
	if p.Description != other.Description {
		return false
	}
	return true
}

func (p *Error) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Error(%+v)", *p)
}

// Attributes:
//   - DiffMeasuredBootAreas
//   - CompareEventLogAndRealMeasurements
//   - ValidateMeasurementsFlow
//   - ValidateImageIntelCBnTManifestsAndACM
type AnalysisInput struct {
	DiffMeasuredBootAreas                 *DiffMeasuredBootAreasInput                 `thrift:"DiffMeasuredBootAreas,1" db:"DiffMeasuredBootAreas" json:"DiffMeasuredBootAreas,omitempty"`
	CompareEventLogAndRealMeasurements    *CompareEventLogAndRealMeasurementsInput    `thrift:"CompareEventLogAndRealMeasurements,2" db:"CompareEventLogAndRealMeasurements" json:"CompareEventLogAndRealMeasurements,omitempty"`
	ValidateMeasurementsFlow              *ValidateMeasurementsFlowInput              `thrift:"ValidateMeasurementsFlow,3" db:"ValidateMeasurementsFlow" json:"ValidateMeasurementsFlow,omitempty"`
	ValidateImageIntelCBnTManifestsAndACM *ValidateImageIntelCBnTManifestsAndACMInput `thrift:"ValidateImageIntelCBnTManifestsAndACM,4" db:"ValidateImageIntelCBnTManifestsAndACM" json:"ValidateImageIntelCBnTManifestsAndACM,omitempty"`
}

func NewAnalysisInput() *AnalysisInput {
	return &AnalysisInput{}
}

var AnalysisInput_DiffMeasuredBootAreas_DEFAULT *DiffMeasuredBootAreasInput

func (p *AnalysisInput) GetDiffMeasuredBootAreas() *DiffMeasuredBootAreasInput {
	if !p.IsSetDiffMeasuredBootAreas() {
		return AnalysisInput_DiffMeasuredBootAreas_DEFAULT
	}
	return p.DiffMeasuredBootAreas
}

var AnalysisInput_CompareEventLogAndRealMeasurements_DEFAULT *CompareEventLogAndRealMeasurementsInput

func (p *AnalysisInput) GetCompareEventLogAndRealMeasurements() *CompareEventLogAndRealMeasurementsInput {
	if !p.IsSetCompareEventLogAndRealMeasurements() {
		return AnalysisInput_CompareEventLogAndRealMeasurements_DEFAULT
	}
	return p.CompareEventLogAndRealMeasurements
}

var AnalysisInput_ValidateMeasurementsFlow_DEFAULT *ValidateMeasurementsFlowInput

func (p *AnalysisInput) GetValidateMeasurementsFlow() *ValidateMeasurementsFlowInput {
	if !p.IsSetValidateMeasurementsFlow() {
		return AnalysisInput_ValidateMeasurementsFlow_DEFAULT
	}
	return p.ValidateMeasurementsFlow
}

var AnalysisInput_ValidateImageIntelCBnTManifestsAndACM_DEFAULT *ValidateImageIntelCBnTManifestsAndACMInput

func (p *AnalysisInput) GetValidateImageIntelCBnTManifestsAndACM() *ValidateImageIntelCBnTManifestsAndACMInput {
	if !p.IsSetValidateImageIntelCBnTManifestsAndACM() {
		return AnalysisInput_ValidateImageIntelCBnTManifestsAndACM_DEFAULT
	}
	return p.ValidateImageIntelCBnTManifestsAndACM
}
func (p *AnalysisInput) CountSetFieldsAnalysisInput() int {
	count := 0
	if p.IsSetDiffMeasuredBootAreas() {
		count++
	}
	if p.IsSetCompareEventLogAndRealMeasurements() {
		count++
	}
	if p.IsSetValidateMeasurementsFlow() {
		count++
	}
	if p.IsSetValidateImageIntelCBnTManifestsAndACM() {
		count++
	}
	return count

}

func (p *AnalysisInput) IsSetDiffMeasuredBootAreas() bool {
	return p.DiffMeasuredBootAreas != nil
}

func (p *AnalysisInput) IsSetCompareEventLogAndRealMeasurements() bool {
	return p.CompareEventLogAndRealMeasurements != nil
}

func (p *AnalysisInput) IsSetValidateMeasurementsFlow() bool {
	return p.ValidateMeasurementsFlow != nil
}

func (p *AnalysisInput) IsSetValidateImageIntelCBnTManifestsAndACM() bool {
	return p.ValidateImageIntelCBnTManifestsAndACM != nil
}

func (p *AnalysisInput) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AnalysisInput) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.DiffMeasuredBootAreas = &DiffMeasuredBootAreasInput{}
	if err := p.DiffMeasuredBootAreas.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DiffMeasuredBootAreas), err)
	}
	return nil
}

func (p *AnalysisInput) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.CompareEventLogAndRealMeasurements = &CompareEventLogAndRealMeasurementsInput{}
	if err := p.CompareEventLogAndRealMeasurements.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CompareEventLogAndRealMeasurements), err)
	}
	return nil
}

func (p *AnalysisInput) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	p.ValidateMeasurementsFlow = &ValidateMeasurementsFlowInput{}
	if err := p.ValidateMeasurementsFlow.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ValidateMeasurementsFlow), err)
	}
	return nil
}

func (p *AnalysisInput) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	p.ValidateImageIntelCBnTManifestsAndACM = &ValidateImageIntelCBnTManifestsAndACMInput{}
	if err := p.ValidateImageIntelCBnTManifestsAndACM.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ValidateImageIntelCBnTManifestsAndACM), err)
	}
	return nil
}

func (p *AnalysisInput) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if c := p.CountSetFieldsAnalysisInput(); c != 1 {
		return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
	}
	if err := oprot.WriteStructBegin(ctx, "AnalysisInput"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AnalysisInput) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetDiffMeasuredBootAreas() {
		if err := oprot.WriteFieldBegin(ctx, "DiffMeasuredBootAreas", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:DiffMeasuredBootAreas: ", p), err)
		}
		if err := p.DiffMeasuredBootAreas.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DiffMeasuredBootAreas), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:DiffMeasuredBootAreas: ", p), err)
		}
	}
	return err
}

func (p *AnalysisInput) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetCompareEventLogAndRealMeasurements() {
		if err := oprot.WriteFieldBegin(ctx, "CompareEventLogAndRealMeasurements", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:CompareEventLogAndRealMeasurements: ", p), err)
		}
		if err := p.CompareEventLogAndRealMeasurements.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CompareEventLogAndRealMeasurements), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:CompareEventLogAndRealMeasurements: ", p), err)
		}
	}
	return err
}

func (p *AnalysisInput) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetValidateMeasurementsFlow() {
		if err := oprot.WriteFieldBegin(ctx, "ValidateMeasurementsFlow", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ValidateMeasurementsFlow: ", p), err)
		}
		if err := p.ValidateMeasurementsFlow.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ValidateMeasurementsFlow), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ValidateMeasurementsFlow: ", p), err)
		}
	}
	return err
}

func (p *AnalysisInput) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetValidateImageIntelCBnTManifestsAndACM() {
		if err := oprot.WriteFieldBegin(ctx, "ValidateImageIntelCBnTManifestsAndACM", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ValidateImageIntelCBnTManifestsAndACM: ", p), err)
		}
		if err := p.ValidateImageIntelCBnTManifestsAndACM.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ValidateImageIntelCBnTManifestsAndACM), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ValidateImageIntelCBnTManifestsAndACM: ", p), err)
		}
	}
	return err
}

func (p *AnalysisInput) Equals(other *AnalysisInput) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.DiffMeasuredBootAreas.Equals(other.DiffMeasuredBootAreas) {
		return false
	}
	if !p.CompareEventLogAndRealMeasurements.Equals(other.CompareEventLogAndRealMeasurements) {
		return false
	}
	if !p.ValidateMeasurementsFlow.Equals(other.ValidateMeasurementsFlow) {
		return false
	}
	if !p.ValidateImageIntelCBnTManifestsAndACM.Equals(other.ValidateImageIntelCBnTManifestsAndACM) {
		return false
	}
	return true
}

func (p *AnalysisInput) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AnalysisInput(%+v)", *p)
}

// Attributes:
//   - DiffMeasuredBootAreas
//   - CompareEventLogAndRealMeasurements
//   - ValidateMeasurementsFlow
//   - ValidateImageIntelCBnTManifestsAndACM
type AnalysisReport struct {
	DiffMeasuredBootAreas                 *DiffMeasuredBootAreasReport                 `thrift:"DiffMeasuredBootAreas,1" db:"DiffMeasuredBootAreas" json:"DiffMeasuredBootAreas,omitempty"`
	CompareEventLogAndRealMeasurements    *CompareEventLogAndRealMeasurementsReport    `thrift:"CompareEventLogAndRealMeasurements,2" db:"CompareEventLogAndRealMeasurements" json:"CompareEventLogAndRealMeasurements,omitempty"`
	ValidateMeasurementsFlow              *ValidateMeasurementsFlowReport              `thrift:"ValidateMeasurementsFlow,3" db:"ValidateMeasurementsFlow" json:"ValidateMeasurementsFlow,omitempty"`
	ValidateImageIntelCBnTManifestsAndACM *ValidateImageIntelCBnTManifestsAndACMReport `thrift:"ValidateImageIntelCBnTManifestsAndACM,4" db:"ValidateImageIntelCBnTManifestsAndACM" json:"ValidateImageIntelCBnTManifestsAndACM,omitempty"`
}

func NewAnalysisReport() *AnalysisReport {
	return &AnalysisReport{}
}

var AnalysisReport_DiffMeasuredBootAreas_DEFAULT *DiffMeasuredBootAreasReport

func (p *AnalysisReport) GetDiffMeasuredBootAreas() *DiffMeasuredBootAreasReport {
	if !p.IsSetDiffMeasuredBootAreas() {
		return AnalysisReport_DiffMeasuredBootAreas_DEFAULT
	}
	return p.DiffMeasuredBootAreas
}

var AnalysisReport_CompareEventLogAndRealMeasurements_DEFAULT *CompareEventLogAndRealMeasurementsReport

func (p *AnalysisReport) GetCompareEventLogAndRealMeasurements() *CompareEventLogAndRealMeasurementsReport {
	if !p.IsSetCompareEventLogAndRealMeasurements() {
		return AnalysisReport_CompareEventLogAndRealMeasurements_DEFAULT
	}
	return p.CompareEventLogAndRealMeasurements
}

var AnalysisReport_ValidateMeasurementsFlow_DEFAULT *ValidateMeasurementsFlowReport

func (p *AnalysisReport) GetValidateMeasurementsFlow() *ValidateMeasurementsFlowReport {
	if !p.IsSetValidateMeasurementsFlow() {
		return AnalysisReport_ValidateMeasurementsFlow_DEFAULT
	}
	return p.ValidateMeasurementsFlow
}

var AnalysisReport_ValidateImageIntelCBnTManifestsAndACM_DEFAULT *ValidateImageIntelCBnTManifestsAndACMReport

func (p *AnalysisReport) GetValidateImageIntelCBnTManifestsAndACM() *ValidateImageIntelCBnTManifestsAndACMReport {
	if !p.IsSetValidateImageIntelCBnTManifestsAndACM() {
		return AnalysisReport_ValidateImageIntelCBnTManifestsAndACM_DEFAULT
	}
	return p.ValidateImageIntelCBnTManifestsAndACM
}
func (p *AnalysisReport) CountSetFieldsAnalysisReport() int {
	count := 0
	if p.IsSetDiffMeasuredBootAreas() {
		count++
	}
	if p.IsSetCompareEventLogAndRealMeasurements() {
		count++
	}
	if p.IsSetValidateMeasurementsFlow() {
		count++
	}
	if p.IsSetValidateImageIntelCBnTManifestsAndACM() {
		count++
	}
	return count

}

func (p *AnalysisReport) IsSetDiffMeasuredBootAreas() bool {
	return p.DiffMeasuredBootAreas != nil
}

func (p *AnalysisReport) IsSetCompareEventLogAndRealMeasurements() bool {
	return p.CompareEventLogAndRealMeasurements != nil
}

func (p *AnalysisReport) IsSetValidateMeasurementsFlow() bool {
	return p.ValidateMeasurementsFlow != nil
}

func (p *AnalysisReport) IsSetValidateImageIntelCBnTManifestsAndACM() bool {
	return p.ValidateImageIntelCBnTManifestsAndACM != nil
}

func (p *AnalysisReport) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AnalysisReport) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.DiffMeasuredBootAreas = &DiffMeasuredBootAreasReport{}
	if err := p.DiffMeasuredBootAreas.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DiffMeasuredBootAreas), err)
	}
	return nil
}

func (p *AnalysisReport) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.CompareEventLogAndRealMeasurements = &CompareEventLogAndRealMeasurementsReport{}
	if err := p.CompareEventLogAndRealMeasurements.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CompareEventLogAndRealMeasurements), err)
	}
	return nil
}

func (p *AnalysisReport) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	p.ValidateMeasurementsFlow = &ValidateMeasurementsFlowReport{}
	if err := p.ValidateMeasurementsFlow.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ValidateMeasurementsFlow), err)
	}
	return nil
}

func (p *AnalysisReport) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	p.ValidateImageIntelCBnTManifestsAndACM = &ValidateImageIntelCBnTManifestsAndACMReport{}
	if err := p.ValidateImageIntelCBnTManifestsAndACM.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ValidateImageIntelCBnTManifestsAndACM), err)
	}
	return nil
}

func (p *AnalysisReport) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if c := p.CountSetFieldsAnalysisReport(); c != 1 {
		return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
	}
	if err := oprot.WriteStructBegin(ctx, "AnalysisReport"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AnalysisReport) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetDiffMeasuredBootAreas() {
		if err := oprot.WriteFieldBegin(ctx, "DiffMeasuredBootAreas", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:DiffMeasuredBootAreas: ", p), err)
		}
		if err := p.DiffMeasuredBootAreas.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DiffMeasuredBootAreas), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:DiffMeasuredBootAreas: ", p), err)
		}
	}
	return err
}

func (p *AnalysisReport) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetCompareEventLogAndRealMeasurements() {
		if err := oprot.WriteFieldBegin(ctx, "CompareEventLogAndRealMeasurements", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:CompareEventLogAndRealMeasurements: ", p), err)
		}
		if err := p.CompareEventLogAndRealMeasurements.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CompareEventLogAndRealMeasurements), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:CompareEventLogAndRealMeasurements: ", p), err)
		}
	}
	return err
}

func (p *AnalysisReport) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetValidateMeasurementsFlow() {
		if err := oprot.WriteFieldBegin(ctx, "ValidateMeasurementsFlow", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ValidateMeasurementsFlow: ", p), err)
		}
		if err := p.ValidateMeasurementsFlow.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ValidateMeasurementsFlow), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ValidateMeasurementsFlow: ", p), err)
		}
	}
	return err
}

func (p *AnalysisReport) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetValidateImageIntelCBnTManifestsAndACM() {
		if err := oprot.WriteFieldBegin(ctx, "ValidateImageIntelCBnTManifestsAndACM", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ValidateImageIntelCBnTManifestsAndACM: ", p), err)
		}
		if err := p.ValidateImageIntelCBnTManifestsAndACM.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ValidateImageIntelCBnTManifestsAndACM), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ValidateImageIntelCBnTManifestsAndACM: ", p), err)
		}
	}
	return err
}

func (p *AnalysisReport) Equals(other *AnalysisReport) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.DiffMeasuredBootAreas.Equals(other.DiffMeasuredBootAreas) {
		return false
	}
	if !p.CompareEventLogAndRealMeasurements.Equals(other.CompareEventLogAndRealMeasurements) {
		return false
	}
	if !p.ValidateMeasurementsFlow.Equals(other.ValidateMeasurementsFlow) {
		return false
	}
	if !p.ValidateImageIntelCBnTManifestsAndACM.Equals(other.ValidateImageIntelCBnTManifestsAndACM) {
		return false
	}
	return true
}

func (p *AnalysisReport) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AnalysisReport(%+v)", *p)
}

// Attributes:
//   - DumpedFirmware
//   - OriginalFirmware
type DiffMeasuredBootAreasInput struct {
	DumpedFirmware   *FirmwareReference        `thrift:"DumpedFirmware,1" db:"DumpedFirmware" json:"DumpedFirmware"`
	OriginalFirmware *OriginalFirmwareSelector `thrift:"OriginalFirmware,2" db:"OriginalFirmware" json:"OriginalFirmware"`
}

func NewDiffMeasuredBootAreasInput() *DiffMeasuredBootAreasInput {
	return &DiffMeasuredBootAreasInput{}
}

var DiffMeasuredBootAreasInput_DumpedFirmware_DEFAULT *FirmwareReference

func (p *DiffMeasuredBootAreasInput) GetDumpedFirmware() *FirmwareReference {
	if !p.IsSetDumpedFirmware() {
		return DiffMeasuredBootAreasInput_DumpedFirmware_DEFAULT
	}
	return p.DumpedFirmware
}

var DiffMeasuredBootAreasInput_OriginalFirmware_DEFAULT *OriginalFirmwareSelector

func (p *DiffMeasuredBootAreasInput) GetOriginalFirmware() *OriginalFirmwareSelector {
	if !p.IsSetOriginalFirmware() {
		return DiffMeasuredBootAreasInput_OriginalFirmware_DEFAULT
	}
	return p.OriginalFirmware
}
func (p *DiffMeasuredBootAreasInput) IsSetDumpedFirmware() bool {
	return p.DumpedFirmware != nil
}

func (p *DiffMeasuredBootAreasInput) IsSetOriginalFirmware() bool {
	return p.OriginalFirmware != nil
}

func (p *DiffMeasuredBootAreasInput) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DiffMeasuredBootAreasInput) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.DumpedFirmware = &FirmwareReference{}
	if err := p.DumpedFirmware.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DumpedFirmware), err)
	}
	return nil
}

func (p *DiffMeasuredBootAreasInput) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.OriginalFirmware = &OriginalFirmwareSelector{}
	if err := p.OriginalFirmware.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OriginalFirmware), err)
	}
	return nil
}

func (p *DiffMeasuredBootAreasInput) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "DiffMeasuredBootAreasInput"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DiffMeasuredBootAreasInput) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "DumpedFirmware", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:DumpedFirmware: ", p), err)
	}
	if err := p.DumpedFirmware.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DumpedFirmware), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:DumpedFirmware: ", p), err)
	}
	return err
}

func (p *DiffMeasuredBootAreasInput) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "OriginalFirmware", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:OriginalFirmware: ", p), err)
	}
	if err := p.OriginalFirmware.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OriginalFirmware), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:OriginalFirmware: ", p), err)
	}
	return err
}

func (p *DiffMeasuredBootAreasInput) Equals(other *DiffMeasuredBootAreasInput) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.DumpedFirmware.Equals(other.DumpedFirmware) {
		return false
	}
	if !p.OriginalFirmware.Equals(other.OriginalFirmware) {
		return false
	}
	return true
}

func (p *DiffMeasuredBootAreasInput) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DiffMeasuredBootAreasInput(%+v)", *p)
}

// Attributes:
//   - DiffEntries
//   - DiffDiagnosis
type DiffMeasuredBootAreasReport struct {
	DiffEntries   []*DiffEntry  `thrift:"DiffEntries,1" db:"DiffEntries" json:"DiffEntries"`
	DiffDiagnosis DiffDiagnosis `thrift:"DiffDiagnosis,2" db:"DiffDiagnosis" json:"DiffDiagnosis"`
}

func NewDiffMeasuredBootAreasReport() *DiffMeasuredBootAreasReport {
	return &DiffMeasuredBootAreasReport{}
}

func (p *DiffMeasuredBootAreasReport) GetDiffEntries() []*DiffEntry {
	return p.DiffEntries
}

func (p *DiffMeasuredBootAreasReport) GetDiffDiagnosis() DiffDiagnosis {
	return p.DiffDiagnosis
}
func (p *DiffMeasuredBootAreasReport) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DiffMeasuredBootAreasReport) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*DiffEntry, 0, size)
	p.DiffEntries = tSlice
	for i := 0; i < size; i++ {
		_elem20 := &DiffEntry{}
		if err := _elem20.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem20), err)
		}
		p.DiffEntries = append(p.DiffEntries, _elem20)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *DiffMeasuredBootAreasReport) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := DiffDiagnosis(v)
		p.DiffDiagnosis = temp
	}
	return nil
}

func (p *DiffMeasuredBootAreasReport) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "DiffMeasuredBootAreasReport"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DiffMeasuredBootAreasReport) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "DiffEntries", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:DiffEntries: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.DiffEntries)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.DiffEntries {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:DiffEntries: ", p), err)
	}
	return err
}

func (p *DiffMeasuredBootAreasReport) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "DiffDiagnosis", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:DiffDiagnosis: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.DiffDiagnosis)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.DiffDiagnosis (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:DiffDiagnosis: ", p), err)
	}
	return err
}

func (p *DiffMeasuredBootAreasReport) Equals(other *DiffMeasuredBootAreasReport) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.DiffEntries) != len(other.DiffEntries) {
		return false
	}
	for i, _tgt := range p.DiffEntries {
		_src21 := other.DiffEntries[i]
		if !_tgt.Equals(_src21) {
			return false
		}
	}
	if p.DiffDiagnosis != other.DiffDiagnosis {
		return false
	}
	return true
}

func (p *DiffMeasuredBootAreasReport) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DiffMeasuredBootAreasReport(%+v)", *p)
}

// Attributes:
//   - TPMEventLog
//   - ExpectedPCRValues
type CompareEventLogAndRealMeasurementsInput struct {
	TPMEventLog       *tpm.EventLog `thrift:"TPMEventLog,1" db:"TPMEventLog" json:"TPMEventLog,omitempty"`
	ExpectedPCRValues *PCRValues    `thrift:"ExpectedPCRValues,2" db:"ExpectedPCRValues" json:"ExpectedPCRValues"`
}

func NewCompareEventLogAndRealMeasurementsInput() *CompareEventLogAndRealMeasurementsInput {
	return &CompareEventLogAndRealMeasurementsInput{}
}

var CompareEventLogAndRealMeasurementsInput_TPMEventLog_DEFAULT *tpm.EventLog

func (p *CompareEventLogAndRealMeasurementsInput) GetTPMEventLog() *tpm.EventLog {
	if !p.IsSetTPMEventLog() {
		return CompareEventLogAndRealMeasurementsInput_TPMEventLog_DEFAULT
	}
	return p.TPMEventLog
}

var CompareEventLogAndRealMeasurementsInput_ExpectedPCRValues_DEFAULT *PCRValues

func (p *CompareEventLogAndRealMeasurementsInput) GetExpectedPCRValues() *PCRValues {
	if !p.IsSetExpectedPCRValues() {
		return CompareEventLogAndRealMeasurementsInput_ExpectedPCRValues_DEFAULT
	}
	return p.ExpectedPCRValues
}
func (p *CompareEventLogAndRealMeasurementsInput) IsSetTPMEventLog() bool {
	return p.TPMEventLog != nil
}

func (p *CompareEventLogAndRealMeasurementsInput) IsSetExpectedPCRValues() bool {
	return p.ExpectedPCRValues != nil
}

func (p *CompareEventLogAndRealMeasurementsInput) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CompareEventLogAndRealMeasurementsInput) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.TPMEventLog = &tpm.EventLog{}
	if err := p.TPMEventLog.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TPMEventLog), err)
	}
	return nil
}

func (p *CompareEventLogAndRealMeasurementsInput) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.ExpectedPCRValues = &PCRValues{}
	if err := p.ExpectedPCRValues.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ExpectedPCRValues), err)
	}
	return nil
}

func (p *CompareEventLogAndRealMeasurementsInput) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "CompareEventLogAndRealMeasurementsInput"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CompareEventLogAndRealMeasurementsInput) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTPMEventLog() {
		if err := oprot.WriteFieldBegin(ctx, "TPMEventLog", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:TPMEventLog: ", p), err)
		}
		if err := p.TPMEventLog.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TPMEventLog), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:TPMEventLog: ", p), err)
		}
	}
	return err
}

func (p *CompareEventLogAndRealMeasurementsInput) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ExpectedPCRValues", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ExpectedPCRValues: ", p), err)
	}
	if err := p.ExpectedPCRValues.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ExpectedPCRValues), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ExpectedPCRValues: ", p), err)
	}
	return err
}

func (p *CompareEventLogAndRealMeasurementsInput) Equals(other *CompareEventLogAndRealMeasurementsInput) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.TPMEventLog.Equals(other.TPMEventLog) {
		return false
	}
	if !p.ExpectedPCRValues.Equals(other.ExpectedPCRValues) {
		return false
	}
	return true
}

func (p *CompareEventLogAndRealMeasurementsInput) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CompareEventLogAndRealMeasurementsInput(%+v)", *p)
}

type CompareEventLogAndRealMeasurementsReport struct {
}

func NewCompareEventLogAndRealMeasurementsReport() *CompareEventLogAndRealMeasurementsReport {
	return &CompareEventLogAndRealMeasurementsReport{}
}

func (p *CompareEventLogAndRealMeasurementsReport) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CompareEventLogAndRealMeasurementsReport) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "CompareEventLogAndRealMeasurementsReport"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CompareEventLogAndRealMeasurementsReport) Equals(other *CompareEventLogAndRealMeasurementsReport) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	return true
}

func (p *CompareEventLogAndRealMeasurementsReport) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CompareEventLogAndRealMeasurementsReport(%+v)", *p)
}

// Attributes:
//   - Firmware
//   - ResultingPCRValues
type ValidateMeasurementsFlowInput struct {
	Firmware           *FirmwareReference `thrift:"Firmware,1" db:"Firmware" json:"Firmware"`
	ResultingPCRValues *PCRValues         `thrift:"ResultingPCRValues,2" db:"ResultingPCRValues" json:"ResultingPCRValues"`
}

func NewValidateMeasurementsFlowInput() *ValidateMeasurementsFlowInput {
	return &ValidateMeasurementsFlowInput{}
}

var ValidateMeasurementsFlowInput_Firmware_DEFAULT *FirmwareReference

func (p *ValidateMeasurementsFlowInput) GetFirmware() *FirmwareReference {
	if !p.IsSetFirmware() {
		return ValidateMeasurementsFlowInput_Firmware_DEFAULT
	}
	return p.Firmware
}

var ValidateMeasurementsFlowInput_ResultingPCRValues_DEFAULT *PCRValues

func (p *ValidateMeasurementsFlowInput) GetResultingPCRValues() *PCRValues {
	if !p.IsSetResultingPCRValues() {
		return ValidateMeasurementsFlowInput_ResultingPCRValues_DEFAULT
	}
	return p.ResultingPCRValues
}
func (p *ValidateMeasurementsFlowInput) IsSetFirmware() bool {
	return p.Firmware != nil
}

func (p *ValidateMeasurementsFlowInput) IsSetResultingPCRValues() bool {
	return p.ResultingPCRValues != nil
}

func (p *ValidateMeasurementsFlowInput) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ValidateMeasurementsFlowInput) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Firmware = &FirmwareReference{}
	if err := p.Firmware.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Firmware), err)
	}
	return nil
}

func (p *ValidateMeasurementsFlowInput) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.ResultingPCRValues = &PCRValues{}
	if err := p.ResultingPCRValues.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ResultingPCRValues), err)
	}
	return nil
}

func (p *ValidateMeasurementsFlowInput) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ValidateMeasurementsFlowInput"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ValidateMeasurementsFlowInput) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Firmware", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Firmware: ", p), err)
	}
	if err := p.Firmware.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Firmware), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Firmware: ", p), err)
	}
	return err
}

func (p *ValidateMeasurementsFlowInput) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ResultingPCRValues", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ResultingPCRValues: ", p), err)
	}
	if err := p.ResultingPCRValues.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ResultingPCRValues), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ResultingPCRValues: ", p), err)
	}
	return err
}

func (p *ValidateMeasurementsFlowInput) Equals(other *ValidateMeasurementsFlowInput) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.Firmware.Equals(other.Firmware) {
		return false
	}
	if !p.ResultingPCRValues.Equals(other.ResultingPCRValues) {
		return false
	}
	return true
}

func (p *ValidateMeasurementsFlowInput) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ValidateMeasurementsFlowInput(%+v)", *p)
}

// Attributes:
//   - ExpectedFlow
//   - ExpectedLocality
//   - ActualFlow
//   - ActualLocality
//   - MissedMeasurements
type ValidateMeasurementsFlowReport struct {
	ExpectedFlow       Flow    `thrift:"ExpectedFlow,1" db:"ExpectedFlow" json:"ExpectedFlow"`
	ExpectedLocality   int8    `thrift:"ExpectedLocality,2" db:"ExpectedLocality" json:"ExpectedLocality"`
	ActualFlow         *Flow   `thrift:"ActualFlow,3" db:"ActualFlow" json:"ActualFlow,omitempty"`
	ActualLocality     *int8   `thrift:"ActualLocality,4" db:"ActualLocality" json:"ActualLocality,omitempty"`
	MissedMeasurements []int64 `thrift:"MissedMeasurements,5" db:"MissedMeasurements" json:"MissedMeasurements"`
}

func NewValidateMeasurementsFlowReport() *ValidateMeasurementsFlowReport {
	return &ValidateMeasurementsFlowReport{}
}

func (p *ValidateMeasurementsFlowReport) GetExpectedFlow() Flow {
	return p.ExpectedFlow
}

func (p *ValidateMeasurementsFlowReport) GetExpectedLocality() int8 {
	return p.ExpectedLocality
}

var ValidateMeasurementsFlowReport_ActualFlow_DEFAULT Flow

func (p *ValidateMeasurementsFlowReport) GetActualFlow() Flow {
	if !p.IsSetActualFlow() {
		return ValidateMeasurementsFlowReport_ActualFlow_DEFAULT
	}
	return *p.ActualFlow
}

var ValidateMeasurementsFlowReport_ActualLocality_DEFAULT int8

func (p *ValidateMeasurementsFlowReport) GetActualLocality() int8 {
	if !p.IsSetActualLocality() {
		return ValidateMeasurementsFlowReport_ActualLocality_DEFAULT
	}
	return *p.ActualLocality
}

func (p *ValidateMeasurementsFlowReport) GetMissedMeasurements() []int64 {
	return p.MissedMeasurements
}
func (p *ValidateMeasurementsFlowReport) IsSetActualFlow() bool {
	return p.ActualFlow != nil
}

func (p *ValidateMeasurementsFlowReport) IsSetActualLocality() bool {
	return p.ActualLocality != nil
}

func (p *ValidateMeasurementsFlowReport) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ValidateMeasurementsFlowReport) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Flow(v)
		p.ExpectedFlow = temp
	}
	return nil
}

func (p *ValidateMeasurementsFlowReport) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := int8(v)
		p.ExpectedLocality = temp
	}
	return nil
}

func (p *ValidateMeasurementsFlowReport) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := Flow(v)
		p.ActualFlow = &temp
	}
	return nil
}

func (p *ValidateMeasurementsFlowReport) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := int8(v)
		p.ActualLocality = &temp
	}
	return nil
}

func (p *ValidateMeasurementsFlowReport) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.MissedMeasurements = tSlice
	for i := 0; i < size; i++ {
		var _elem22 int64
		if v, err := iprot.ReadI64(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem22 = v
		}
		p.MissedMeasurements = append(p.MissedMeasurements, _elem22)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ValidateMeasurementsFlowReport) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ValidateMeasurementsFlowReport"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ValidateMeasurementsFlowReport) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ExpectedFlow", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ExpectedFlow: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.ExpectedFlow)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ExpectedFlow (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ExpectedFlow: ", p), err)
	}
	return err
}

func (p *ValidateMeasurementsFlowReport) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ExpectedLocality", thrift.BYTE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ExpectedLocality: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.ExpectedLocality)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ExpectedLocality (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ExpectedLocality: ", p), err)
	}
	return err
}

func (p *ValidateMeasurementsFlowReport) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetActualFlow() {
		if err := oprot.WriteFieldBegin(ctx, "ActualFlow", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ActualFlow: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.ActualFlow)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ActualFlow (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ActualFlow: ", p), err)
		}
	}
	return err
}

func (p *ValidateMeasurementsFlowReport) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetActualLocality() {
		if err := oprot.WriteFieldBegin(ctx, "ActualLocality", thrift.BYTE, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ActualLocality: ", p), err)
		}
		if err := oprot.WriteByte(ctx, int8(*p.ActualLocality)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ActualLocality (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ActualLocality: ", p), err)
		}
	}
	return err
}

func (p *ValidateMeasurementsFlowReport) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "MissedMeasurements", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:MissedMeasurements: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.MissedMeasurements)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.MissedMeasurements {
		if err := oprot.WriteI64(ctx, int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:MissedMeasurements: ", p), err)
	}
	return err
}

func (p *ValidateMeasurementsFlowReport) Equals(other *ValidateMeasurementsFlowReport) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.ExpectedFlow != other.ExpectedFlow {
		return false
	}
	if p.ExpectedLocality != other.ExpectedLocality {
		return false
	}
	if p.ActualFlow != other.ActualFlow {
		if p.ActualFlow == nil || other.ActualFlow == nil {
			return false
		}
		if (*p.ActualFlow) != (*other.ActualFlow) {
			return false
		}
	}
	if p.ActualLocality != other.ActualLocality {
		if p.ActualLocality == nil || other.ActualLocality == nil {
			return false
		}
		if (*p.ActualLocality) != (*other.ActualLocality) {
			return false
		}
	}
	if len(p.MissedMeasurements) != len(other.MissedMeasurements) {
		return false
	}
	for i, _tgt := range p.MissedMeasurements {
		_src23 := other.MissedMeasurements[i]
		if _tgt != _src23 {
			return false
		}
	}
	return true
}

func (p *ValidateMeasurementsFlowReport) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ValidateMeasurementsFlowReport(%+v)", *p)
}

// Attributes:
//   - DumpedFirmware
type ValidateImageIntelCBnTManifestsAndACMInput struct {
	DumpedFirmware *FirmwareReference `thrift:"DumpedFirmware,1" db:"DumpedFirmware" json:"DumpedFirmware"`
}

func NewValidateImageIntelCBnTManifestsAndACMInput() *ValidateImageIntelCBnTManifestsAndACMInput {
	return &ValidateImageIntelCBnTManifestsAndACMInput{}
}

var ValidateImageIntelCBnTManifestsAndACMInput_DumpedFirmware_DEFAULT *FirmwareReference

func (p *ValidateImageIntelCBnTManifestsAndACMInput) GetDumpedFirmware() *FirmwareReference {
	if !p.IsSetDumpedFirmware() {
		return ValidateImageIntelCBnTManifestsAndACMInput_DumpedFirmware_DEFAULT
	}
	return p.DumpedFirmware
}
func (p *ValidateImageIntelCBnTManifestsAndACMInput) IsSetDumpedFirmware() bool {
	return p.DumpedFirmware != nil
}

func (p *ValidateImageIntelCBnTManifestsAndACMInput) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ValidateImageIntelCBnTManifestsAndACMInput) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.DumpedFirmware = &FirmwareReference{}
	if err := p.DumpedFirmware.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DumpedFirmware), err)
	}
	return nil
}

func (p *ValidateImageIntelCBnTManifestsAndACMInput) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ValidateImageIntelCBnTManifestsAndACMInput"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ValidateImageIntelCBnTManifestsAndACMInput) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "DumpedFirmware", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:DumpedFirmware: ", p), err)
	}
	if err := p.DumpedFirmware.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DumpedFirmware), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:DumpedFirmware: ", p), err)
	}
	return err
}

func (p *ValidateImageIntelCBnTManifestsAndACMInput) Equals(other *ValidateImageIntelCBnTManifestsAndACMInput) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.DumpedFirmware.Equals(other.DumpedFirmware) {
		return false
	}
	return true
}

func (p *ValidateImageIntelCBnTManifestsAndACMInput) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ValidateImageIntelCBnTManifestsAndACMInput(%+v)", *p)
}

// Attributes:
//   - ACMInfo
type ValidateImageIntelCBnTManifestsAndACMReport struct {
	ACMInfo *ACMInfo `thrift:"ACMInfo,1" db:"ACMInfo" json:"ACMInfo,omitempty"`
}

func NewValidateImageIntelCBnTManifestsAndACMReport() *ValidateImageIntelCBnTManifestsAndACMReport {
	return &ValidateImageIntelCBnTManifestsAndACMReport{}
}

var ValidateImageIntelCBnTManifestsAndACMReport_ACMInfo_DEFAULT *ACMInfo

func (p *ValidateImageIntelCBnTManifestsAndACMReport) GetACMInfo() *ACMInfo {
	if !p.IsSetACMInfo() {
		return ValidateImageIntelCBnTManifestsAndACMReport_ACMInfo_DEFAULT
	}
	return p.ACMInfo
}
func (p *ValidateImageIntelCBnTManifestsAndACMReport) IsSetACMInfo() bool {
	return p.ACMInfo != nil
}

func (p *ValidateImageIntelCBnTManifestsAndACMReport) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ValidateImageIntelCBnTManifestsAndACMReport) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.ACMInfo = &ACMInfo{}
	if err := p.ACMInfo.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ACMInfo), err)
	}
	return nil
}

func (p *ValidateImageIntelCBnTManifestsAndACMReport) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ValidateImageIntelCBnTManifestsAndACMReport"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ValidateImageIntelCBnTManifestsAndACMReport) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetACMInfo() {
		if err := oprot.WriteFieldBegin(ctx, "ACMInfo", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ACMInfo: ", p), err)
		}
		if err := p.ACMInfo.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ACMInfo), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ACMInfo: ", p), err)
		}
	}
	return err
}

func (p *ValidateImageIntelCBnTManifestsAndACMReport) Equals(other *ValidateImageIntelCBnTManifestsAndACMReport) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.ACMInfo.Equals(other.ACMInfo) {
		return false
	}
	return true
}

func (p *ValidateImageIntelCBnTManifestsAndACMReport) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ValidateImageIntelCBnTManifestsAndACMReport(%+v)", *p)
}
