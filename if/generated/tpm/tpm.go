// Code generated by Thrift Compiler (0.14.0). DO NOT EDIT.

package tpm

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"time"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

type Algo int64

const (
	Algo_Error   Algo = 0
	Algo_RSA     Algo = 1
	Algo_SHA1    Algo = 4
	Algo_SHA256  Algo = 11
	Algo_SHA384  Algo = 12
	Algo_SHA512  Algo = 13
	Algo_NULL_   Algo = 16
	Algo_SM3_256 Algo = 18
	Algo_SM4     Algo = 19
	Algo_RSASSA  Algo = 20
	Algo_ECDSA   Algo = 24
	Algo_SM2     Algo = 27
	Algo_KDF2    Algo = 33
	Algo_ECC     Algo = 35
)

func (p Algo) String() string {
	switch p {
	case Algo_Error:
		return "Error"
	case Algo_RSA:
		return "RSA"
	case Algo_SHA1:
		return "SHA1"
	case Algo_SHA256:
		return "SHA256"
	case Algo_SHA384:
		return "SHA384"
	case Algo_SHA512:
		return "SHA512"
	case Algo_NULL_:
		return "NULL_"
	case Algo_SM3_256:
		return "SM3_256"
	case Algo_SM4:
		return "SM4"
	case Algo_RSASSA:
		return "RSASSA"
	case Algo_ECDSA:
		return "ECDSA"
	case Algo_SM2:
		return "SM2"
	case Algo_KDF2:
		return "KDF2"
	case Algo_ECC:
		return "ECC"
	}
	return "<UNSET>"
}

func AlgoFromString(s string) (Algo, error) {
	switch s {
	case "Error":
		return Algo_Error, nil
	case "RSA":
		return Algo_RSA, nil
	case "SHA1":
		return Algo_SHA1, nil
	case "SHA256":
		return Algo_SHA256, nil
	case "SHA384":
		return Algo_SHA384, nil
	case "SHA512":
		return Algo_SHA512, nil
	case "NULL_":
		return Algo_NULL_, nil
	case "SM3_256":
		return Algo_SM3_256, nil
	case "SM4":
		return Algo_SM4, nil
	case "RSASSA":
		return Algo_RSASSA, nil
	case "ECDSA":
		return Algo_ECDSA, nil
	case "SM2":
		return Algo_SM2, nil
	case "KDF2":
		return Algo_KDF2, nil
	case "ECC":
		return Algo_ECC, nil
	}
	return Algo(0), fmt.Errorf("not a valid Algo string")
}

func AlgoPtr(v Algo) *Algo { return &v }

func (p Algo) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *Algo) UnmarshalText(text []byte) error {
	q, err := AlgoFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *Algo) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = Algo(v)
	return nil
}

func (p *Algo) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// Attributes:
//   - Events
type EventLog struct {
	Events []*Event `thrift:"Events,1" db:"Events" json:"Events"`
}

func NewEventLog() *EventLog {
	return &EventLog{}
}

func (p *EventLog) GetEvents() []*Event {
	return p.Events
}
func (p *EventLog) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *EventLog) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Event, 0, size)
	p.Events = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &Event{}
		if err := _elem0.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.Events = append(p.Events, _elem0)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *EventLog) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "EventLog"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *EventLog) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Events", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Events: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Events)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Events {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Events: ", p), err)
	}
	return err
}

func (p *EventLog) Equals(other *EventLog) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.Events) != len(other.Events) {
		return false
	}
	for i, _tgt := range p.Events {
		_src1 := other.Events[i]
		if !_tgt.Equals(_src1) {
			return false
		}
	}
	return true
}

func (p *EventLog) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EventLog(%+v)", *p)
}

// Attributes:
//   - PCRIndex
//   - Type
//   - Data
//   - Digest
type Event struct {
	PCRIndex int8     `thrift:"PCRIndex,1" db:"PCRIndex" json:"PCRIndex"`
	Type     int32    `thrift:"Type,2" db:"Type" json:"Type"`
	Data     []byte   `thrift:"Data,3" db:"Data" json:"Data"`
	Digest   *Digest_ `thrift:"Digest,4" db:"Digest" json:"Digest"`
}

func NewEvent() *Event {
	return &Event{}
}

func (p *Event) GetPCRIndex() int8 {
	return p.PCRIndex
}

func (p *Event) GetType() int32 {
	return p.Type
}

func (p *Event) GetData() []byte {
	return p.Data
}

var Event_Digest_DEFAULT *Digest_

func (p *Event) GetDigest() *Digest_ {
	if !p.IsSetDigest() {
		return Event_Digest_DEFAULT
	}
	return p.Digest
}
func (p *Event) IsSetDigest() bool {
	return p.Digest != nil
}

func (p *Event) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Event) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := int8(v)
		p.PCRIndex = temp
	}
	return nil
}

func (p *Event) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *Event) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Data = v
	}
	return nil
}

func (p *Event) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	p.Digest = &Digest_{}
	if err := p.Digest.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Digest), err)
	}
	return nil
}

func (p *Event) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Event"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Event) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "PCRIndex", thrift.BYTE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:PCRIndex: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.PCRIndex)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.PCRIndex (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:PCRIndex: ", p), err)
	}
	return err
}

func (p *Event) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Type", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Type: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Type: ", p), err)
	}
	return err
}

func (p *Event) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Data", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Data: ", p), err)
	}
	if err := oprot.WriteBinary(ctx, p.Data); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Data (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Data: ", p), err)
	}
	return err
}

func (p *Event) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Digest", thrift.STRUCT, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Digest: ", p), err)
	}
	if err := p.Digest.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Digest), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Digest: ", p), err)
	}
	return err
}

func (p *Event) Equals(other *Event) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.PCRIndex != other.PCRIndex {
		return false
	}
	if p.Type != other.Type {
		return false
	}
	if bytes.Compare(p.Data, other.Data) != 0 {
		return false
	}
	if !p.Digest.Equals(other.Digest) {
		return false
	}
	return true
}

func (p *Event) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Event(%+v)", *p)
}

// Attributes:
//   - HashAlgo
//   - Digest
type Digest_ struct {
	HashAlgo Algo   `thrift:"HashAlgo,1" db:"HashAlgo" json:"HashAlgo"`
	Digest   []byte `thrift:"Digest,2" db:"Digest" json:"Digest"`
}

func NewDigest_() *Digest_ {
	return &Digest_{}
}

func (p *Digest_) GetHashAlgo() Algo {
	return p.HashAlgo
}

func (p *Digest_) GetDigest() []byte {
	return p.Digest
}
func (p *Digest_) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Digest_) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Algo(v)
		p.HashAlgo = temp
	}
	return nil
}

func (p *Digest_) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Digest = v
	}
	return nil
}

func (p *Digest_) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Digest_"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Digest_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "HashAlgo", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:HashAlgo: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.HashAlgo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.HashAlgo (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:HashAlgo: ", p), err)
	}
	return err
}

func (p *Digest_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Digest", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Digest: ", p), err)
	}
	if err := oprot.WriteBinary(ctx, p.Digest); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Digest (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Digest: ", p), err)
	}
	return err
}

func (p *Digest_) Equals(other *Digest_) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.HashAlgo != other.HashAlgo {
		return false
	}
	if bytes.Compare(p.Digest, other.Digest) != 0 {
		return false
	}
	return true
}

func (p *Digest_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Digest_(%+v)", *p)
}

// Attributes:
//   - Major
//   - Minor
type Version struct {
	Major int8 `thrift:"Major,1" db:"Major" json:"Major"`
	Minor int8 `thrift:"Minor,2" db:"Minor" json:"Minor"`
}

func NewVersion() *Version {
	return &Version{}
}

func (p *Version) GetMajor() int8 {
	return p.Major
}

func (p *Version) GetMinor() int8 {
	return p.Minor
}
func (p *Version) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Version) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := int8(v)
		p.Major = temp
	}
	return nil
}

func (p *Version) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := int8(v)
		p.Minor = temp
	}
	return nil
}

func (p *Version) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Version"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Version) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Major", thrift.BYTE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Major: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.Major)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Major (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Major: ", p), err)
	}
	return err
}

func (p *Version) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Minor", thrift.BYTE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Minor: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.Minor)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Minor (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Minor: ", p), err)
	}
	return err
}

func (p *Version) Equals(other *Version) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Major != other.Major {
		return false
	}
	if p.Minor != other.Minor {
		return false
	}
	return true
}

func (p *Version) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Version(%+v)", *p)
}
