// Code generated by Thrift Compiler (0.14.0). DO NOT EDIT.

package service

import (
	"bytes"
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/immune-gmbh/attestation-sdk/doc/v2/if/generated/analyzer"
	"time"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

var _ = analyzer.GoUnusedProtection__

// Attributes:
//   - BIOSVersion
//   - BIOSDateString
//   - Reason
type UnableToGetOriginalFirmware struct {
	BIOSVersion    string `thrift:"BIOSVersion,1" db:"BIOSVersion" json:"BIOSVersion"`
	BIOSDateString string `thrift:"BIOSDateString,2" db:"BIOSDateString" json:"BIOSDateString"`
	Reason         string `thrift:"Reason,3" db:"Reason" json:"Reason"`
}

func NewUnableToGetOriginalFirmware() *UnableToGetOriginalFirmware {
	return &UnableToGetOriginalFirmware{}
}

func (p *UnableToGetOriginalFirmware) GetBIOSVersion() string {
	return p.BIOSVersion
}

func (p *UnableToGetOriginalFirmware) GetBIOSDateString() string {
	return p.BIOSDateString
}

func (p *UnableToGetOriginalFirmware) GetReason() string {
	return p.Reason
}
func (p *UnableToGetOriginalFirmware) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UnableToGetOriginalFirmware) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.BIOSVersion = v
	}
	return nil
}

func (p *UnableToGetOriginalFirmware) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.BIOSDateString = v
	}
	return nil
}

func (p *UnableToGetOriginalFirmware) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Reason = v
	}
	return nil
}

func (p *UnableToGetOriginalFirmware) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UnableToGetOriginalFirmware"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UnableToGetOriginalFirmware) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "BIOSVersion", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:BIOSVersion: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.BIOSVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.BIOSVersion (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:BIOSVersion: ", p), err)
	}
	return err
}

func (p *UnableToGetOriginalFirmware) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "BIOSDateString", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:BIOSDateString: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.BIOSDateString)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.BIOSDateString (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:BIOSDateString: ", p), err)
	}
	return err
}

func (p *UnableToGetOriginalFirmware) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Reason", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Reason: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Reason)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Reason (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Reason: ", p), err)
	}
	return err
}

func (p *UnableToGetOriginalFirmware) Equals(other *UnableToGetOriginalFirmware) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.BIOSVersion != other.BIOSVersion {
		return false
	}
	if p.BIOSDateString != other.BIOSDateString {
		return false
	}
	if p.Reason != other.Reason {
		return false
	}
	return true
}

func (p *UnableToGetOriginalFirmware) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UnableToGetOriginalFirmware(%+v)", *p)
}

func (p *UnableToGetOriginalFirmware) Error() string {
	return p.String()
}

func (UnableToGetOriginalFirmware) TExceptionType() thrift.TExceptionType {
	return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*UnableToGetOriginalFirmware)(nil)

type FirmwareAnalyzer interface {
	// Parameters:
	//  - Request
	AnalyzeFirmware(ctx context.Context, request *analyzer.AnalyzeFirmwareRequest) (r *analyzer.AnalyzeFirmwareResult_, err error)
	// Parameters:
	//  - Request
	AnalyzeFirmwareAsync(ctx context.Context, request *analyzer.AnalyzeFirmwareRequest) (r *analyzer.AnalyzeFirmwareJob, err error)
	// Parameters:
	//  - JobID
	GetJob(ctx context.Context, JobID []byte) (r *analyzer.AnalyzeFirmwareJob, err error)
}

type FirmwareAnalyzerClient struct {
	c    thrift.TClient
	meta thrift.ResponseMeta
}

func NewFirmwareAnalyzerClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *FirmwareAnalyzerClient {
	return &FirmwareAnalyzerClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewFirmwareAnalyzerClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *FirmwareAnalyzerClient {
	return &FirmwareAnalyzerClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewFirmwareAnalyzerClient(c thrift.TClient) *FirmwareAnalyzerClient {
	return &FirmwareAnalyzerClient{
		c: c,
	}
}

func (p *FirmwareAnalyzerClient) Client_() thrift.TClient {
	return p.c
}

func (p *FirmwareAnalyzerClient) LastResponseMeta_() thrift.ResponseMeta {
	return p.meta
}

func (p *FirmwareAnalyzerClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
	p.meta = meta
}

// Parameters:
//   - Request
func (p *FirmwareAnalyzerClient) AnalyzeFirmware(ctx context.Context, request *analyzer.AnalyzeFirmwareRequest) (r *analyzer.AnalyzeFirmwareResult_, err error) {
	var _args0 FirmwareAnalyzerAnalyzeFirmwareArgs
	_args0.Request = request
	var _result1 FirmwareAnalyzerAnalyzeFirmwareResult
	var meta thrift.ResponseMeta
	meta, err = p.Client_().Call(ctx, "AnalyzeFirmware", &_args0, &_result1)
	p.SetLastResponseMeta_(meta)
	if err != nil {
		return
	}
	switch {
	case _result1.Ex != nil:
		return r, _result1.Ex
	}

	return _result1.GetSuccess(), nil
}

// Parameters:
//   - Request
func (p *FirmwareAnalyzerClient) AnalyzeFirmwareAsync(ctx context.Context, request *analyzer.AnalyzeFirmwareRequest) (r *analyzer.AnalyzeFirmwareJob, err error) {
	var _args2 FirmwareAnalyzerAnalyzeFirmwareAsyncArgs
	_args2.Request = request
	var _result3 FirmwareAnalyzerAnalyzeFirmwareAsyncResult
	var meta thrift.ResponseMeta
	meta, err = p.Client_().Call(ctx, "AnalyzeFirmwareAsync", &_args2, &_result3)
	p.SetLastResponseMeta_(meta)
	if err != nil {
		return
	}
	return _result3.GetSuccess(), nil
}

// Parameters:
//   - JobID
func (p *FirmwareAnalyzerClient) GetJob(ctx context.Context, JobID []byte) (r *analyzer.AnalyzeFirmwareJob, err error) {
	var _args4 FirmwareAnalyzerGetJobArgs
	_args4.JobID = JobID
	var _result5 FirmwareAnalyzerGetJobResult
	var meta thrift.ResponseMeta
	meta, err = p.Client_().Call(ctx, "GetJob", &_args4, &_result5)
	p.SetLastResponseMeta_(meta)
	if err != nil {
		return
	}
	return _result5.GetSuccess(), nil
}

type FirmwareAnalyzerProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      FirmwareAnalyzer
}

func (p *FirmwareAnalyzerProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *FirmwareAnalyzerProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *FirmwareAnalyzerProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewFirmwareAnalyzerProcessor(handler FirmwareAnalyzer) *FirmwareAnalyzerProcessor {

	self6 := &FirmwareAnalyzerProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self6.processorMap["AnalyzeFirmware"] = &firmwareAnalyzerProcessorAnalyzeFirmware{handler: handler}
	self6.processorMap["AnalyzeFirmwareAsync"] = &firmwareAnalyzerProcessorAnalyzeFirmwareAsync{handler: handler}
	self6.processorMap["GetJob"] = &firmwareAnalyzerProcessorGetJob{handler: handler}
	return self6
}

func (p *FirmwareAnalyzerProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
	if err2 != nil {
		return false, thrift.WrapTException(err2)
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(ctx, thrift.STRUCT)
	iprot.ReadMessageEnd(ctx)
	x7 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
	x7.Write(ctx, oprot)
	oprot.WriteMessageEnd(ctx)
	oprot.Flush(ctx)
	return false, x7

}

type firmwareAnalyzerProcessorAnalyzeFirmware struct {
	handler FirmwareAnalyzer
}

func (p *firmwareAnalyzerProcessorAnalyzeFirmware) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FirmwareAnalyzerAnalyzeFirmwareArgs{}
	var err2 error
	if err2 = args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "AnalyzeFirmware", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := FirmwareAnalyzerAnalyzeFirmwareResult{}
	var retval *analyzer.AnalyzeFirmwareResult_
	if retval, err2 = p.handler.AnalyzeFirmware(ctx, args.Request); err2 != nil {
		tickerCancel()
		switch v := err2.(type) {
		case *UnableToGetOriginalFirmware:
			result.Ex = v
		default:
			if err2 == thrift.ErrAbandonRequest {
				return false, thrift.WrapTException(err2)
			}
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AnalyzeFirmware: "+err2.Error())
			oprot.WriteMessageBegin(ctx, "AnalyzeFirmware", thrift.EXCEPTION, seqId)
			x.Write(ctx, oprot)
			oprot.WriteMessageEnd(ctx)
			oprot.Flush(ctx)
			return true, thrift.WrapTException(err2)
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 = oprot.WriteMessageBegin(ctx, "AnalyzeFirmware", thrift.REPLY, seqId); err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err != nil {
		return
	}
	return true, err
}

type firmwareAnalyzerProcessorAnalyzeFirmwareAsync struct {
	handler FirmwareAnalyzer
}

func (p *firmwareAnalyzerProcessorAnalyzeFirmwareAsync) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FirmwareAnalyzerAnalyzeFirmwareAsyncArgs{}
	var err2 error
	if err2 = args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "AnalyzeFirmwareAsync", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := FirmwareAnalyzerAnalyzeFirmwareAsyncResult{}
	var retval *analyzer.AnalyzeFirmwareJob
	if retval, err2 = p.handler.AnalyzeFirmwareAsync(ctx, args.Request); err2 != nil {
		tickerCancel()
		if err2 == thrift.ErrAbandonRequest {
			return false, thrift.WrapTException(err2)
		}
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AnalyzeFirmwareAsync: "+err2.Error())
		oprot.WriteMessageBegin(ctx, "AnalyzeFirmwareAsync", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return true, thrift.WrapTException(err2)
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 = oprot.WriteMessageBegin(ctx, "AnalyzeFirmwareAsync", thrift.REPLY, seqId); err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err != nil {
		return
	}
	return true, err
}

type firmwareAnalyzerProcessorGetJob struct {
	handler FirmwareAnalyzer
}

func (p *firmwareAnalyzerProcessorGetJob) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FirmwareAnalyzerGetJobArgs{}
	var err2 error
	if err2 = args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "GetJob", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := FirmwareAnalyzerGetJobResult{}
	var retval *analyzer.AnalyzeFirmwareJob
	if retval, err2 = p.handler.GetJob(ctx, args.JobID); err2 != nil {
		tickerCancel()
		if err2 == thrift.ErrAbandonRequest {
			return false, thrift.WrapTException(err2)
		}
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetJob: "+err2.Error())
		oprot.WriteMessageBegin(ctx, "GetJob", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return true, thrift.WrapTException(err2)
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 = oprot.WriteMessageBegin(ctx, "GetJob", thrift.REPLY, seqId); err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//   - Request
type FirmwareAnalyzerAnalyzeFirmwareArgs struct {
	Request *analyzer.AnalyzeFirmwareRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewFirmwareAnalyzerAnalyzeFirmwareArgs() *FirmwareAnalyzerAnalyzeFirmwareArgs {
	return &FirmwareAnalyzerAnalyzeFirmwareArgs{}
}

var FirmwareAnalyzerAnalyzeFirmwareArgs_Request_DEFAULT *analyzer.AnalyzeFirmwareRequest

func (p *FirmwareAnalyzerAnalyzeFirmwareArgs) GetRequest() *analyzer.AnalyzeFirmwareRequest {
	if !p.IsSetRequest() {
		return FirmwareAnalyzerAnalyzeFirmwareArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FirmwareAnalyzerAnalyzeFirmwareArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FirmwareAnalyzerAnalyzeFirmwareArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FirmwareAnalyzerAnalyzeFirmwareArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Request = &analyzer.AnalyzeFirmwareRequest{}
	if err := p.Request.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *FirmwareAnalyzerAnalyzeFirmwareArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AnalyzeFirmware_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FirmwareAnalyzerAnalyzeFirmwareArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *FirmwareAnalyzerAnalyzeFirmwareArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FirmwareAnalyzerAnalyzeFirmwareArgs(%+v)", *p)
}

// Attributes:
//   - Success
//   - Ex
type FirmwareAnalyzerAnalyzeFirmwareResult struct {
	Success *analyzer.AnalyzeFirmwareResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
	Ex      *UnableToGetOriginalFirmware     `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewFirmwareAnalyzerAnalyzeFirmwareResult() *FirmwareAnalyzerAnalyzeFirmwareResult {
	return &FirmwareAnalyzerAnalyzeFirmwareResult{}
}

var FirmwareAnalyzerAnalyzeFirmwareResult_Success_DEFAULT *analyzer.AnalyzeFirmwareResult_

func (p *FirmwareAnalyzerAnalyzeFirmwareResult) GetSuccess() *analyzer.AnalyzeFirmwareResult_ {
	if !p.IsSetSuccess() {
		return FirmwareAnalyzerAnalyzeFirmwareResult_Success_DEFAULT
	}
	return p.Success
}

var FirmwareAnalyzerAnalyzeFirmwareResult_Ex_DEFAULT *UnableToGetOriginalFirmware

func (p *FirmwareAnalyzerAnalyzeFirmwareResult) GetEx() *UnableToGetOriginalFirmware {
	if !p.IsSetEx() {
		return FirmwareAnalyzerAnalyzeFirmwareResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *FirmwareAnalyzerAnalyzeFirmwareResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FirmwareAnalyzerAnalyzeFirmwareResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *FirmwareAnalyzerAnalyzeFirmwareResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FirmwareAnalyzerAnalyzeFirmwareResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &analyzer.AnalyzeFirmwareResult_{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *FirmwareAnalyzerAnalyzeFirmwareResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Ex = &UnableToGetOriginalFirmware{}
	if err := p.Ex.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *FirmwareAnalyzerAnalyzeFirmwareResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AnalyzeFirmware_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FirmwareAnalyzerAnalyzeFirmwareResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FirmwareAnalyzerAnalyzeFirmwareResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin(ctx, "ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *FirmwareAnalyzerAnalyzeFirmwareResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FirmwareAnalyzerAnalyzeFirmwareResult(%+v)", *p)
}

// Attributes:
//   - Request
type FirmwareAnalyzerAnalyzeFirmwareAsyncArgs struct {
	Request *analyzer.AnalyzeFirmwareRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewFirmwareAnalyzerAnalyzeFirmwareAsyncArgs() *FirmwareAnalyzerAnalyzeFirmwareAsyncArgs {
	return &FirmwareAnalyzerAnalyzeFirmwareAsyncArgs{}
}

var FirmwareAnalyzerAnalyzeFirmwareAsyncArgs_Request_DEFAULT *analyzer.AnalyzeFirmwareRequest

func (p *FirmwareAnalyzerAnalyzeFirmwareAsyncArgs) GetRequest() *analyzer.AnalyzeFirmwareRequest {
	if !p.IsSetRequest() {
		return FirmwareAnalyzerAnalyzeFirmwareAsyncArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FirmwareAnalyzerAnalyzeFirmwareAsyncArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FirmwareAnalyzerAnalyzeFirmwareAsyncArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FirmwareAnalyzerAnalyzeFirmwareAsyncArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Request = &analyzer.AnalyzeFirmwareRequest{}
	if err := p.Request.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *FirmwareAnalyzerAnalyzeFirmwareAsyncArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AnalyzeFirmwareAsync_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FirmwareAnalyzerAnalyzeFirmwareAsyncArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *FirmwareAnalyzerAnalyzeFirmwareAsyncArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FirmwareAnalyzerAnalyzeFirmwareAsyncArgs(%+v)", *p)
}

// Attributes:
//   - Success
type FirmwareAnalyzerAnalyzeFirmwareAsyncResult struct {
	Success *analyzer.AnalyzeFirmwareJob `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFirmwareAnalyzerAnalyzeFirmwareAsyncResult() *FirmwareAnalyzerAnalyzeFirmwareAsyncResult {
	return &FirmwareAnalyzerAnalyzeFirmwareAsyncResult{}
}

var FirmwareAnalyzerAnalyzeFirmwareAsyncResult_Success_DEFAULT *analyzer.AnalyzeFirmwareJob

func (p *FirmwareAnalyzerAnalyzeFirmwareAsyncResult) GetSuccess() *analyzer.AnalyzeFirmwareJob {
	if !p.IsSetSuccess() {
		return FirmwareAnalyzerAnalyzeFirmwareAsyncResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FirmwareAnalyzerAnalyzeFirmwareAsyncResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FirmwareAnalyzerAnalyzeFirmwareAsyncResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FirmwareAnalyzerAnalyzeFirmwareAsyncResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &analyzer.AnalyzeFirmwareJob{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *FirmwareAnalyzerAnalyzeFirmwareAsyncResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AnalyzeFirmwareAsync_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FirmwareAnalyzerAnalyzeFirmwareAsyncResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FirmwareAnalyzerAnalyzeFirmwareAsyncResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FirmwareAnalyzerAnalyzeFirmwareAsyncResult(%+v)", *p)
}

// Attributes:
//   - JobID
type FirmwareAnalyzerGetJobArgs struct {
	JobID []byte `thrift:"JobID,1" db:"JobID" json:"JobID"`
}

func NewFirmwareAnalyzerGetJobArgs() *FirmwareAnalyzerGetJobArgs {
	return &FirmwareAnalyzerGetJobArgs{}
}

func (p *FirmwareAnalyzerGetJobArgs) GetJobID() []byte {
	return p.JobID
}
func (p *FirmwareAnalyzerGetJobArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FirmwareAnalyzerGetJobArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.JobID = v
	}
	return nil
}

func (p *FirmwareAnalyzerGetJobArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "GetJob_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FirmwareAnalyzerGetJobArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "JobID", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:JobID: ", p), err)
	}
	if err := oprot.WriteBinary(ctx, p.JobID); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.JobID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:JobID: ", p), err)
	}
	return err
}

func (p *FirmwareAnalyzerGetJobArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FirmwareAnalyzerGetJobArgs(%+v)", *p)
}

// Attributes:
//   - Success
type FirmwareAnalyzerGetJobResult struct {
	Success *analyzer.AnalyzeFirmwareJob `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFirmwareAnalyzerGetJobResult() *FirmwareAnalyzerGetJobResult {
	return &FirmwareAnalyzerGetJobResult{}
}

var FirmwareAnalyzerGetJobResult_Success_DEFAULT *analyzer.AnalyzeFirmwareJob

func (p *FirmwareAnalyzerGetJobResult) GetSuccess() *analyzer.AnalyzeFirmwareJob {
	if !p.IsSetSuccess() {
		return FirmwareAnalyzerGetJobResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FirmwareAnalyzerGetJobResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FirmwareAnalyzerGetJobResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FirmwareAnalyzerGetJobResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &analyzer.AnalyzeFirmwareJob{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *FirmwareAnalyzerGetJobResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "GetJob_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FirmwareAnalyzerGetJobResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FirmwareAnalyzerGetJobResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FirmwareAnalyzerGetJobResult(%+v)", *p)
}
