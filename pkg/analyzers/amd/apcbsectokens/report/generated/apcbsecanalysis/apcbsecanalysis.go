// Code generated by Thrift Compiler (0.14.0). DO NOT EDIT.

package apcbsecanalysis

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"time"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

type TokenID int64

const (
	TokenID_PSPMeasureConfig   TokenID = 1
	TokenID_PSPEnableDebugMode TokenID = 2
	TokenID_PSPErrorDisplay    TokenID = 3
	TokenID_PSPStopOnError     TokenID = 4
)

func (p TokenID) String() string {
	switch p {
	case TokenID_PSPMeasureConfig:
		return "PSPMeasureConfig"
	case TokenID_PSPEnableDebugMode:
		return "PSPEnableDebugMode"
	case TokenID_PSPErrorDisplay:
		return "PSPErrorDisplay"
	case TokenID_PSPStopOnError:
		return "PSPStopOnError"
	}
	return "<UNSET>"
}

func TokenIDFromString(s string) (TokenID, error) {
	switch s {
	case "PSPMeasureConfig":
		return TokenID_PSPMeasureConfig, nil
	case "PSPEnableDebugMode":
		return TokenID_PSPEnableDebugMode, nil
	case "PSPErrorDisplay":
		return TokenID_PSPErrorDisplay, nil
	case "PSPStopOnError":
		return TokenID_PSPStopOnError, nil
	}
	return TokenID(0), fmt.Errorf("not a valid TokenID string")
}

func TokenIDPtr(v TokenID) *TokenID { return &v }

func (p TokenID) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TokenID) UnmarshalText(text []byte) error {
	q, err := TokenIDFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *TokenID) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = TokenID(v)
	return nil
}

func (p *TokenID) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// Attributes:
//   - Boolean
//   - Byte
//   - Word
//   - DWord
type TokenValue struct {
	Boolean *bool  `thrift:"Boolean,1" db:"Boolean" json:"Boolean,omitempty"`
	Byte    *int8  `thrift:"Byte,2" db:"Byte" json:"Byte,omitempty"`
	Word    *int16 `thrift:"Word,3" db:"Word" json:"Word,omitempty"`
	DWord   *int32 `thrift:"DWord,4" db:"DWord" json:"DWord,omitempty"`
}

func NewTokenValue() *TokenValue {
	return &TokenValue{}
}

var TokenValue_Boolean_DEFAULT bool

func (p *TokenValue) GetBoolean() bool {
	if !p.IsSetBoolean() {
		return TokenValue_Boolean_DEFAULT
	}
	return *p.Boolean
}

var TokenValue_Byte_DEFAULT int8

func (p *TokenValue) GetByte() int8 {
	if !p.IsSetByte() {
		return TokenValue_Byte_DEFAULT
	}
	return *p.Byte
}

var TokenValue_Word_DEFAULT int16

func (p *TokenValue) GetWord() int16 {
	if !p.IsSetWord() {
		return TokenValue_Word_DEFAULT
	}
	return *p.Word
}

var TokenValue_DWord_DEFAULT int32

func (p *TokenValue) GetDWord() int32 {
	if !p.IsSetDWord() {
		return TokenValue_DWord_DEFAULT
	}
	return *p.DWord
}
func (p *TokenValue) CountSetFieldsTokenValue() int {
	count := 0
	if p.IsSetBoolean() {
		count++
	}
	if p.IsSetByte() {
		count++
	}
	if p.IsSetWord() {
		count++
	}
	if p.IsSetDWord() {
		count++
	}
	return count

}

func (p *TokenValue) IsSetBoolean() bool {
	return p.Boolean != nil
}

func (p *TokenValue) IsSetByte() bool {
	return p.Byte != nil
}

func (p *TokenValue) IsSetWord() bool {
	return p.Word != nil
}

func (p *TokenValue) IsSetDWord() bool {
	return p.DWord != nil
}

func (p *TokenValue) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TokenValue) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Boolean = &v
	}
	return nil
}

func (p *TokenValue) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := int8(v)
		p.Byte = &temp
	}
	return nil
}

func (p *TokenValue) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Word = &v
	}
	return nil
}

func (p *TokenValue) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.DWord = &v
	}
	return nil
}

func (p *TokenValue) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if c := p.CountSetFieldsTokenValue(); c != 1 {
		return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
	}
	if err := oprot.WriteStructBegin(ctx, "TokenValue"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TokenValue) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetBoolean() {
		if err := oprot.WriteFieldBegin(ctx, "Boolean", thrift.BOOL, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Boolean: ", p), err)
		}
		if err := oprot.WriteBool(ctx, bool(*p.Boolean)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.Boolean (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Boolean: ", p), err)
		}
	}
	return err
}

func (p *TokenValue) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetByte() {
		if err := oprot.WriteFieldBegin(ctx, "Byte", thrift.BYTE, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Byte: ", p), err)
		}
		if err := oprot.WriteByte(ctx, int8(*p.Byte)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.Byte (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Byte: ", p), err)
		}
	}
	return err
}

func (p *TokenValue) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetWord() {
		if err := oprot.WriteFieldBegin(ctx, "Word", thrift.I16, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Word: ", p), err)
		}
		if err := oprot.WriteI16(ctx, int16(*p.Word)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.Word (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Word: ", p), err)
		}
	}
	return err
}

func (p *TokenValue) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetDWord() {
		if err := oprot.WriteFieldBegin(ctx, "DWord", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:DWord: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.DWord)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.DWord (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:DWord: ", p), err)
		}
	}
	return err
}

func (p *TokenValue) Equals(other *TokenValue) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Boolean != other.Boolean {
		if p.Boolean == nil || other.Boolean == nil {
			return false
		}
		if (*p.Boolean) != (*other.Boolean) {
			return false
		}
	}
	if p.Byte != other.Byte {
		if p.Byte == nil || other.Byte == nil {
			return false
		}
		if (*p.Byte) != (*other.Byte) {
			return false
		}
	}
	if p.Word != other.Word {
		if p.Word == nil || other.Word == nil {
			return false
		}
		if (*p.Word) != (*other.Word) {
			return false
		}
	}
	if p.DWord != other.DWord {
		if p.DWord == nil || other.DWord == nil {
			return false
		}
		if (*p.DWord) != (*other.DWord) {
			return false
		}
	}
	return true
}

func (p *TokenValue) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TokenValue(%+v)", *p)
}

// Attributes:
//   - ID
//   - PriorityMask
//   - BoardMask
//   - Value
type Token struct {
	ID           TokenID     `thrift:"ID,1" db:"ID" json:"ID"`
	PriorityMask int8        `thrift:"PriorityMask,2" db:"PriorityMask" json:"PriorityMask"`
	BoardMask    int16       `thrift:"BoardMask,3" db:"BoardMask" json:"BoardMask"`
	Value        *TokenValue `thrift:"Value,4" db:"Value" json:"Value"`
}

func NewToken() *Token {
	return &Token{}
}

func (p *Token) GetID() TokenID {
	return p.ID
}

func (p *Token) GetPriorityMask() int8 {
	return p.PriorityMask
}

func (p *Token) GetBoardMask() int16 {
	return p.BoardMask
}

var Token_Value_DEFAULT *TokenValue

func (p *Token) GetValue() *TokenValue {
	if !p.IsSetValue() {
		return Token_Value_DEFAULT
	}
	return p.Value
}
func (p *Token) IsSetValue() bool {
	return p.Value != nil
}

func (p *Token) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Token) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TokenID(v)
		p.ID = temp
	}
	return nil
}

func (p *Token) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := int8(v)
		p.PriorityMask = temp
	}
	return nil
}

func (p *Token) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.BoardMask = v
	}
	return nil
}

func (p *Token) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	p.Value = &TokenValue{}
	if err := p.Value.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Value), err)
	}
	return nil
}

func (p *Token) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Token"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Token) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ID", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err)
	}
	return err
}

func (p *Token) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "PriorityMask", thrift.BYTE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:PriorityMask: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.PriorityMask)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.PriorityMask (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:PriorityMask: ", p), err)
	}
	return err
}

func (p *Token) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "BoardMask", thrift.I16, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:BoardMask: ", p), err)
	}
	if err := oprot.WriteI16(ctx, int16(p.BoardMask)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.BoardMask (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:BoardMask: ", p), err)
	}
	return err
}

func (p *Token) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Value", thrift.STRUCT, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Value: ", p), err)
	}
	if err := p.Value.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Value), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Value: ", p), err)
	}
	return err
}

func (p *Token) Equals(other *Token) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.ID != other.ID {
		return false
	}
	if p.PriorityMask != other.PriorityMask {
		return false
	}
	if p.BoardMask != other.BoardMask {
		return false
	}
	if !p.Value.Equals(other.Value) {
		return false
	}
	return true
}

func (p *Token) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Token(%+v)", *p)
}

// Attributes:
//   - BIOSDirectoryLevel
//   - Tokens
type BIOSDirectoryTokens struct {
	BIOSDirectoryLevel int8     `thrift:"BIOSDirectoryLevel,1" db:"BIOSDirectoryLevel" json:"BIOSDirectoryLevel"`
	Tokens             []*Token `thrift:"Tokens,2" db:"Tokens" json:"Tokens"`
}

func NewBIOSDirectoryTokens() *BIOSDirectoryTokens {
	return &BIOSDirectoryTokens{}
}

func (p *BIOSDirectoryTokens) GetBIOSDirectoryLevel() int8 {
	return p.BIOSDirectoryLevel
}

func (p *BIOSDirectoryTokens) GetTokens() []*Token {
	return p.Tokens
}
func (p *BIOSDirectoryTokens) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BIOSDirectoryTokens) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := int8(v)
		p.BIOSDirectoryLevel = temp
	}
	return nil
}

func (p *BIOSDirectoryTokens) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Token, 0, size)
	p.Tokens = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &Token{}
		if err := _elem0.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.Tokens = append(p.Tokens, _elem0)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *BIOSDirectoryTokens) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "BIOSDirectoryTokens"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BIOSDirectoryTokens) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "BIOSDirectoryLevel", thrift.BYTE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:BIOSDirectoryLevel: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.BIOSDirectoryLevel)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.BIOSDirectoryLevel (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:BIOSDirectoryLevel: ", p), err)
	}
	return err
}

func (p *BIOSDirectoryTokens) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Tokens", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Tokens: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Tokens)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Tokens {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Tokens: ", p), err)
	}
	return err
}

func (p *BIOSDirectoryTokens) Equals(other *BIOSDirectoryTokens) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.BIOSDirectoryLevel != other.BIOSDirectoryLevel {
		return false
	}
	if len(p.Tokens) != len(other.Tokens) {
		return false
	}
	for i, _tgt := range p.Tokens {
		_src1 := other.Tokens[i]
		if !_tgt.Equals(_src1) {
			return false
		}
	}
	return true
}

func (p *BIOSDirectoryTokens) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BIOSDirectoryTokens(%+v)", *p)
}

// Attributes:
//   - DirectoryTokens
type CustomReport struct {
	DirectoryTokens []*BIOSDirectoryTokens `thrift:"DirectoryTokens,1" db:"DirectoryTokens" json:"DirectoryTokens"`
}

func NewCustomReport() *CustomReport {
	return &CustomReport{}
}

func (p *CustomReport) GetDirectoryTokens() []*BIOSDirectoryTokens {
	return p.DirectoryTokens
}
func (p *CustomReport) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CustomReport) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*BIOSDirectoryTokens, 0, size)
	p.DirectoryTokens = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &BIOSDirectoryTokens{}
		if err := _elem2.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
		}
		p.DirectoryTokens = append(p.DirectoryTokens, _elem2)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *CustomReport) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "CustomReport"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CustomReport) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "DirectoryTokens", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:DirectoryTokens: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.DirectoryTokens)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.DirectoryTokens {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:DirectoryTokens: ", p), err)
	}
	return err
}

func (p *CustomReport) Equals(other *CustomReport) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.DirectoryTokens) != len(other.DirectoryTokens) {
		return false
	}
	for i, _tgt := range p.DirectoryTokens {
		_src3 := other.DirectoryTokens[i]
		if !_tgt.Equals(_src3) {
			return false
		}
	}
	return true
}

func (p *CustomReport) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CustomReport(%+v)", *p)
}
