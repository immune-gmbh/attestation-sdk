// Code generated by Thrift Compiler (0.14.0). DO NOT EDIT.

package afas

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/immune-gmbh/attestation-sdk/if/generated/analyzerreport"
	"github.com/immune-gmbh/attestation-sdk/if/generated/caching_policy"
	"github.com/immune-gmbh/attestation-sdk/if/generated/measurements"
	"github.com/immune-gmbh/attestation-sdk/if/generated/tpm"
	"github.com/immune-gmbh/attestation-sdk/pkg/analyzers/diffmeasuredboot/report/generated/diffanalysis"
	"github.com/immune-gmbh/attestation-sdk/pkg/analyzers/intelacm/report/generated/intelacmanalysis"
	"time"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

var _ = analyzerreport.GoUnusedProtection__
var _ = caching_policy.GoUnusedProtection__
var _ = measurements.GoUnusedProtection__
var _ = tpm.GoUnusedProtection__
var _ = diffanalysis.GoUnusedProtection__
var _ = intelacmanalysis.GoUnusedProtection__

type TPMType int64

const (
	TPMType_UNKNOWN TPMType = 0
	TPMType_TPM12   TPMType = 1
	TPMType_TPM20   TPMType = 2
)

func (p TPMType) String() string {
	switch p {
	case TPMType_UNKNOWN:
		return "UNKNOWN"
	case TPMType_TPM12:
		return "TPM12"
	case TPMType_TPM20:
		return "TPM20"
	}
	return "<UNSET>"
}

func TPMTypeFromString(s string) (TPMType, error) {
	switch s {
	case "UNKNOWN":
		return TPMType_UNKNOWN, nil
	case "TPM12":
		return TPMType_TPM12, nil
	case "TPM20":
		return TPMType_TPM20, nil
	}
	return TPMType(0), fmt.Errorf("not a valid TPMType string")
}

func TPMTypePtr(v TPMType) *TPMType { return &v }

func (p TPMType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TPMType) UnmarshalText(text []byte) error {
	q, err := TPMTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *TPMType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = TPMType(v)
	return nil
}

func (p *TPMType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type CompressionType int64

const (
	CompressionType_None CompressionType = 0
	CompressionType_XZ   CompressionType = 1
)

func (p CompressionType) String() string {
	switch p {
	case CompressionType_None:
		return "None"
	case CompressionType_XZ:
		return "XZ"
	}
	return "<UNSET>"
}

func CompressionTypeFromString(s string) (CompressionType, error) {
	switch s {
	case "None":
		return CompressionType_None, nil
	case "XZ":
		return CompressionType_XZ, nil
	}
	return CompressionType(0), fmt.Errorf("not a valid CompressionType string")
}

func CompressionTypePtr(v CompressionType) *CompressionType { return &v }

func (p CompressionType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *CompressionType) UnmarshalText(text []byte) error {
	q, err := CompressionTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *CompressionType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = CompressionType(v)
	return nil
}

func (p *CompressionType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type DataSource int64

const (
	DataSource_RawBlob     DataSource = 0
	DataSource_BlobStorage DataSource = 1
)

func (p DataSource) String() string {
	switch p {
	case DataSource_RawBlob:
		return "RawBlob"
	case DataSource_BlobStorage:
		return "BlobStorage"
	}
	return "<UNSET>"
}

func DataSourceFromString(s string) (DataSource, error) {
	switch s {
	case "RawBlob":
		return DataSource_RawBlob, nil
	case "BlobStorage":
		return DataSource_BlobStorage, nil
	}
	return DataSource(0), fmt.Errorf("not a valid DataSource string")
}

func DataSourcePtr(v DataSource) *DataSource { return &v }

func (p DataSource) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *DataSource) UnmarshalText(text []byte) error {
	q, err := DataSourceFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *DataSource) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = DataSource(v)
	return nil
}

func (p *DataSource) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type BuildMode int64

const (
	BuildMode_Undefined BuildMode = 0
	BuildMode_opt       BuildMode = 1
	BuildMode_dev       BuildMode = 2
)

func (p BuildMode) String() string {
	switch p {
	case BuildMode_Undefined:
		return "Undefined"
	case BuildMode_opt:
		return "opt"
	case BuildMode_dev:
		return "dev"
	}
	return "<UNSET>"
}

func BuildModeFromString(s string) (BuildMode, error) {
	switch s {
	case "Undefined":
		return BuildMode_Undefined, nil
	case "opt":
		return BuildMode_opt, nil
	case "dev":
		return BuildMode_dev, nil
	}
	return BuildMode(0), fmt.Errorf("not a valid BuildMode string")
}

func BuildModePtr(v BuildMode) *BuildMode { return &v }

func (p BuildMode) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *BuildMode) UnmarshalText(text []byte) error {
	q, err := BuildModeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *BuildMode) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = BuildMode(v)
	return nil
}

func (p *BuildMode) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type ErrorClass int64

const (
	ErrorClass_InternalError ErrorClass = 1
	ErrorClass_InvalidInput  ErrorClass = 2
	ErrorClass_NotSupported  ErrorClass = 3
)

func (p ErrorClass) String() string {
	switch p {
	case ErrorClass_InternalError:
		return "InternalError"
	case ErrorClass_InvalidInput:
		return "InvalidInput"
	case ErrorClass_NotSupported:
		return "NotSupported"
	}
	return "<UNSET>"
}

func ErrorClassFromString(s string) (ErrorClass, error) {
	switch s {
	case "InternalError":
		return ErrorClass_InternalError, nil
	case "InvalidInput":
		return ErrorClass_InvalidInput, nil
	case "NotSupported":
		return ErrorClass_NotSupported, nil
	}
	return ErrorClass(0), fmt.Errorf("not a valid ErrorClass string")
}

func ErrorClassPtr(v ErrorClass) *ErrorClass { return &v }

func (p ErrorClass) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ErrorClass) UnmarshalText(text []byte) error {
	q, err := ErrorClassFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *ErrorClass) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = ErrorClass(v)
	return nil
}

func (p *ErrorClass) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type NodeInfo *diffanalysis.NodeInfo

func NodeInfoPtr(v NodeInfo) *NodeInfo { return &v }

type DiffEntry *diffanalysis.DiffEntry

func DiffEntryPtr(v DiffEntry) *DiffEntry { return &v }

type RelatedMeasurement *diffanalysis.RelatedMeasurement

func RelatedMeasurementPtr(v RelatedMeasurement) *RelatedMeasurement { return &v }

type Measurement *diffanalysis.Measurement

func MeasurementPtr(v Measurement) *Measurement { return &v }

type DataChunk *diffanalysis.DataChunk

func DataChunkPtr(v DataChunk) *DataChunk { return &v }

type Range_ *diffanalysis.Range_

func Range_Ptr(v Range_) *Range_ { return &v }

// Attributes:
//   - Original
//   - Received
//   - LastReported
//   - EventLog
//   - TPM
//   - OrigTable
type PCRValue struct {
	Original     []byte `thrift:"Original,1" db:"Original" json:"Original,omitempty"`
	Received     []byte `thrift:"Received,2" db:"Received" json:"Received,omitempty"`
	LastReported []byte `thrift:"LastReported,3" db:"LastReported" json:"LastReported,omitempty"`
	EventLog     []byte `thrift:"EventLog,4" db:"EventLog" json:"EventLog,omitempty"`
	TPM          []byte `thrift:"TPM,5" db:"TPM" json:"TPM,omitempty"`
	OrigTable    []byte `thrift:"OrigTable,6" db:"OrigTable" json:"OrigTable,omitempty"`
}

func NewPCRValue() *PCRValue {
	return &PCRValue{}
}

var PCRValue_Original_DEFAULT []byte

func (p *PCRValue) GetOriginal() []byte {
	return p.Original
}

var PCRValue_Received_DEFAULT []byte

func (p *PCRValue) GetReceived() []byte {
	return p.Received
}

var PCRValue_LastReported_DEFAULT []byte

func (p *PCRValue) GetLastReported() []byte {
	return p.LastReported
}

var PCRValue_EventLog_DEFAULT []byte

func (p *PCRValue) GetEventLog() []byte {
	return p.EventLog
}

var PCRValue_TPM_DEFAULT []byte

func (p *PCRValue) GetTPM() []byte {
	return p.TPM
}

var PCRValue_OrigTable_DEFAULT []byte

func (p *PCRValue) GetOrigTable() []byte {
	return p.OrigTable
}
func (p *PCRValue) IsSetOriginal() bool {
	return p.Original != nil
}

func (p *PCRValue) IsSetReceived() bool {
	return p.Received != nil
}

func (p *PCRValue) IsSetLastReported() bool {
	return p.LastReported != nil
}

func (p *PCRValue) IsSetEventLog() bool {
	return p.EventLog != nil
}

func (p *PCRValue) IsSetTPM() bool {
	return p.TPM != nil
}

func (p *PCRValue) IsSetOrigTable() bool {
	return p.OrigTable != nil
}

func (p *PCRValue) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PCRValue) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Original = v
	}
	return nil
}

func (p *PCRValue) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Received = v
	}
	return nil
}

func (p *PCRValue) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.LastReported = v
	}
	return nil
}

func (p *PCRValue) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.EventLog = v
	}
	return nil
}

func (p *PCRValue) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.TPM = v
	}
	return nil
}

func (p *PCRValue) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.OrigTable = v
	}
	return nil
}

func (p *PCRValue) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "PCRValue"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PCRValue) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetOriginal() {
		if err := oprot.WriteFieldBegin(ctx, "Original", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Original: ", p), err)
		}
		if err := oprot.WriteBinary(ctx, p.Original); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.Original (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Original: ", p), err)
		}
	}
	return err
}

func (p *PCRValue) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetReceived() {
		if err := oprot.WriteFieldBegin(ctx, "Received", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Received: ", p), err)
		}
		if err := oprot.WriteBinary(ctx, p.Received); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.Received (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Received: ", p), err)
		}
	}
	return err
}

func (p *PCRValue) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetLastReported() {
		if err := oprot.WriteFieldBegin(ctx, "LastReported", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:LastReported: ", p), err)
		}
		if err := oprot.WriteBinary(ctx, p.LastReported); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.LastReported (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:LastReported: ", p), err)
		}
	}
	return err
}

func (p *PCRValue) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetEventLog() {
		if err := oprot.WriteFieldBegin(ctx, "EventLog", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:EventLog: ", p), err)
		}
		if err := oprot.WriteBinary(ctx, p.EventLog); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.EventLog (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:EventLog: ", p), err)
		}
	}
	return err
}

func (p *PCRValue) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTPM() {
		if err := oprot.WriteFieldBegin(ctx, "TPM", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:TPM: ", p), err)
		}
		if err := oprot.WriteBinary(ctx, p.TPM); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.TPM (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:TPM: ", p), err)
		}
	}
	return err
}

func (p *PCRValue) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetOrigTable() {
		if err := oprot.WriteFieldBegin(ctx, "OrigTable", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:OrigTable: ", p), err)
		}
		if err := oprot.WriteBinary(ctx, p.OrigTable); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.OrigTable (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:OrigTable: ", p), err)
		}
	}
	return err
}

func (p *PCRValue) Equals(other *PCRValue) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if bytes.Compare(p.Original, other.Original) != 0 {
		return false
	}
	if bytes.Compare(p.Received, other.Received) != 0 {
		return false
	}
	if bytes.Compare(p.LastReported, other.LastReported) != 0 {
		return false
	}
	if bytes.Compare(p.EventLog, other.EventLog) != 0 {
		return false
	}
	if bytes.Compare(p.TPM, other.TPM) != 0 {
		return false
	}
	if bytes.Compare(p.OrigTable, other.OrigTable) != 0 {
		return false
	}
	return true
}

func (p *PCRValue) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PCRValue(%+v)", *p)
}

// Attributes:
//   - PCR0SHA1
//   - PCR0SHA256
type PCRValues struct {
	PCR0SHA1   *PCRValue `thrift:"PCR0SHA1,1" db:"PCR0SHA1" json:"PCR0SHA1,omitempty"`
	PCR0SHA256 *PCRValue `thrift:"PCR0SHA256,2" db:"PCR0SHA256" json:"PCR0SHA256,omitempty"`
}

func NewPCRValues() *PCRValues {
	return &PCRValues{}
}

var PCRValues_PCR0SHA1_DEFAULT *PCRValue

func (p *PCRValues) GetPCR0SHA1() *PCRValue {
	if !p.IsSetPCR0SHA1() {
		return PCRValues_PCR0SHA1_DEFAULT
	}
	return p.PCR0SHA1
}

var PCRValues_PCR0SHA256_DEFAULT *PCRValue

func (p *PCRValues) GetPCR0SHA256() *PCRValue {
	if !p.IsSetPCR0SHA256() {
		return PCRValues_PCR0SHA256_DEFAULT
	}
	return p.PCR0SHA256
}
func (p *PCRValues) IsSetPCR0SHA1() bool {
	return p.PCR0SHA1 != nil
}

func (p *PCRValues) IsSetPCR0SHA256() bool {
	return p.PCR0SHA256 != nil
}

func (p *PCRValues) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PCRValues) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.PCR0SHA1 = &PCRValue{}
	if err := p.PCR0SHA1.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PCR0SHA1), err)
	}
	return nil
}

func (p *PCRValues) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.PCR0SHA256 = &PCRValue{}
	if err := p.PCR0SHA256.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PCR0SHA256), err)
	}
	return nil
}

func (p *PCRValues) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "PCRValues"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PCRValues) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetPCR0SHA1() {
		if err := oprot.WriteFieldBegin(ctx, "PCR0SHA1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:PCR0SHA1: ", p), err)
		}
		if err := p.PCR0SHA1.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PCR0SHA1), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:PCR0SHA1: ", p), err)
		}
	}
	return err
}

func (p *PCRValues) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetPCR0SHA256() {
		if err := oprot.WriteFieldBegin(ctx, "PCR0SHA256", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:PCR0SHA256: ", p), err)
		}
		if err := p.PCR0SHA256.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PCR0SHA256), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:PCR0SHA256: ", p), err)
		}
	}
	return err
}

func (p *PCRValues) Equals(other *PCRValues) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.PCR0SHA1.Equals(other.PCR0SHA1) {
		return false
	}
	if !p.PCR0SHA256.Equals(other.PCR0SHA256) {
		return false
	}
	return true
}

func (p *PCRValues) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PCRValues(%+v)", *p)
}

// Attributes:
//   - ID
//   - Value
type StatusRegister struct {
	ID    string `thrift:"id,1" db:"id" json:"id"`
	Value []byte `thrift:"value,2" db:"value" json:"value"`
}

func NewStatusRegister() *StatusRegister {
	return &StatusRegister{}
}

func (p *StatusRegister) GetID() string {
	return p.ID
}

func (p *StatusRegister) GetValue() []byte {
	return p.Value
}
func (p *StatusRegister) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StatusRegister) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *StatusRegister) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *StatusRegister) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "StatusRegister"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StatusRegister) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *StatusRegister) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "value", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err)
	}
	if err := oprot.WriteBinary(ctx, p.Value); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err)
	}
	return err
}

func (p *StatusRegister) Equals(other *StatusRegister) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.ID != other.ID {
		return false
	}
	if bytes.Compare(p.Value, other.Value) != 0 {
		return false
	}
	return true
}

func (p *StatusRegister) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StatusRegister(%+v)", *p)
}

// Attributes:
//   - Intel
type VendorSpecificDiagInfo struct {
	Intel *IntelDiagInfo `thrift:"Intel,1" db:"Intel" json:"Intel,omitempty"`
}

func NewVendorSpecificDiagInfo() *VendorSpecificDiagInfo {
	return &VendorSpecificDiagInfo{}
}

var VendorSpecificDiagInfo_Intel_DEFAULT *IntelDiagInfo

func (p *VendorSpecificDiagInfo) GetIntel() *IntelDiagInfo {
	if !p.IsSetIntel() {
		return VendorSpecificDiagInfo_Intel_DEFAULT
	}
	return p.Intel
}
func (p *VendorSpecificDiagInfo) CountSetFieldsVendorSpecificDiagInfo() int {
	count := 0
	if p.IsSetIntel() {
		count++
	}
	return count

}

func (p *VendorSpecificDiagInfo) IsSetIntel() bool {
	return p.Intel != nil
}

func (p *VendorSpecificDiagInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *VendorSpecificDiagInfo) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Intel = &IntelDiagInfo{}
	if err := p.Intel.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Intel), err)
	}
	return nil
}

func (p *VendorSpecificDiagInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if c := p.CountSetFieldsVendorSpecificDiagInfo(); c != 1 {
		return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
	}
	if err := oprot.WriteStructBegin(ctx, "VendorSpecificDiagInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *VendorSpecificDiagInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetIntel() {
		if err := oprot.WriteFieldBegin(ctx, "Intel", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Intel: ", p), err)
		}
		if err := p.Intel.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Intel), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Intel: ", p), err)
		}
	}
	return err
}

func (p *VendorSpecificDiagInfo) Equals(other *VendorSpecificDiagInfo) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.Intel.Equals(other.Intel) {
		return false
	}
	return true
}

func (p *VendorSpecificDiagInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VendorSpecificDiagInfo(%+v)", *p)
}

// Attributes:
//   - ACM
type IntelDiagInfo struct {
	ACM *intelacmanalysis.IntelACMDiagInfo `thrift:"ACM,1" db:"ACM" json:"ACM,omitempty"`
}

func NewIntelDiagInfo() *IntelDiagInfo {
	return &IntelDiagInfo{}
}

var IntelDiagInfo_ACM_DEFAULT *intelacmanalysis.IntelACMDiagInfo

func (p *IntelDiagInfo) GetACM() *intelacmanalysis.IntelACMDiagInfo {
	if !p.IsSetACM() {
		return IntelDiagInfo_ACM_DEFAULT
	}
	return p.ACM
}
func (p *IntelDiagInfo) IsSetACM() bool {
	return p.ACM != nil
}

func (p *IntelDiagInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IntelDiagInfo) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.ACM = &intelacmanalysis.IntelACMDiagInfo{}
	if err := p.ACM.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ACM), err)
	}
	return nil
}

func (p *IntelDiagInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "IntelDiagInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IntelDiagInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetACM() {
		if err := oprot.WriteFieldBegin(ctx, "ACM", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ACM: ", p), err)
		}
		if err := p.ACM.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ACM), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ACM: ", p), err)
		}
	}
	return err
}

func (p *IntelDiagInfo) Equals(other *IntelDiagInfo) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.ACM.Equals(other.ACM) {
		return false
	}
	return true
}

func (p *IntelDiagInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IntelDiagInfo(%+v)", *p)
}

// Attributes:
//   - Hostname
//   - AssetID
//   - SerialNumber
//   - ModelID
//   - IsVerified
//   - IsClientHostAnalyzed
type HostInfo struct {
	Hostname             *string `thrift:"Hostname,1" db:"Hostname" json:"Hostname,omitempty"`
	AssetID              *int64  `thrift:"AssetID,2" db:"AssetID" json:"AssetID,omitempty"`
	SerialNumber         *string `thrift:"SerialNumber,3" db:"SerialNumber" json:"SerialNumber,omitempty"`
	ModelID              *int64  `thrift:"ModelID,4" db:"ModelID" json:"ModelID,omitempty"`
	IsVerified           bool    `thrift:"IsVerified,5" db:"IsVerified" json:"IsVerified"`
	IsClientHostAnalyzed bool    `thrift:"IsClientHostAnalyzed,6" db:"IsClientHostAnalyzed" json:"IsClientHostAnalyzed"`
}

func NewHostInfo() *HostInfo {
	return &HostInfo{}
}

var HostInfo_Hostname_DEFAULT string

func (p *HostInfo) GetHostname() string {
	if !p.IsSetHostname() {
		return HostInfo_Hostname_DEFAULT
	}
	return *p.Hostname
}

var HostInfo_AssetID_DEFAULT int64

func (p *HostInfo) GetAssetID() int64 {
	if !p.IsSetAssetID() {
		return HostInfo_AssetID_DEFAULT
	}
	return *p.AssetID
}

var HostInfo_SerialNumber_DEFAULT string

func (p *HostInfo) GetSerialNumber() string {
	if !p.IsSetSerialNumber() {
		return HostInfo_SerialNumber_DEFAULT
	}
	return *p.SerialNumber
}

var HostInfo_ModelID_DEFAULT int64

func (p *HostInfo) GetModelID() int64 {
	if !p.IsSetModelID() {
		return HostInfo_ModelID_DEFAULT
	}
	return *p.ModelID
}

func (p *HostInfo) GetIsVerified() bool {
	return p.IsVerified
}

func (p *HostInfo) GetIsClientHostAnalyzed() bool {
	return p.IsClientHostAnalyzed
}
func (p *HostInfo) IsSetHostname() bool {
	return p.Hostname != nil
}

func (p *HostInfo) IsSetAssetID() bool {
	return p.AssetID != nil
}

func (p *HostInfo) IsSetSerialNumber() bool {
	return p.SerialNumber != nil
}

func (p *HostInfo) IsSetModelID() bool {
	return p.ModelID != nil
}

func (p *HostInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HostInfo) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Hostname = &v
	}
	return nil
}

func (p *HostInfo) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AssetID = &v
	}
	return nil
}

func (p *HostInfo) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SerialNumber = &v
	}
	return nil
}

func (p *HostInfo) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ModelID = &v
	}
	return nil
}

func (p *HostInfo) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.IsVerified = v
	}
	return nil
}

func (p *HostInfo) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.IsClientHostAnalyzed = v
	}
	return nil
}

func (p *HostInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "HostInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HostInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetHostname() {
		if err := oprot.WriteFieldBegin(ctx, "Hostname", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Hostname: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Hostname)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.Hostname (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Hostname: ", p), err)
		}
	}
	return err
}

func (p *HostInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAssetID() {
		if err := oprot.WriteFieldBegin(ctx, "AssetID", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:AssetID: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.AssetID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.AssetID (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:AssetID: ", p), err)
		}
	}
	return err
}

func (p *HostInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSerialNumber() {
		if err := oprot.WriteFieldBegin(ctx, "SerialNumber", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:SerialNumber: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.SerialNumber)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.SerialNumber (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:SerialNumber: ", p), err)
		}
	}
	return err
}

func (p *HostInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetModelID() {
		if err := oprot.WriteFieldBegin(ctx, "ModelID", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ModelID: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.ModelID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ModelID (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ModelID: ", p), err)
		}
	}
	return err
}

func (p *HostInfo) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "IsVerified", thrift.BOOL, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:IsVerified: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.IsVerified)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.IsVerified (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:IsVerified: ", p), err)
	}
	return err
}

func (p *HostInfo) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "IsClientHostAnalyzed", thrift.BOOL, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:IsClientHostAnalyzed: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.IsClientHostAnalyzed)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.IsClientHostAnalyzed (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:IsClientHostAnalyzed: ", p), err)
	}
	return err
}

func (p *HostInfo) Equals(other *HostInfo) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Hostname != other.Hostname {
		if p.Hostname == nil || other.Hostname == nil {
			return false
		}
		if (*p.Hostname) != (*other.Hostname) {
			return false
		}
	}
	if p.AssetID != other.AssetID {
		if p.AssetID == nil || other.AssetID == nil {
			return false
		}
		if (*p.AssetID) != (*other.AssetID) {
			return false
		}
	}
	if p.SerialNumber != other.SerialNumber {
		if p.SerialNumber == nil || other.SerialNumber == nil {
			return false
		}
		if (*p.SerialNumber) != (*other.SerialNumber) {
			return false
		}
	}
	if p.ModelID != other.ModelID {
		if p.ModelID == nil || other.ModelID == nil {
			return false
		}
		if (*p.ModelID) != (*other.ModelID) {
			return false
		}
	}
	if p.IsVerified != other.IsVerified {
		return false
	}
	if p.IsClientHostAnalyzed != other.IsClientHostAnalyzed {
		return false
	}
	return true
}

func (p *HostInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HostInfo(%+v)", *p)
}

// Attributes:
//   - Revision
//   - BuildMode
type ServerInfo struct {
	Revision  string    `thrift:"Revision,1" db:"Revision" json:"Revision"`
	BuildMode BuildMode `thrift:"BuildMode,2" db:"BuildMode" json:"BuildMode"`
}

func NewServerInfo() *ServerInfo {
	return &ServerInfo{}
}

func (p *ServerInfo) GetRevision() string {
	return p.Revision
}

func (p *ServerInfo) GetBuildMode() BuildMode {
	return p.BuildMode
}
func (p *ServerInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ServerInfo) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Revision = v
	}
	return nil
}

func (p *ServerInfo) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := BuildMode(v)
		p.BuildMode = temp
	}
	return nil
}

func (p *ServerInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ServerInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ServerInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Revision", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Revision: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Revision)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Revision (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Revision: ", p), err)
	}
	return err
}

func (p *ServerInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "BuildMode", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:BuildMode: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.BuildMode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.BuildMode (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:BuildMode: ", p), err)
	}
	return err
}

func (p *ServerInfo) Equals(other *ServerInfo) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Revision != other.Revision {
		return false
	}
	if p.BuildMode != other.BuildMode {
		return false
	}
	return true
}

func (p *ServerInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServerInfo(%+v)", *p)
}

// Attributes:
//   - Version
//   - Reason
type UnableToGetOriginalFirmware struct {
	Version string `thrift:"Version,1" db:"Version" json:"Version"`
	Reason  string `thrift:"Reason,2" db:"Reason" json:"Reason"`
}

func NewUnableToGetOriginalFirmware() *UnableToGetOriginalFirmware {
	return &UnableToGetOriginalFirmware{}
}

func (p *UnableToGetOriginalFirmware) GetVersion() string {
	return p.Version
}

func (p *UnableToGetOriginalFirmware) GetReason() string {
	return p.Reason
}
func (p *UnableToGetOriginalFirmware) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UnableToGetOriginalFirmware) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Version = v
	}
	return nil
}

func (p *UnableToGetOriginalFirmware) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Reason = v
	}
	return nil
}

func (p *UnableToGetOriginalFirmware) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UnableToGetOriginalFirmware"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UnableToGetOriginalFirmware) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Version", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Version: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Version)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Version: ", p), err)
	}
	return err
}

func (p *UnableToGetOriginalFirmware) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Reason", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Reason: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Reason)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Reason (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Reason: ", p), err)
	}
	return err
}

func (p *UnableToGetOriginalFirmware) Equals(other *UnableToGetOriginalFirmware) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Version != other.Version {
		return false
	}
	if p.Reason != other.Reason {
		return false
	}
	return true
}

func (p *UnableToGetOriginalFirmware) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UnableToGetOriginalFirmware(%+v)", *p)
}

func (p *UnableToGetOriginalFirmware) Error() string {
	return p.String()
}

func (UnableToGetOriginalFirmware) TExceptionType() thrift.TExceptionType {
	return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*UnableToGetOriginalFirmware)(nil)

// Attributes:
//   - Reason
type IncorrectHostConfiguration struct {
	Reason string `thrift:"Reason,1" db:"Reason" json:"Reason"`
}

func NewIncorrectHostConfiguration() *IncorrectHostConfiguration {
	return &IncorrectHostConfiguration{}
}

func (p *IncorrectHostConfiguration) GetReason() string {
	return p.Reason
}
func (p *IncorrectHostConfiguration) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IncorrectHostConfiguration) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Reason = v
	}
	return nil
}

func (p *IncorrectHostConfiguration) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "IncorrectHostConfiguration"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IncorrectHostConfiguration) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Reason", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Reason: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Reason)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Reason (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Reason: ", p), err)
	}
	return err
}

func (p *IncorrectHostConfiguration) Equals(other *IncorrectHostConfiguration) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Reason != other.Reason {
		return false
	}
	return true
}

func (p *IncorrectHostConfiguration) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IncorrectHostConfiguration(%+v)", *p)
}

func (p *IncorrectHostConfiguration) Error() string {
	return p.String()
}

func (IncorrectHostConfiguration) TExceptionType() thrift.TExceptionType {
	return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*IncorrectHostConfiguration)(nil)

// Attributes:
//   - OrFilters
//   - FetchContent
type SearchFirmwareRequest struct {
	OrFilters    []*SearchFirmwareFilters `thrift:"OrFilters,1" db:"OrFilters" json:"OrFilters"`
	FetchContent bool                     `thrift:"FetchContent,2" db:"FetchContent" json:"FetchContent"`
}

func NewSearchFirmwareRequest() *SearchFirmwareRequest {
	return &SearchFirmwareRequest{}
}

func (p *SearchFirmwareRequest) GetOrFilters() []*SearchFirmwareFilters {
	return p.OrFilters
}

func (p *SearchFirmwareRequest) GetFetchContent() bool {
	return p.FetchContent
}
func (p *SearchFirmwareRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SearchFirmwareRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*SearchFirmwareFilters, 0, size)
	p.OrFilters = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &SearchFirmwareFilters{}
		if err := _elem0.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.OrFilters = append(p.OrFilters, _elem0)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SearchFirmwareRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.FetchContent = v
	}
	return nil
}

func (p *SearchFirmwareRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SearchFirmwareRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SearchFirmwareRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "OrFilters", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:OrFilters: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.OrFilters)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.OrFilters {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:OrFilters: ", p), err)
	}
	return err
}

func (p *SearchFirmwareRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "FetchContent", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:FetchContent: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.FetchContent)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.FetchContent (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:FetchContent: ", p), err)
	}
	return err
}

func (p *SearchFirmwareRequest) Equals(other *SearchFirmwareRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.OrFilters) != len(other.OrFilters) {
		return false
	}
	for i, _tgt := range p.OrFilters {
		_src1 := other.OrFilters[i]
		if !_tgt.Equals(_src1) {
			return false
		}
	}
	if p.FetchContent != other.FetchContent {
		return false
	}
	return true
}

func (p *SearchFirmwareRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchFirmwareRequest(%+v)", *p)
}

// Attributes:
//   - ImageID
//   - HashSHA2_512
//   - HashBlake3_512
//   - HashStable
//   - Filename
//   - Version
type SearchFirmwareFilters struct {
	ImageID        []byte  `thrift:"ImageID,1" db:"ImageID" json:"ImageID,omitempty"`
	HashSHA2_512   []byte  `thrift:"HashSHA2_512,2" db:"HashSHA2_512" json:"HashSHA2_512,omitempty"`
	HashBlake3_512 []byte  `thrift:"HashBlake3_512,3" db:"HashBlake3_512" json:"HashBlake3_512,omitempty"`
	HashStable     []byte  `thrift:"HashStable,4" db:"HashStable" json:"HashStable,omitempty"`
	Filename       *string `thrift:"Filename,5" db:"Filename" json:"Filename,omitempty"`
	Version        *string `thrift:"Version,6" db:"Version" json:"Version,omitempty"`
}

func NewSearchFirmwareFilters() *SearchFirmwareFilters {
	return &SearchFirmwareFilters{}
}

var SearchFirmwareFilters_ImageID_DEFAULT []byte

func (p *SearchFirmwareFilters) GetImageID() []byte {
	return p.ImageID
}

var SearchFirmwareFilters_HashSHA2_512_DEFAULT []byte

func (p *SearchFirmwareFilters) GetHashSHA2_512() []byte {
	return p.HashSHA2_512
}

var SearchFirmwareFilters_HashBlake3_512_DEFAULT []byte

func (p *SearchFirmwareFilters) GetHashBlake3_512() []byte {
	return p.HashBlake3_512
}

var SearchFirmwareFilters_HashStable_DEFAULT []byte

func (p *SearchFirmwareFilters) GetHashStable() []byte {
	return p.HashStable
}

var SearchFirmwareFilters_Filename_DEFAULT string

func (p *SearchFirmwareFilters) GetFilename() string {
	if !p.IsSetFilename() {
		return SearchFirmwareFilters_Filename_DEFAULT
	}
	return *p.Filename
}

var SearchFirmwareFilters_Version_DEFAULT string

func (p *SearchFirmwareFilters) GetVersion() string {
	if !p.IsSetVersion() {
		return SearchFirmwareFilters_Version_DEFAULT
	}
	return *p.Version
}
func (p *SearchFirmwareFilters) IsSetImageID() bool {
	return p.ImageID != nil
}

func (p *SearchFirmwareFilters) IsSetHashSHA2_512() bool {
	return p.HashSHA2_512 != nil
}

func (p *SearchFirmwareFilters) IsSetHashBlake3_512() bool {
	return p.HashBlake3_512 != nil
}

func (p *SearchFirmwareFilters) IsSetHashStable() bool {
	return p.HashStable != nil
}

func (p *SearchFirmwareFilters) IsSetFilename() bool {
	return p.Filename != nil
}

func (p *SearchFirmwareFilters) IsSetVersion() bool {
	return p.Version != nil
}

func (p *SearchFirmwareFilters) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SearchFirmwareFilters) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ImageID = v
	}
	return nil
}

func (p *SearchFirmwareFilters) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.HashSHA2_512 = v
	}
	return nil
}

func (p *SearchFirmwareFilters) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.HashBlake3_512 = v
	}
	return nil
}

func (p *SearchFirmwareFilters) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.HashStable = v
	}
	return nil
}

func (p *SearchFirmwareFilters) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Filename = &v
	}
	return nil
}

func (p *SearchFirmwareFilters) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Version = &v
	}
	return nil
}

func (p *SearchFirmwareFilters) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SearchFirmwareFilters"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SearchFirmwareFilters) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetImageID() {
		if err := oprot.WriteFieldBegin(ctx, "ImageID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ImageID: ", p), err)
		}
		if err := oprot.WriteBinary(ctx, p.ImageID); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ImageID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ImageID: ", p), err)
		}
	}
	return err
}

func (p *SearchFirmwareFilters) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetHashSHA2_512() {
		if err := oprot.WriteFieldBegin(ctx, "HashSHA2_512", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:HashSHA2_512: ", p), err)
		}
		if err := oprot.WriteBinary(ctx, p.HashSHA2_512); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.HashSHA2_512 (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:HashSHA2_512: ", p), err)
		}
	}
	return err
}

func (p *SearchFirmwareFilters) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetHashBlake3_512() {
		if err := oprot.WriteFieldBegin(ctx, "HashBlake3_512", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:HashBlake3_512: ", p), err)
		}
		if err := oprot.WriteBinary(ctx, p.HashBlake3_512); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.HashBlake3_512 (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:HashBlake3_512: ", p), err)
		}
	}
	return err
}

func (p *SearchFirmwareFilters) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetHashStable() {
		if err := oprot.WriteFieldBegin(ctx, "HashStable", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:HashStable: ", p), err)
		}
		if err := oprot.WriteBinary(ctx, p.HashStable); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.HashStable (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:HashStable: ", p), err)
		}
	}
	return err
}

func (p *SearchFirmwareFilters) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetFilename() {
		if err := oprot.WriteFieldBegin(ctx, "Filename", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Filename: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Filename)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.Filename (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Filename: ", p), err)
		}
	}
	return err
}

func (p *SearchFirmwareFilters) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err := oprot.WriteFieldBegin(ctx, "Version", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:Version: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Version)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.Version (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:Version: ", p), err)
		}
	}
	return err
}

func (p *SearchFirmwareFilters) Equals(other *SearchFirmwareFilters) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if bytes.Compare(p.ImageID, other.ImageID) != 0 {
		return false
	}
	if bytes.Compare(p.HashSHA2_512, other.HashSHA2_512) != 0 {
		return false
	}
	if bytes.Compare(p.HashBlake3_512, other.HashBlake3_512) != 0 {
		return false
	}
	if bytes.Compare(p.HashStable, other.HashStable) != 0 {
		return false
	}
	if p.Filename != other.Filename {
		if p.Filename == nil || other.Filename == nil {
			return false
		}
		if (*p.Filename) != (*other.Filename) {
			return false
		}
	}
	if p.Version != other.Version {
		if p.Version == nil || other.Version == nil {
			return false
		}
		if (*p.Version) != (*other.Version) {
			return false
		}
	}
	return true
}

func (p *SearchFirmwareFilters) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchFirmwareFilters(%+v)", *p)
}

// Attributes:
//   - Found
type SearchFirmwareResult_ struct {
	Found []*Firmware `thrift:"Found,1" db:"Found" json:"Found"`
}

func NewSearchFirmwareResult_() *SearchFirmwareResult_ {
	return &SearchFirmwareResult_{}
}

func (p *SearchFirmwareResult_) GetFound() []*Firmware {
	return p.Found
}
func (p *SearchFirmwareResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SearchFirmwareResult_) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Firmware, 0, size)
	p.Found = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &Firmware{}
		if err := _elem2.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
		}
		p.Found = append(p.Found, _elem2)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SearchFirmwareResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SearchFirmwareResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SearchFirmwareResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Found", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Found: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Found)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Found {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Found: ", p), err)
	}
	return err
}

func (p *SearchFirmwareResult_) Equals(other *SearchFirmwareResult_) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.Found) != len(other.Found) {
		return false
	}
	for i, _tgt := range p.Found {
		_src3 := other.Found[i]
		if !_tgt.Equals(_src3) {
			return false
		}
	}
	return true
}

func (p *SearchFirmwareResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchFirmwareResult_(%+v)", *p)
}

// Attributes:
//   - Metadata
//   - Data
type Firmware struct {
	Metadata *FirmwareImageMetadata `thrift:"Metadata,1" db:"Metadata" json:"Metadata"`
	Data     []byte                 `thrift:"Data,2" db:"Data" json:"Data,omitempty"`
}

func NewFirmware() *Firmware {
	return &Firmware{}
}

var Firmware_Metadata_DEFAULT *FirmwareImageMetadata

func (p *Firmware) GetMetadata() *FirmwareImageMetadata {
	if !p.IsSetMetadata() {
		return Firmware_Metadata_DEFAULT
	}
	return p.Metadata
}

var Firmware_Data_DEFAULT []byte

func (p *Firmware) GetData() []byte {
	return p.Data
}
func (p *Firmware) IsSetMetadata() bool {
	return p.Metadata != nil
}

func (p *Firmware) IsSetData() bool {
	return p.Data != nil
}

func (p *Firmware) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Firmware) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Metadata = &FirmwareImageMetadata{}
	if err := p.Metadata.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Metadata), err)
	}
	return nil
}

func (p *Firmware) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Data = v
	}
	return nil
}

func (p *Firmware) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Firmware"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Firmware) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Metadata", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Metadata: ", p), err)
	}
	if err := p.Metadata.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Metadata), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Metadata: ", p), err)
	}
	return err
}

func (p *Firmware) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err := oprot.WriteFieldBegin(ctx, "Data", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Data: ", p), err)
		}
		if err := oprot.WriteBinary(ctx, p.Data); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.Data (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Data: ", p), err)
		}
	}
	return err
}

func (p *Firmware) Equals(other *Firmware) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.Metadata.Equals(other.Metadata) {
		return false
	}
	if bytes.Compare(p.Data, other.Data) != 0 {
		return false
	}
	return true
}

func (p *Firmware) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Firmware(%+v)", *p)
}

// Attributes:
//   - ImageID
//   - HashSHA2_512
//   - HashBlake3_512
//   - HashStable
//   - Filename
//   - Version
//   - Size
//   - TSAdd
//   - TSUpload
type FirmwareImageMetadata struct {
	ImageID        []byte  `thrift:"ImageID,1" db:"ImageID" json:"ImageID"`
	HashSHA2_512   []byte  `thrift:"HashSHA2_512,2" db:"HashSHA2_512" json:"HashSHA2_512"`
	HashBlake3_512 []byte  `thrift:"HashBlake3_512,3" db:"HashBlake3_512" json:"HashBlake3_512"`
	HashStable     []byte  `thrift:"HashStable,4" db:"HashStable" json:"HashStable"`
	Filename       *string `thrift:"Filename,5" db:"Filename" json:"Filename,omitempty"`
	Version        *string `thrift:"Version,6" db:"Version" json:"Version,omitempty"`
	Size           int64   `thrift:"Size,7" db:"Size" json:"Size"`
	TSAdd          int64   `thrift:"TSAdd,8" db:"TSAdd" json:"TSAdd"`
	TSUpload       *int64  `thrift:"TSUpload,9" db:"TSUpload" json:"TSUpload,omitempty"`
}

func NewFirmwareImageMetadata() *FirmwareImageMetadata {
	return &FirmwareImageMetadata{}
}

func (p *FirmwareImageMetadata) GetImageID() []byte {
	return p.ImageID
}

func (p *FirmwareImageMetadata) GetHashSHA2_512() []byte {
	return p.HashSHA2_512
}

func (p *FirmwareImageMetadata) GetHashBlake3_512() []byte {
	return p.HashBlake3_512
}

func (p *FirmwareImageMetadata) GetHashStable() []byte {
	return p.HashStable
}

var FirmwareImageMetadata_Filename_DEFAULT string

func (p *FirmwareImageMetadata) GetFilename() string {
	if !p.IsSetFilename() {
		return FirmwareImageMetadata_Filename_DEFAULT
	}
	return *p.Filename
}

var FirmwareImageMetadata_Version_DEFAULT string

func (p *FirmwareImageMetadata) GetVersion() string {
	if !p.IsSetVersion() {
		return FirmwareImageMetadata_Version_DEFAULT
	}
	return *p.Version
}

func (p *FirmwareImageMetadata) GetSize() int64 {
	return p.Size
}

func (p *FirmwareImageMetadata) GetTSAdd() int64 {
	return p.TSAdd
}

var FirmwareImageMetadata_TSUpload_DEFAULT int64

func (p *FirmwareImageMetadata) GetTSUpload() int64 {
	if !p.IsSetTSUpload() {
		return FirmwareImageMetadata_TSUpload_DEFAULT
	}
	return *p.TSUpload
}
func (p *FirmwareImageMetadata) IsSetFilename() bool {
	return p.Filename != nil
}

func (p *FirmwareImageMetadata) IsSetVersion() bool {
	return p.Version != nil
}

func (p *FirmwareImageMetadata) IsSetTSUpload() bool {
	return p.TSUpload != nil
}

func (p *FirmwareImageMetadata) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField8(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField9(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FirmwareImageMetadata) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ImageID = v
	}
	return nil
}

func (p *FirmwareImageMetadata) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.HashSHA2_512 = v
	}
	return nil
}

func (p *FirmwareImageMetadata) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.HashBlake3_512 = v
	}
	return nil
}

func (p *FirmwareImageMetadata) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.HashStable = v
	}
	return nil
}

func (p *FirmwareImageMetadata) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Filename = &v
	}
	return nil
}

func (p *FirmwareImageMetadata) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Version = &v
	}
	return nil
}

func (p *FirmwareImageMetadata) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Size = v
	}
	return nil
}

func (p *FirmwareImageMetadata) ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.TSAdd = v
	}
	return nil
}

func (p *FirmwareImageMetadata) ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.TSUpload = &v
	}
	return nil
}

func (p *FirmwareImageMetadata) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "FirmwareImageMetadata"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField7(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField8(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField9(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FirmwareImageMetadata) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ImageID", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ImageID: ", p), err)
	}
	if err := oprot.WriteBinary(ctx, p.ImageID); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ImageID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ImageID: ", p), err)
	}
	return err
}

func (p *FirmwareImageMetadata) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "HashSHA2_512", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:HashSHA2_512: ", p), err)
	}
	if err := oprot.WriteBinary(ctx, p.HashSHA2_512); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.HashSHA2_512 (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:HashSHA2_512: ", p), err)
	}
	return err
}

func (p *FirmwareImageMetadata) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "HashBlake3_512", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:HashBlake3_512: ", p), err)
	}
	if err := oprot.WriteBinary(ctx, p.HashBlake3_512); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.HashBlake3_512 (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:HashBlake3_512: ", p), err)
	}
	return err
}

func (p *FirmwareImageMetadata) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "HashStable", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:HashStable: ", p), err)
	}
	if err := oprot.WriteBinary(ctx, p.HashStable); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.HashStable (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:HashStable: ", p), err)
	}
	return err
}

func (p *FirmwareImageMetadata) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetFilename() {
		if err := oprot.WriteFieldBegin(ctx, "Filename", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Filename: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Filename)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.Filename (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Filename: ", p), err)
		}
	}
	return err
}

func (p *FirmwareImageMetadata) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err := oprot.WriteFieldBegin(ctx, "Version", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:Version: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Version)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.Version (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:Version: ", p), err)
		}
	}
	return err
}

func (p *FirmwareImageMetadata) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Size", thrift.I64, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:Size: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.Size)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Size (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:Size: ", p), err)
	}
	return err
}

func (p *FirmwareImageMetadata) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "TSAdd", thrift.I64, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:TSAdd: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.TSAdd)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.TSAdd (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:TSAdd: ", p), err)
	}
	return err
}

func (p *FirmwareImageMetadata) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTSUpload() {
		if err := oprot.WriteFieldBegin(ctx, "TSUpload", thrift.I64, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:TSUpload: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.TSUpload)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.TSUpload (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:TSUpload: ", p), err)
		}
	}
	return err
}

func (p *FirmwareImageMetadata) Equals(other *FirmwareImageMetadata) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if bytes.Compare(p.ImageID, other.ImageID) != 0 {
		return false
	}
	if bytes.Compare(p.HashSHA2_512, other.HashSHA2_512) != 0 {
		return false
	}
	if bytes.Compare(p.HashBlake3_512, other.HashBlake3_512) != 0 {
		return false
	}
	if bytes.Compare(p.HashStable, other.HashStable) != 0 {
		return false
	}
	if p.Filename != other.Filename {
		if p.Filename == nil || other.Filename == nil {
			return false
		}
		if (*p.Filename) != (*other.Filename) {
			return false
		}
	}
	if p.Version != other.Version {
		if p.Version == nil || other.Version == nil {
			return false
		}
		if (*p.Version) != (*other.Version) {
			return false
		}
	}
	if p.Size != other.Size {
		return false
	}
	if p.TSAdd != other.TSAdd {
		return false
	}
	if p.TSUpload != other.TSUpload {
		if p.TSUpload == nil || other.TSUpload == nil {
			return false
		}
		if (*p.TSUpload) != (*other.TSUpload) {
			return false
		}
	}
	return true
}

func (p *FirmwareImageMetadata) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FirmwareImageMetadata(%+v)", *p)
}

// Attributes:
//   - OrFilters
//   - Limit
type SearchReportRequest struct {
	OrFilters []*SearchReportFilters `thrift:"OrFilters,1" db:"OrFilters" json:"OrFilters"`
	Limit     int64                  `thrift:"Limit,2" db:"Limit" json:"Limit"`
}

func NewSearchReportRequest() *SearchReportRequest {
	return &SearchReportRequest{}
}

func (p *SearchReportRequest) GetOrFilters() []*SearchReportFilters {
	return p.OrFilters
}

func (p *SearchReportRequest) GetLimit() int64 {
	return p.Limit
}
func (p *SearchReportRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SearchReportRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*SearchReportFilters, 0, size)
	p.OrFilters = tSlice
	for i := 0; i < size; i++ {
		_elem4 := &SearchReportFilters{}
		if err := _elem4.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
		}
		p.OrFilters = append(p.OrFilters, _elem4)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SearchReportRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Limit = v
	}
	return nil
}

func (p *SearchReportRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SearchReportRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SearchReportRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "OrFilters", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:OrFilters: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.OrFilters)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.OrFilters {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:OrFilters: ", p), err)
	}
	return err
}

func (p *SearchReportRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Limit", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Limit: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.Limit)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Limit (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Limit: ", p), err)
	}
	return err
}

func (p *SearchReportRequest) Equals(other *SearchReportRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.OrFilters) != len(other.OrFilters) {
		return false
	}
	for i, _tgt := range p.OrFilters {
		_src5 := other.OrFilters[i]
		if !_tgt.Equals(_src5) {
			return false
		}
	}
	if p.Limit != other.Limit {
		return false
	}
	return true
}

func (p *SearchReportRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchReportRequest(%+v)", *p)
}

// Attributes:
//   - JobID
//   - AssetID
//   - ActualFirmware
type SearchReportFilters struct {
	JobID          []byte                 `thrift:"JobID,1" db:"JobID" json:"JobID,omitempty"`
	AssetID        *int64                 `thrift:"AssetID,2" db:"AssetID" json:"AssetID,omitempty"`
	ActualFirmware *SearchFirmwareFilters `thrift:"ActualFirmware,3" db:"ActualFirmware" json:"ActualFirmware"`
}

func NewSearchReportFilters() *SearchReportFilters {
	return &SearchReportFilters{}
}

var SearchReportFilters_JobID_DEFAULT []byte

func (p *SearchReportFilters) GetJobID() []byte {
	return p.JobID
}

var SearchReportFilters_AssetID_DEFAULT int64

func (p *SearchReportFilters) GetAssetID() int64 {
	if !p.IsSetAssetID() {
		return SearchReportFilters_AssetID_DEFAULT
	}
	return *p.AssetID
}

var SearchReportFilters_ActualFirmware_DEFAULT *SearchFirmwareFilters

func (p *SearchReportFilters) GetActualFirmware() *SearchFirmwareFilters {
	if !p.IsSetActualFirmware() {
		return SearchReportFilters_ActualFirmware_DEFAULT
	}
	return p.ActualFirmware
}
func (p *SearchReportFilters) IsSetJobID() bool {
	return p.JobID != nil
}

func (p *SearchReportFilters) IsSetAssetID() bool {
	return p.AssetID != nil
}

func (p *SearchReportFilters) IsSetActualFirmware() bool {
	return p.ActualFirmware != nil
}

func (p *SearchReportFilters) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SearchReportFilters) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.JobID = v
	}
	return nil
}

func (p *SearchReportFilters) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AssetID = &v
	}
	return nil
}

func (p *SearchReportFilters) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	p.ActualFirmware = &SearchFirmwareFilters{}
	if err := p.ActualFirmware.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ActualFirmware), err)
	}
	return nil
}

func (p *SearchReportFilters) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SearchReportFilters"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SearchReportFilters) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetJobID() {
		if err := oprot.WriteFieldBegin(ctx, "JobID", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:JobID: ", p), err)
		}
		if err := oprot.WriteBinary(ctx, p.JobID); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.JobID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:JobID: ", p), err)
		}
	}
	return err
}

func (p *SearchReportFilters) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAssetID() {
		if err := oprot.WriteFieldBegin(ctx, "AssetID", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:AssetID: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.AssetID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.AssetID (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:AssetID: ", p), err)
		}
	}
	return err
}

func (p *SearchReportFilters) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ActualFirmware", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ActualFirmware: ", p), err)
	}
	if err := p.ActualFirmware.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ActualFirmware), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ActualFirmware: ", p), err)
	}
	return err
}

func (p *SearchReportFilters) Equals(other *SearchReportFilters) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if bytes.Compare(p.JobID, other.JobID) != 0 {
		return false
	}
	if p.AssetID != other.AssetID {
		if p.AssetID == nil || other.AssetID == nil {
			return false
		}
		if (*p.AssetID) != (*other.AssetID) {
			return false
		}
	}
	if !p.ActualFirmware.Equals(other.ActualFirmware) {
		return false
	}
	return true
}

func (p *SearchReportFilters) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchReportFilters(%+v)", *p)
}

// Attributes:
//   - Found
type SearchReportResult_ struct {
	Found []*AnalyzeResult_ `thrift:"Found,1" db:"Found" json:"Found"`
}

func NewSearchReportResult_() *SearchReportResult_ {
	return &SearchReportResult_{}
}

func (p *SearchReportResult_) GetFound() []*AnalyzeResult_ {
	return p.Found
}
func (p *SearchReportResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SearchReportResult_) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*AnalyzeResult_, 0, size)
	p.Found = tSlice
	for i := 0; i < size; i++ {
		_elem6 := &AnalyzeResult_{}
		if err := _elem6.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
		}
		p.Found = append(p.Found, _elem6)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SearchReportResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SearchReportResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SearchReportResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Found", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Found: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Found)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Found {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Found: ", p), err)
	}
	return err
}

func (p *SearchReportResult_) Equals(other *SearchReportResult_) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.Found) != len(other.Found) {
		return false
	}
	for i, _tgt := range p.Found {
		_src7 := other.Found[i]
		if !_tgt.Equals(_src7) {
			return false
		}
	}
	return true
}

func (p *SearchReportResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchReportResult_(%+v)", *p)
}

// Attributes:
//   - Version
type FirmwareVersion struct {
	Version string `thrift:"Version,1" db:"Version" json:"Version"`
}

func NewFirmwareVersion() *FirmwareVersion {
	return &FirmwareVersion{}
}

func (p *FirmwareVersion) GetVersion() string {
	return p.Version
}
func (p *FirmwareVersion) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FirmwareVersion) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Version = v
	}
	return nil
}

func (p *FirmwareVersion) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "FirmwareVersion"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FirmwareVersion) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Version", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Version: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Version)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Version: ", p), err)
	}
	return err
}

func (p *FirmwareVersion) Equals(other *FirmwareVersion) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Version != other.Version {
		return false
	}
	return true
}

func (p *FirmwareVersion) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FirmwareVersion(%+v)", *p)
}

// Attributes:
//   - Blob
//   - Compression
type CompressedBlob struct {
	Blob        []byte          `thrift:"Blob,1" db:"Blob" json:"Blob"`
	Compression CompressionType `thrift:"Compression,2" db:"Compression" json:"Compression"`
}

func NewCompressedBlob() *CompressedBlob {
	return &CompressedBlob{}
}

func (p *CompressedBlob) GetBlob() []byte {
	return p.Blob
}

func (p *CompressedBlob) GetCompression() CompressionType {
	return p.Compression
}
func (p *CompressedBlob) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CompressedBlob) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Blob = v
	}
	return nil
}

func (p *CompressedBlob) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := CompressionType(v)
		p.Compression = temp
	}
	return nil
}

func (p *CompressedBlob) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "CompressedBlob"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CompressedBlob) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Blob", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Blob: ", p), err)
	}
	if err := oprot.WriteBinary(ctx, p.Blob); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Blob (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Blob: ", p), err)
	}
	return err
}

func (p *CompressedBlob) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Compression", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Compression: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Compression)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Compression (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Compression: ", p), err)
	}
	return err
}

func (p *CompressedBlob) Equals(other *CompressedBlob) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if bytes.Compare(p.Blob, other.Blob) != 0 {
		return false
	}
	if p.Compression != other.Compression {
		return false
	}
	return true
}

func (p *CompressedBlob) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CompressedBlob(%+v)", *p)
}

// Attributes:
//   - Blob
//   - BlobStorageKey
//   - FirmwareVersion
type FirmwareImage struct {
	Blob            *CompressedBlob  `thrift:"Blob,1" db:"Blob" json:"Blob,omitempty"`
	BlobStorageKey  *string          `thrift:"BlobStorageKey,2" db:"BlobStorageKey" json:"BlobStorageKey,omitempty"`
	FirmwareVersion *FirmwareVersion `thrift:"FirmwareVersion,3" db:"FirmwareVersion" json:"FirmwareVersion,omitempty"`
}

func NewFirmwareImage() *FirmwareImage {
	return &FirmwareImage{}
}

var FirmwareImage_Blob_DEFAULT *CompressedBlob

func (p *FirmwareImage) GetBlob() *CompressedBlob {
	if !p.IsSetBlob() {
		return FirmwareImage_Blob_DEFAULT
	}
	return p.Blob
}

var FirmwareImage_BlobStorageKey_DEFAULT string

func (p *FirmwareImage) GetBlobStorageKey() string {
	if !p.IsSetBlobStorageKey() {
		return FirmwareImage_BlobStorageKey_DEFAULT
	}
	return *p.BlobStorageKey
}

var FirmwareImage_FirmwareVersion_DEFAULT *FirmwareVersion

func (p *FirmwareImage) GetFirmwareVersion() *FirmwareVersion {
	if !p.IsSetFirmwareVersion() {
		return FirmwareImage_FirmwareVersion_DEFAULT
	}
	return p.FirmwareVersion
}
func (p *FirmwareImage) CountSetFieldsFirmwareImage() int {
	count := 0
	if p.IsSetBlob() {
		count++
	}
	if p.IsSetBlobStorageKey() {
		count++
	}
	if p.IsSetFirmwareVersion() {
		count++
	}
	return count

}

func (p *FirmwareImage) IsSetBlob() bool {
	return p.Blob != nil
}

func (p *FirmwareImage) IsSetBlobStorageKey() bool {
	return p.BlobStorageKey != nil
}

func (p *FirmwareImage) IsSetFirmwareVersion() bool {
	return p.FirmwareVersion != nil
}

func (p *FirmwareImage) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FirmwareImage) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Blob = &CompressedBlob{}
	if err := p.Blob.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Blob), err)
	}
	return nil
}

func (p *FirmwareImage) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.BlobStorageKey = &v
	}
	return nil
}

func (p *FirmwareImage) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	p.FirmwareVersion = &FirmwareVersion{}
	if err := p.FirmwareVersion.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FirmwareVersion), err)
	}
	return nil
}

func (p *FirmwareImage) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if c := p.CountSetFieldsFirmwareImage(); c != 1 {
		return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
	}
	if err := oprot.WriteStructBegin(ctx, "FirmwareImage"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FirmwareImage) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetBlob() {
		if err := oprot.WriteFieldBegin(ctx, "Blob", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Blob: ", p), err)
		}
		if err := p.Blob.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Blob), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Blob: ", p), err)
		}
	}
	return err
}

func (p *FirmwareImage) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetBlobStorageKey() {
		if err := oprot.WriteFieldBegin(ctx, "BlobStorageKey", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:BlobStorageKey: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.BlobStorageKey)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.BlobStorageKey (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:BlobStorageKey: ", p), err)
		}
	}
	return err
}

func (p *FirmwareImage) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetFirmwareVersion() {
		if err := oprot.WriteFieldBegin(ctx, "FirmwareVersion", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:FirmwareVersion: ", p), err)
		}
		if err := p.FirmwareVersion.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FirmwareVersion), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:FirmwareVersion: ", p), err)
		}
	}
	return err
}

func (p *FirmwareImage) Equals(other *FirmwareImage) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.Blob.Equals(other.Blob) {
		return false
	}
	if p.BlobStorageKey != other.BlobStorageKey {
		if p.BlobStorageKey == nil || other.BlobStorageKey == nil {
			return false
		}
		if (*p.BlobStorageKey) != (*other.BlobStorageKey) {
			return false
		}
	}
	if !p.FirmwareVersion.Equals(other.FirmwareVersion) {
		return false
	}
	return true
}

func (p *FirmwareImage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FirmwareImage(%+v)", *p)
}

// Attributes:
//   - Value
//   - Index
type PCR struct {
	Value []byte `thrift:"Value,1" db:"Value" json:"Value"`
	Index int32  `thrift:"Index,2" db:"Index" json:"Index"`
}

func NewPCR() *PCR {
	return &PCR{}
}

func (p *PCR) GetValue() []byte {
	return p.Value
}

func (p *PCR) GetIndex() int32 {
	return p.Index
}
func (p *PCR) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PCR) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *PCR) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Index = v
	}
	return nil
}

func (p *PCR) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "PCR"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PCR) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Value", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Value: ", p), err)
	}
	if err := oprot.WriteBinary(ctx, p.Value); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Value (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Value: ", p), err)
	}
	return err
}

func (p *PCR) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Index", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Index: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Index)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Index (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Index: ", p), err)
	}
	return err
}

func (p *PCR) Equals(other *PCR) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if bytes.Compare(p.Value, other.Value) != 0 {
		return false
	}
	if p.Index != other.Index {
		return false
	}
	return true
}

func (p *PCR) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PCR(%+v)", *p)
}

// Attributes:
//   - FwImage
//   - Pcr
//   - TPMDevice
//   - TPMEventLog
//   - StatusRegisters
//   - MeasurementsFlow
type Artifact struct {
	FwImage          *FirmwareImage     `thrift:"FwImage,1" db:"FwImage" json:"FwImage,omitempty"`
	Pcr              *PCR               `thrift:"Pcr,2" db:"Pcr" json:"Pcr,omitempty"`
	TPMDevice        *TPMType           `thrift:"TPMDevice,3" db:"TPMDevice" json:"TPMDevice,omitempty"`
	TPMEventLog      *tpm.EventLog      `thrift:"TPMEventLog,4" db:"TPMEventLog" json:"TPMEventLog,omitempty"`
	StatusRegisters  []*StatusRegister  `thrift:"StatusRegisters,5" db:"StatusRegisters" json:"StatusRegisters,omitempty"`
	MeasurementsFlow *measurements.Flow `thrift:"MeasurementsFlow,6" db:"MeasurementsFlow" json:"MeasurementsFlow,omitempty"`
}

func NewArtifact() *Artifact {
	return &Artifact{}
}

var Artifact_FwImage_DEFAULT *FirmwareImage

func (p *Artifact) GetFwImage() *FirmwareImage {
	if !p.IsSetFwImage() {
		return Artifact_FwImage_DEFAULT
	}
	return p.FwImage
}

var Artifact_Pcr_DEFAULT *PCR

func (p *Artifact) GetPcr() *PCR {
	if !p.IsSetPcr() {
		return Artifact_Pcr_DEFAULT
	}
	return p.Pcr
}

var Artifact_TPMDevice_DEFAULT TPMType

func (p *Artifact) GetTPMDevice() TPMType {
	if !p.IsSetTPMDevice() {
		return Artifact_TPMDevice_DEFAULT
	}
	return *p.TPMDevice
}

var Artifact_TPMEventLog_DEFAULT *tpm.EventLog

func (p *Artifact) GetTPMEventLog() *tpm.EventLog {
	if !p.IsSetTPMEventLog() {
		return Artifact_TPMEventLog_DEFAULT
	}
	return p.TPMEventLog
}

var Artifact_StatusRegisters_DEFAULT []*StatusRegister

func (p *Artifact) GetStatusRegisters() []*StatusRegister {
	return p.StatusRegisters
}

var Artifact_MeasurementsFlow_DEFAULT measurements.Flow

func (p *Artifact) GetMeasurementsFlow() measurements.Flow {
	if !p.IsSetMeasurementsFlow() {
		return Artifact_MeasurementsFlow_DEFAULT
	}
	return *p.MeasurementsFlow
}
func (p *Artifact) CountSetFieldsArtifact() int {
	count := 0
	if p.IsSetFwImage() {
		count++
	}
	if p.IsSetPcr() {
		count++
	}
	if p.IsSetTPMDevice() {
		count++
	}
	if p.IsSetTPMEventLog() {
		count++
	}
	if p.IsSetStatusRegisters() {
		count++
	}
	if p.IsSetMeasurementsFlow() {
		count++
	}
	return count

}

func (p *Artifact) IsSetFwImage() bool {
	return p.FwImage != nil
}

func (p *Artifact) IsSetPcr() bool {
	return p.Pcr != nil
}

func (p *Artifact) IsSetTPMDevice() bool {
	return p.TPMDevice != nil
}

func (p *Artifact) IsSetTPMEventLog() bool {
	return p.TPMEventLog != nil
}

func (p *Artifact) IsSetStatusRegisters() bool {
	return p.StatusRegisters != nil
}

func (p *Artifact) IsSetMeasurementsFlow() bool {
	return p.MeasurementsFlow != nil
}

func (p *Artifact) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Artifact) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.FwImage = &FirmwareImage{}
	if err := p.FwImage.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FwImage), err)
	}
	return nil
}

func (p *Artifact) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Pcr = &PCR{}
	if err := p.Pcr.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Pcr), err)
	}
	return nil
}

func (p *Artifact) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := TPMType(v)
		p.TPMDevice = &temp
	}
	return nil
}

func (p *Artifact) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	p.TPMEventLog = &tpm.EventLog{}
	if err := p.TPMEventLog.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TPMEventLog), err)
	}
	return nil
}

func (p *Artifact) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*StatusRegister, 0, size)
	p.StatusRegisters = tSlice
	for i := 0; i < size; i++ {
		_elem8 := &StatusRegister{}
		if err := _elem8.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
		}
		p.StatusRegisters = append(p.StatusRegisters, _elem8)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Artifact) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := measurements.Flow(v)
		p.MeasurementsFlow = &temp
	}
	return nil
}

func (p *Artifact) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if c := p.CountSetFieldsArtifact(); c != 1 {
		return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
	}
	if err := oprot.WriteStructBegin(ctx, "Artifact"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Artifact) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetFwImage() {
		if err := oprot.WriteFieldBegin(ctx, "FwImage", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:FwImage: ", p), err)
		}
		if err := p.FwImage.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FwImage), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:FwImage: ", p), err)
		}
	}
	return err
}

func (p *Artifact) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetPcr() {
		if err := oprot.WriteFieldBegin(ctx, "Pcr", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Pcr: ", p), err)
		}
		if err := p.Pcr.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Pcr), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Pcr: ", p), err)
		}
	}
	return err
}

func (p *Artifact) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTPMDevice() {
		if err := oprot.WriteFieldBegin(ctx, "TPMDevice", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:TPMDevice: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.TPMDevice)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.TPMDevice (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:TPMDevice: ", p), err)
		}
	}
	return err
}

func (p *Artifact) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTPMEventLog() {
		if err := oprot.WriteFieldBegin(ctx, "TPMEventLog", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:TPMEventLog: ", p), err)
		}
		if err := p.TPMEventLog.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TPMEventLog), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:TPMEventLog: ", p), err)
		}
	}
	return err
}

func (p *Artifact) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetStatusRegisters() {
		if err := oprot.WriteFieldBegin(ctx, "StatusRegisters", thrift.LIST, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:StatusRegisters: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.StatusRegisters)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.StatusRegisters {
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:StatusRegisters: ", p), err)
		}
	}
	return err
}

func (p *Artifact) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetMeasurementsFlow() {
		if err := oprot.WriteFieldBegin(ctx, "MeasurementsFlow", thrift.I32, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:MeasurementsFlow: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.MeasurementsFlow)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.MeasurementsFlow (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:MeasurementsFlow: ", p), err)
		}
	}
	return err
}

func (p *Artifact) Equals(other *Artifact) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.FwImage.Equals(other.FwImage) {
		return false
	}
	if !p.Pcr.Equals(other.Pcr) {
		return false
	}
	if p.TPMDevice != other.TPMDevice {
		if p.TPMDevice == nil || other.TPMDevice == nil {
			return false
		}
		if (*p.TPMDevice) != (*other.TPMDevice) {
			return false
		}
	}
	if !p.TPMEventLog.Equals(other.TPMEventLog) {
		return false
	}
	if len(p.StatusRegisters) != len(other.StatusRegisters) {
		return false
	}
	for i, _tgt := range p.StatusRegisters {
		_src9 := other.StatusRegisters[i]
		if !_tgt.Equals(_src9) {
			return false
		}
	}
	if p.MeasurementsFlow != other.MeasurementsFlow {
		if p.MeasurementsFlow == nil || other.MeasurementsFlow == nil {
			return false
		}
		if (*p.MeasurementsFlow) != (*other.MeasurementsFlow) {
			return false
		}
	}
	return true
}

func (p *Artifact) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Artifact(%+v)", *p)
}

// Attributes:
//   - ActualFirmwareImage
//   - OriginalFirmwareImage
//   - StatusRegisters
//   - TPMDevice
//   - TPMEventLog
//   - ActualPCR0
type DiffMeasuredBootInput struct {
	ActualFirmwareImage   int32  `thrift:"ActualFirmwareImage,1" db:"ActualFirmwareImage" json:"ActualFirmwareImage"`
	OriginalFirmwareImage *int32 `thrift:"OriginalFirmwareImage,2" db:"OriginalFirmwareImage" json:"OriginalFirmwareImage,omitempty"`
	StatusRegisters       *int32 `thrift:"StatusRegisters,3" db:"StatusRegisters" json:"StatusRegisters,omitempty"`
	TPMDevice             *int32 `thrift:"TPMDevice,4" db:"TPMDevice" json:"TPMDevice,omitempty"`
	TPMEventLog           *int32 `thrift:"TPMEventLog,5" db:"TPMEventLog" json:"TPMEventLog,omitempty"`
	ActualPCR0            *int32 `thrift:"ActualPCR0,6" db:"ActualPCR0" json:"ActualPCR0,omitempty"`
}

func NewDiffMeasuredBootInput() *DiffMeasuredBootInput {
	return &DiffMeasuredBootInput{}
}

func (p *DiffMeasuredBootInput) GetActualFirmwareImage() int32 {
	return p.ActualFirmwareImage
}

var DiffMeasuredBootInput_OriginalFirmwareImage_DEFAULT int32

func (p *DiffMeasuredBootInput) GetOriginalFirmwareImage() int32 {
	if !p.IsSetOriginalFirmwareImage() {
		return DiffMeasuredBootInput_OriginalFirmwareImage_DEFAULT
	}
	return *p.OriginalFirmwareImage
}

var DiffMeasuredBootInput_StatusRegisters_DEFAULT int32

func (p *DiffMeasuredBootInput) GetStatusRegisters() int32 {
	if !p.IsSetStatusRegisters() {
		return DiffMeasuredBootInput_StatusRegisters_DEFAULT
	}
	return *p.StatusRegisters
}

var DiffMeasuredBootInput_TPMDevice_DEFAULT int32

func (p *DiffMeasuredBootInput) GetTPMDevice() int32 {
	if !p.IsSetTPMDevice() {
		return DiffMeasuredBootInput_TPMDevice_DEFAULT
	}
	return *p.TPMDevice
}

var DiffMeasuredBootInput_TPMEventLog_DEFAULT int32

func (p *DiffMeasuredBootInput) GetTPMEventLog() int32 {
	if !p.IsSetTPMEventLog() {
		return DiffMeasuredBootInput_TPMEventLog_DEFAULT
	}
	return *p.TPMEventLog
}

var DiffMeasuredBootInput_ActualPCR0_DEFAULT int32

func (p *DiffMeasuredBootInput) GetActualPCR0() int32 {
	if !p.IsSetActualPCR0() {
		return DiffMeasuredBootInput_ActualPCR0_DEFAULT
	}
	return *p.ActualPCR0
}
func (p *DiffMeasuredBootInput) IsSetOriginalFirmwareImage() bool {
	return p.OriginalFirmwareImage != nil
}

func (p *DiffMeasuredBootInput) IsSetStatusRegisters() bool {
	return p.StatusRegisters != nil
}

func (p *DiffMeasuredBootInput) IsSetTPMDevice() bool {
	return p.TPMDevice != nil
}

func (p *DiffMeasuredBootInput) IsSetTPMEventLog() bool {
	return p.TPMEventLog != nil
}

func (p *DiffMeasuredBootInput) IsSetActualPCR0() bool {
	return p.ActualPCR0 != nil
}

func (p *DiffMeasuredBootInput) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DiffMeasuredBootInput) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ActualFirmwareImage = v
	}
	return nil
}

func (p *DiffMeasuredBootInput) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.OriginalFirmwareImage = &v
	}
	return nil
}

func (p *DiffMeasuredBootInput) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.StatusRegisters = &v
	}
	return nil
}

func (p *DiffMeasuredBootInput) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.TPMDevice = &v
	}
	return nil
}

func (p *DiffMeasuredBootInput) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.TPMEventLog = &v
	}
	return nil
}

func (p *DiffMeasuredBootInput) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.ActualPCR0 = &v
	}
	return nil
}

func (p *DiffMeasuredBootInput) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "DiffMeasuredBootInput"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DiffMeasuredBootInput) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ActualFirmwareImage", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ActualFirmwareImage: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.ActualFirmwareImage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ActualFirmwareImage (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ActualFirmwareImage: ", p), err)
	}
	return err
}

func (p *DiffMeasuredBootInput) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetOriginalFirmwareImage() {
		if err := oprot.WriteFieldBegin(ctx, "OriginalFirmwareImage", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:OriginalFirmwareImage: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.OriginalFirmwareImage)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.OriginalFirmwareImage (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:OriginalFirmwareImage: ", p), err)
		}
	}
	return err
}

func (p *DiffMeasuredBootInput) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetStatusRegisters() {
		if err := oprot.WriteFieldBegin(ctx, "StatusRegisters", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:StatusRegisters: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.StatusRegisters)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.StatusRegisters (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:StatusRegisters: ", p), err)
		}
	}
	return err
}

func (p *DiffMeasuredBootInput) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTPMDevice() {
		if err := oprot.WriteFieldBegin(ctx, "TPMDevice", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:TPMDevice: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.TPMDevice)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.TPMDevice (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:TPMDevice: ", p), err)
		}
	}
	return err
}

func (p *DiffMeasuredBootInput) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTPMEventLog() {
		if err := oprot.WriteFieldBegin(ctx, "TPMEventLog", thrift.I32, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:TPMEventLog: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.TPMEventLog)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.TPMEventLog (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:TPMEventLog: ", p), err)
		}
	}
	return err
}

func (p *DiffMeasuredBootInput) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetActualPCR0() {
		if err := oprot.WriteFieldBegin(ctx, "ActualPCR0", thrift.I32, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:ActualPCR0: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.ActualPCR0)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ActualPCR0 (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:ActualPCR0: ", p), err)
		}
	}
	return err
}

func (p *DiffMeasuredBootInput) Equals(other *DiffMeasuredBootInput) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.ActualFirmwareImage != other.ActualFirmwareImage {
		return false
	}
	if p.OriginalFirmwareImage != other.OriginalFirmwareImage {
		if p.OriginalFirmwareImage == nil || other.OriginalFirmwareImage == nil {
			return false
		}
		if (*p.OriginalFirmwareImage) != (*other.OriginalFirmwareImage) {
			return false
		}
	}
	if p.StatusRegisters != other.StatusRegisters {
		if p.StatusRegisters == nil || other.StatusRegisters == nil {
			return false
		}
		if (*p.StatusRegisters) != (*other.StatusRegisters) {
			return false
		}
	}
	if p.TPMDevice != other.TPMDevice {
		if p.TPMDevice == nil || other.TPMDevice == nil {
			return false
		}
		if (*p.TPMDevice) != (*other.TPMDevice) {
			return false
		}
	}
	if p.TPMEventLog != other.TPMEventLog {
		if p.TPMEventLog == nil || other.TPMEventLog == nil {
			return false
		}
		if (*p.TPMEventLog) != (*other.TPMEventLog) {
			return false
		}
	}
	if p.ActualPCR0 != other.ActualPCR0 {
		if p.ActualPCR0 == nil || other.ActualPCR0 == nil {
			return false
		}
		if (*p.ActualPCR0) != (*other.ActualPCR0) {
			return false
		}
	}
	return true
}

func (p *DiffMeasuredBootInput) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DiffMeasuredBootInput(%+v)", *p)
}

// Attributes:
//   - ActualFirmwareImage
//   - OriginalFirmwareImage
type IntelACMInput struct {
	ActualFirmwareImage   int32  `thrift:"ActualFirmwareImage,1" db:"ActualFirmwareImage" json:"ActualFirmwareImage"`
	OriginalFirmwareImage *int32 `thrift:"OriginalFirmwareImage,2" db:"OriginalFirmwareImage" json:"OriginalFirmwareImage,omitempty"`
}

func NewIntelACMInput() *IntelACMInput {
	return &IntelACMInput{}
}

func (p *IntelACMInput) GetActualFirmwareImage() int32 {
	return p.ActualFirmwareImage
}

var IntelACMInput_OriginalFirmwareImage_DEFAULT int32

func (p *IntelACMInput) GetOriginalFirmwareImage() int32 {
	if !p.IsSetOriginalFirmwareImage() {
		return IntelACMInput_OriginalFirmwareImage_DEFAULT
	}
	return *p.OriginalFirmwareImage
}
func (p *IntelACMInput) IsSetOriginalFirmwareImage() bool {
	return p.OriginalFirmwareImage != nil
}

func (p *IntelACMInput) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IntelACMInput) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ActualFirmwareImage = v
	}
	return nil
}

func (p *IntelACMInput) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.OriginalFirmwareImage = &v
	}
	return nil
}

func (p *IntelACMInput) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "IntelACMInput"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IntelACMInput) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ActualFirmwareImage", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ActualFirmwareImage: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.ActualFirmwareImage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ActualFirmwareImage (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ActualFirmwareImage: ", p), err)
	}
	return err
}

func (p *IntelACMInput) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetOriginalFirmwareImage() {
		if err := oprot.WriteFieldBegin(ctx, "OriginalFirmwareImage", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:OriginalFirmwareImage: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.OriginalFirmwareImage)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.OriginalFirmwareImage (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:OriginalFirmwareImage: ", p), err)
		}
	}
	return err
}

func (p *IntelACMInput) Equals(other *IntelACMInput) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.ActualFirmwareImage != other.ActualFirmwareImage {
		return false
	}
	if p.OriginalFirmwareImage != other.OriginalFirmwareImage {
		if p.OriginalFirmwareImage == nil || other.OriginalFirmwareImage == nil {
			return false
		}
		if (*p.OriginalFirmwareImage) != (*other.OriginalFirmwareImage) {
			return false
		}
	}
	return true
}

func (p *IntelACMInput) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IntelACMInput(%+v)", *p)
}

// Attributes:
//   - ActualFirmwareImage
//   - OriginalFirmwareImage
//   - StatusRegisters
//   - TPMDevice
//   - TPMEventLog
//   - ExpectedPCR
//   - MeasurementsFlow
type ReproducePCRInput struct {
	ActualFirmwareImage   int32  `thrift:"ActualFirmwareImage,1" db:"ActualFirmwareImage" json:"ActualFirmwareImage"`
	OriginalFirmwareImage *int32 `thrift:"OriginalFirmwareImage,2" db:"OriginalFirmwareImage" json:"OriginalFirmwareImage,omitempty"`
	StatusRegisters       *int32 `thrift:"StatusRegisters,3" db:"StatusRegisters" json:"StatusRegisters,omitempty"`
	TPMDevice             *int32 `thrift:"TPMDevice,4" db:"TPMDevice" json:"TPMDevice,omitempty"`
	TPMEventLog           *int32 `thrift:"TPMEventLog,5" db:"TPMEventLog" json:"TPMEventLog,omitempty"`
	ExpectedPCR           int32  `thrift:"ExpectedPCR,6" db:"ExpectedPCR" json:"ExpectedPCR"`
	MeasurementsFlow      *int32 `thrift:"MeasurementsFlow,7" db:"MeasurementsFlow" json:"MeasurementsFlow,omitempty"`
}

func NewReproducePCRInput() *ReproducePCRInput {
	return &ReproducePCRInput{}
}

func (p *ReproducePCRInput) GetActualFirmwareImage() int32 {
	return p.ActualFirmwareImage
}

var ReproducePCRInput_OriginalFirmwareImage_DEFAULT int32

func (p *ReproducePCRInput) GetOriginalFirmwareImage() int32 {
	if !p.IsSetOriginalFirmwareImage() {
		return ReproducePCRInput_OriginalFirmwareImage_DEFAULT
	}
	return *p.OriginalFirmwareImage
}

var ReproducePCRInput_StatusRegisters_DEFAULT int32

func (p *ReproducePCRInput) GetStatusRegisters() int32 {
	if !p.IsSetStatusRegisters() {
		return ReproducePCRInput_StatusRegisters_DEFAULT
	}
	return *p.StatusRegisters
}

var ReproducePCRInput_TPMDevice_DEFAULT int32

func (p *ReproducePCRInput) GetTPMDevice() int32 {
	if !p.IsSetTPMDevice() {
		return ReproducePCRInput_TPMDevice_DEFAULT
	}
	return *p.TPMDevice
}

var ReproducePCRInput_TPMEventLog_DEFAULT int32

func (p *ReproducePCRInput) GetTPMEventLog() int32 {
	if !p.IsSetTPMEventLog() {
		return ReproducePCRInput_TPMEventLog_DEFAULT
	}
	return *p.TPMEventLog
}

func (p *ReproducePCRInput) GetExpectedPCR() int32 {
	return p.ExpectedPCR
}

var ReproducePCRInput_MeasurementsFlow_DEFAULT int32

func (p *ReproducePCRInput) GetMeasurementsFlow() int32 {
	if !p.IsSetMeasurementsFlow() {
		return ReproducePCRInput_MeasurementsFlow_DEFAULT
	}
	return *p.MeasurementsFlow
}
func (p *ReproducePCRInput) IsSetOriginalFirmwareImage() bool {
	return p.OriginalFirmwareImage != nil
}

func (p *ReproducePCRInput) IsSetStatusRegisters() bool {
	return p.StatusRegisters != nil
}

func (p *ReproducePCRInput) IsSetTPMDevice() bool {
	return p.TPMDevice != nil
}

func (p *ReproducePCRInput) IsSetTPMEventLog() bool {
	return p.TPMEventLog != nil
}

func (p *ReproducePCRInput) IsSetMeasurementsFlow() bool {
	return p.MeasurementsFlow != nil
}

func (p *ReproducePCRInput) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReproducePCRInput) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ActualFirmwareImage = v
	}
	return nil
}

func (p *ReproducePCRInput) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.OriginalFirmwareImage = &v
	}
	return nil
}

func (p *ReproducePCRInput) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.StatusRegisters = &v
	}
	return nil
}

func (p *ReproducePCRInput) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.TPMDevice = &v
	}
	return nil
}

func (p *ReproducePCRInput) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.TPMEventLog = &v
	}
	return nil
}

func (p *ReproducePCRInput) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.ExpectedPCR = v
	}
	return nil
}

func (p *ReproducePCRInput) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.MeasurementsFlow = &v
	}
	return nil
}

func (p *ReproducePCRInput) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ReproducePCRInput"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField7(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReproducePCRInput) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ActualFirmwareImage", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ActualFirmwareImage: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.ActualFirmwareImage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ActualFirmwareImage (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ActualFirmwareImage: ", p), err)
	}
	return err
}

func (p *ReproducePCRInput) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetOriginalFirmwareImage() {
		if err := oprot.WriteFieldBegin(ctx, "OriginalFirmwareImage", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:OriginalFirmwareImage: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.OriginalFirmwareImage)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.OriginalFirmwareImage (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:OriginalFirmwareImage: ", p), err)
		}
	}
	return err
}

func (p *ReproducePCRInput) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetStatusRegisters() {
		if err := oprot.WriteFieldBegin(ctx, "StatusRegisters", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:StatusRegisters: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.StatusRegisters)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.StatusRegisters (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:StatusRegisters: ", p), err)
		}
	}
	return err
}

func (p *ReproducePCRInput) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTPMDevice() {
		if err := oprot.WriteFieldBegin(ctx, "TPMDevice", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:TPMDevice: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.TPMDevice)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.TPMDevice (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:TPMDevice: ", p), err)
		}
	}
	return err
}

func (p *ReproducePCRInput) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTPMEventLog() {
		if err := oprot.WriteFieldBegin(ctx, "TPMEventLog", thrift.I32, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:TPMEventLog: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.TPMEventLog)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.TPMEventLog (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:TPMEventLog: ", p), err)
		}
	}
	return err
}

func (p *ReproducePCRInput) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ExpectedPCR", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:ExpectedPCR: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.ExpectedPCR)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ExpectedPCR (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:ExpectedPCR: ", p), err)
	}
	return err
}

func (p *ReproducePCRInput) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetMeasurementsFlow() {
		if err := oprot.WriteFieldBegin(ctx, "MeasurementsFlow", thrift.I32, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:MeasurementsFlow: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.MeasurementsFlow)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.MeasurementsFlow (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:MeasurementsFlow: ", p), err)
		}
	}
	return err
}

func (p *ReproducePCRInput) Equals(other *ReproducePCRInput) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.ActualFirmwareImage != other.ActualFirmwareImage {
		return false
	}
	if p.OriginalFirmwareImage != other.OriginalFirmwareImage {
		if p.OriginalFirmwareImage == nil || other.OriginalFirmwareImage == nil {
			return false
		}
		if (*p.OriginalFirmwareImage) != (*other.OriginalFirmwareImage) {
			return false
		}
	}
	if p.StatusRegisters != other.StatusRegisters {
		if p.StatusRegisters == nil || other.StatusRegisters == nil {
			return false
		}
		if (*p.StatusRegisters) != (*other.StatusRegisters) {
			return false
		}
	}
	if p.TPMDevice != other.TPMDevice {
		if p.TPMDevice == nil || other.TPMDevice == nil {
			return false
		}
		if (*p.TPMDevice) != (*other.TPMDevice) {
			return false
		}
	}
	if p.TPMEventLog != other.TPMEventLog {
		if p.TPMEventLog == nil || other.TPMEventLog == nil {
			return false
		}
		if (*p.TPMEventLog) != (*other.TPMEventLog) {
			return false
		}
	}
	if p.ExpectedPCR != other.ExpectedPCR {
		return false
	}
	if p.MeasurementsFlow != other.MeasurementsFlow {
		if p.MeasurementsFlow == nil || other.MeasurementsFlow == nil {
			return false
		}
		if (*p.MeasurementsFlow) != (*other.MeasurementsFlow) {
			return false
		}
	}
	return true
}

func (p *ReproducePCRInput) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReproducePCRInput(%+v)", *p)
}

// Attributes:
//   - ActualFirmwareImage
type PSPSignatureInput struct {
	ActualFirmwareImage int32 `thrift:"ActualFirmwareImage,1" db:"ActualFirmwareImage" json:"ActualFirmwareImage"`
}

func NewPSPSignatureInput() *PSPSignatureInput {
	return &PSPSignatureInput{}
}

func (p *PSPSignatureInput) GetActualFirmwareImage() int32 {
	return p.ActualFirmwareImage
}
func (p *PSPSignatureInput) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PSPSignatureInput) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ActualFirmwareImage = v
	}
	return nil
}

func (p *PSPSignatureInput) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "PSPSignatureInput"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PSPSignatureInput) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ActualFirmwareImage", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ActualFirmwareImage: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.ActualFirmwareImage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ActualFirmwareImage (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ActualFirmwareImage: ", p), err)
	}
	return err
}

func (p *PSPSignatureInput) Equals(other *PSPSignatureInput) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.ActualFirmwareImage != other.ActualFirmwareImage {
		return false
	}
	return true
}

func (p *PSPSignatureInput) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PSPSignatureInput(%+v)", *p)
}

// Attributes:
//   - ActualFirmwareImage
type BIOSRTMVolumeInput struct {
	ActualFirmwareImage int32 `thrift:"ActualFirmwareImage,1" db:"ActualFirmwareImage" json:"ActualFirmwareImage"`
}

func NewBIOSRTMVolumeInput() *BIOSRTMVolumeInput {
	return &BIOSRTMVolumeInput{}
}

func (p *BIOSRTMVolumeInput) GetActualFirmwareImage() int32 {
	return p.ActualFirmwareImage
}
func (p *BIOSRTMVolumeInput) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BIOSRTMVolumeInput) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ActualFirmwareImage = v
	}
	return nil
}

func (p *BIOSRTMVolumeInput) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "BIOSRTMVolumeInput"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BIOSRTMVolumeInput) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ActualFirmwareImage", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ActualFirmwareImage: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.ActualFirmwareImage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ActualFirmwareImage (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ActualFirmwareImage: ", p), err)
	}
	return err
}

func (p *BIOSRTMVolumeInput) Equals(other *BIOSRTMVolumeInput) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.ActualFirmwareImage != other.ActualFirmwareImage {
		return false
	}
	return true
}

func (p *BIOSRTMVolumeInput) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BIOSRTMVolumeInput(%+v)", *p)
}

// Attributes:
//   - ActualFirmwareImage
type APCBSecurityTokensInput struct {
	ActualFirmwareImage int32 `thrift:"ActualFirmwareImage,1" db:"ActualFirmwareImage" json:"ActualFirmwareImage"`
}

func NewAPCBSecurityTokensInput() *APCBSecurityTokensInput {
	return &APCBSecurityTokensInput{}
}

func (p *APCBSecurityTokensInput) GetActualFirmwareImage() int32 {
	return p.ActualFirmwareImage
}
func (p *APCBSecurityTokensInput) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *APCBSecurityTokensInput) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ActualFirmwareImage = v
	}
	return nil
}

func (p *APCBSecurityTokensInput) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "APCBSecurityTokensInput"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *APCBSecurityTokensInput) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ActualFirmwareImage", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ActualFirmwareImage: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.ActualFirmwareImage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ActualFirmwareImage (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ActualFirmwareImage: ", p), err)
	}
	return err
}

func (p *APCBSecurityTokensInput) Equals(other *APCBSecurityTokensInput) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.ActualFirmwareImage != other.ActualFirmwareImage {
		return false
	}
	return true
}

func (p *APCBSecurityTokensInput) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("APCBSecurityTokensInput(%+v)", *p)
}

// Attributes:
//   - DiffMeasuredBoot
//   - IntelACM
//   - ReproducePCR
//   - PSPSignature
//   - BIOSRTMVolume
//   - APCBSecurityTokens
type AnalyzerInput struct {
	DiffMeasuredBoot   *DiffMeasuredBootInput   `thrift:"DiffMeasuredBoot,1" db:"DiffMeasuredBoot" json:"DiffMeasuredBoot,omitempty"`
	IntelACM           *IntelACMInput           `thrift:"IntelACM,2" db:"IntelACM" json:"IntelACM,omitempty"`
	ReproducePCR       *ReproducePCRInput       `thrift:"ReproducePCR,3" db:"ReproducePCR" json:"ReproducePCR,omitempty"`
	PSPSignature       *PSPSignatureInput       `thrift:"PSPSignature,4" db:"PSPSignature" json:"PSPSignature,omitempty"`
	BIOSRTMVolume      *BIOSRTMVolumeInput      `thrift:"BIOSRTMVolume,5" db:"BIOSRTMVolume" json:"BIOSRTMVolume,omitempty"`
	APCBSecurityTokens *APCBSecurityTokensInput `thrift:"APCBSecurityTokens,6" db:"APCBSecurityTokens" json:"APCBSecurityTokens,omitempty"`
}

func NewAnalyzerInput() *AnalyzerInput {
	return &AnalyzerInput{}
}

var AnalyzerInput_DiffMeasuredBoot_DEFAULT *DiffMeasuredBootInput

func (p *AnalyzerInput) GetDiffMeasuredBoot() *DiffMeasuredBootInput {
	if !p.IsSetDiffMeasuredBoot() {
		return AnalyzerInput_DiffMeasuredBoot_DEFAULT
	}
	return p.DiffMeasuredBoot
}

var AnalyzerInput_IntelACM_DEFAULT *IntelACMInput

func (p *AnalyzerInput) GetIntelACM() *IntelACMInput {
	if !p.IsSetIntelACM() {
		return AnalyzerInput_IntelACM_DEFAULT
	}
	return p.IntelACM
}

var AnalyzerInput_ReproducePCR_DEFAULT *ReproducePCRInput

func (p *AnalyzerInput) GetReproducePCR() *ReproducePCRInput {
	if !p.IsSetReproducePCR() {
		return AnalyzerInput_ReproducePCR_DEFAULT
	}
	return p.ReproducePCR
}

var AnalyzerInput_PSPSignature_DEFAULT *PSPSignatureInput

func (p *AnalyzerInput) GetPSPSignature() *PSPSignatureInput {
	if !p.IsSetPSPSignature() {
		return AnalyzerInput_PSPSignature_DEFAULT
	}
	return p.PSPSignature
}

var AnalyzerInput_BIOSRTMVolume_DEFAULT *BIOSRTMVolumeInput

func (p *AnalyzerInput) GetBIOSRTMVolume() *BIOSRTMVolumeInput {
	if !p.IsSetBIOSRTMVolume() {
		return AnalyzerInput_BIOSRTMVolume_DEFAULT
	}
	return p.BIOSRTMVolume
}

var AnalyzerInput_APCBSecurityTokens_DEFAULT *APCBSecurityTokensInput

func (p *AnalyzerInput) GetAPCBSecurityTokens() *APCBSecurityTokensInput {
	if !p.IsSetAPCBSecurityTokens() {
		return AnalyzerInput_APCBSecurityTokens_DEFAULT
	}
	return p.APCBSecurityTokens
}
func (p *AnalyzerInput) CountSetFieldsAnalyzerInput() int {
	count := 0
	if p.IsSetDiffMeasuredBoot() {
		count++
	}
	if p.IsSetIntelACM() {
		count++
	}
	if p.IsSetReproducePCR() {
		count++
	}
	if p.IsSetPSPSignature() {
		count++
	}
	if p.IsSetBIOSRTMVolume() {
		count++
	}
	if p.IsSetAPCBSecurityTokens() {
		count++
	}
	return count

}

func (p *AnalyzerInput) IsSetDiffMeasuredBoot() bool {
	return p.DiffMeasuredBoot != nil
}

func (p *AnalyzerInput) IsSetIntelACM() bool {
	return p.IntelACM != nil
}

func (p *AnalyzerInput) IsSetReproducePCR() bool {
	return p.ReproducePCR != nil
}

func (p *AnalyzerInput) IsSetPSPSignature() bool {
	return p.PSPSignature != nil
}

func (p *AnalyzerInput) IsSetBIOSRTMVolume() bool {
	return p.BIOSRTMVolume != nil
}

func (p *AnalyzerInput) IsSetAPCBSecurityTokens() bool {
	return p.APCBSecurityTokens != nil
}

func (p *AnalyzerInput) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AnalyzerInput) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.DiffMeasuredBoot = &DiffMeasuredBootInput{}
	if err := p.DiffMeasuredBoot.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DiffMeasuredBoot), err)
	}
	return nil
}

func (p *AnalyzerInput) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.IntelACM = &IntelACMInput{}
	if err := p.IntelACM.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IntelACM), err)
	}
	return nil
}

func (p *AnalyzerInput) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	p.ReproducePCR = &ReproducePCRInput{}
	if err := p.ReproducePCR.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ReproducePCR), err)
	}
	return nil
}

func (p *AnalyzerInput) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	p.PSPSignature = &PSPSignatureInput{}
	if err := p.PSPSignature.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PSPSignature), err)
	}
	return nil
}

func (p *AnalyzerInput) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	p.BIOSRTMVolume = &BIOSRTMVolumeInput{}
	if err := p.BIOSRTMVolume.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BIOSRTMVolume), err)
	}
	return nil
}

func (p *AnalyzerInput) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	p.APCBSecurityTokens = &APCBSecurityTokensInput{}
	if err := p.APCBSecurityTokens.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.APCBSecurityTokens), err)
	}
	return nil
}

func (p *AnalyzerInput) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if c := p.CountSetFieldsAnalyzerInput(); c != 1 {
		return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
	}
	if err := oprot.WriteStructBegin(ctx, "AnalyzerInput"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AnalyzerInput) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetDiffMeasuredBoot() {
		if err := oprot.WriteFieldBegin(ctx, "DiffMeasuredBoot", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:DiffMeasuredBoot: ", p), err)
		}
		if err := p.DiffMeasuredBoot.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DiffMeasuredBoot), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:DiffMeasuredBoot: ", p), err)
		}
	}
	return err
}

func (p *AnalyzerInput) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetIntelACM() {
		if err := oprot.WriteFieldBegin(ctx, "IntelACM", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:IntelACM: ", p), err)
		}
		if err := p.IntelACM.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IntelACM), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:IntelACM: ", p), err)
		}
	}
	return err
}

func (p *AnalyzerInput) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetReproducePCR() {
		if err := oprot.WriteFieldBegin(ctx, "ReproducePCR", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ReproducePCR: ", p), err)
		}
		if err := p.ReproducePCR.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ReproducePCR), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ReproducePCR: ", p), err)
		}
	}
	return err
}

func (p *AnalyzerInput) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetPSPSignature() {
		if err := oprot.WriteFieldBegin(ctx, "PSPSignature", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:PSPSignature: ", p), err)
		}
		if err := p.PSPSignature.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PSPSignature), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:PSPSignature: ", p), err)
		}
	}
	return err
}

func (p *AnalyzerInput) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetBIOSRTMVolume() {
		if err := oprot.WriteFieldBegin(ctx, "BIOSRTMVolume", thrift.STRUCT, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:BIOSRTMVolume: ", p), err)
		}
		if err := p.BIOSRTMVolume.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BIOSRTMVolume), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:BIOSRTMVolume: ", p), err)
		}
	}
	return err
}

func (p *AnalyzerInput) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAPCBSecurityTokens() {
		if err := oprot.WriteFieldBegin(ctx, "APCBSecurityTokens", thrift.STRUCT, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:APCBSecurityTokens: ", p), err)
		}
		if err := p.APCBSecurityTokens.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.APCBSecurityTokens), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:APCBSecurityTokens: ", p), err)
		}
	}
	return err
}

func (p *AnalyzerInput) Equals(other *AnalyzerInput) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.DiffMeasuredBoot.Equals(other.DiffMeasuredBoot) {
		return false
	}
	if !p.IntelACM.Equals(other.IntelACM) {
		return false
	}
	if !p.ReproducePCR.Equals(other.ReproducePCR) {
		return false
	}
	if !p.PSPSignature.Equals(other.PSPSignature) {
		return false
	}
	if !p.BIOSRTMVolume.Equals(other.BIOSRTMVolume) {
		return false
	}
	if !p.APCBSecurityTokens.Equals(other.APCBSecurityTokens) {
		return false
	}
	return true
}

func (p *AnalyzerInput) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AnalyzerInput(%+v)", *p)
}

// Attributes:
//   - HostInfo
//   - Artifacts
//   - Analyzers
type AnalyzeRequest struct {
	HostInfo  *HostInfo        `thrift:"HostInfo,1" db:"HostInfo" json:"HostInfo,omitempty"`
	Artifacts []*Artifact      `thrift:"Artifacts,2" db:"Artifacts" json:"Artifacts"`
	Analyzers []*AnalyzerInput `thrift:"Analyzers,3" db:"Analyzers" json:"Analyzers"`
}

func NewAnalyzeRequest() *AnalyzeRequest {
	return &AnalyzeRequest{}
}

var AnalyzeRequest_HostInfo_DEFAULT *HostInfo

func (p *AnalyzeRequest) GetHostInfo() *HostInfo {
	if !p.IsSetHostInfo() {
		return AnalyzeRequest_HostInfo_DEFAULT
	}
	return p.HostInfo
}

func (p *AnalyzeRequest) GetArtifacts() []*Artifact {
	return p.Artifacts
}

func (p *AnalyzeRequest) GetAnalyzers() []*AnalyzerInput {
	return p.Analyzers
}
func (p *AnalyzeRequest) IsSetHostInfo() bool {
	return p.HostInfo != nil
}

func (p *AnalyzeRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AnalyzeRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.HostInfo = &HostInfo{}
	if err := p.HostInfo.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.HostInfo), err)
	}
	return nil
}

func (p *AnalyzeRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Artifact, 0, size)
	p.Artifacts = tSlice
	for i := 0; i < size; i++ {
		_elem10 := &Artifact{}
		if err := _elem10.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
		}
		p.Artifacts = append(p.Artifacts, _elem10)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AnalyzeRequest) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*AnalyzerInput, 0, size)
	p.Analyzers = tSlice
	for i := 0; i < size; i++ {
		_elem11 := &AnalyzerInput{}
		if err := _elem11.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem11), err)
		}
		p.Analyzers = append(p.Analyzers, _elem11)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AnalyzeRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AnalyzeRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AnalyzeRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetHostInfo() {
		if err := oprot.WriteFieldBegin(ctx, "HostInfo", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:HostInfo: ", p), err)
		}
		if err := p.HostInfo.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.HostInfo), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:HostInfo: ", p), err)
		}
	}
	return err
}

func (p *AnalyzeRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Artifacts", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Artifacts: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Artifacts)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Artifacts {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Artifacts: ", p), err)
	}
	return err
}

func (p *AnalyzeRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Analyzers", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Analyzers: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Analyzers)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Analyzers {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Analyzers: ", p), err)
	}
	return err
}

func (p *AnalyzeRequest) Equals(other *AnalyzeRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.HostInfo.Equals(other.HostInfo) {
		return false
	}
	if len(p.Artifacts) != len(other.Artifacts) {
		return false
	}
	for i, _tgt := range p.Artifacts {
		_src12 := other.Artifacts[i]
		if !_tgt.Equals(_src12) {
			return false
		}
	}
	if len(p.Analyzers) != len(other.Analyzers) {
		return false
	}
	for i, _tgt := range p.Analyzers {
		_src13 := other.Analyzers[i]
		if !_tgt.Equals(_src13) {
			return false
		}
	}
	return true
}

func (p *AnalyzeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AnalyzeRequest(%+v)", *p)
}

// Attributes:
//   - ErrorClass
//   - Description
type Error struct {
	ErrorClass  ErrorClass `thrift:"ErrorClass,1" db:"ErrorClass" json:"ErrorClass"`
	Description string     `thrift:"Description,2" db:"Description" json:"Description"`
}

func NewError() *Error {
	return &Error{}
}

func (p *Error) GetErrorClass() ErrorClass {
	return p.ErrorClass
}

func (p *Error) GetDescription() string {
	return p.Description
}
func (p *Error) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Error) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := ErrorClass(v)
		p.ErrorClass = temp
	}
	return nil
}

func (p *Error) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Description = v
	}
	return nil
}

func (p *Error) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Error"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Error) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ErrorClass", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ErrorClass: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.ErrorClass)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ErrorClass (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ErrorClass: ", p), err)
	}
	return err
}

func (p *Error) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Description", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Description: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Description)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Description (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Description: ", p), err)
	}
	return err
}

func (p *Error) Equals(other *Error) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.ErrorClass != other.ErrorClass {
		return false
	}
	if p.Description != other.Description {
		return false
	}
	return true
}

func (p *Error) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Error(%+v)", *p)
}

// Attributes:
//   - AnalyzerName
//   - AnalyzerOutcome
//   - ProcessedInputJSON
type AnalyzerResult_ struct {
	AnalyzerName       string           `thrift:"AnalyzerName,1" db:"AnalyzerName" json:"AnalyzerName"`
	AnalyzerOutcome    *AnalyzerOutcome `thrift:"AnalyzerOutcome,2" db:"AnalyzerOutcome" json:"AnalyzerOutcome"`
	ProcessedInputJSON *string          `thrift:"ProcessedInputJSON,3" db:"ProcessedInputJSON" json:"ProcessedInputJSON,omitempty"`
}

func NewAnalyzerResult_() *AnalyzerResult_ {
	return &AnalyzerResult_{}
}

func (p *AnalyzerResult_) GetAnalyzerName() string {
	return p.AnalyzerName
}

var AnalyzerResult__AnalyzerOutcome_DEFAULT *AnalyzerOutcome

func (p *AnalyzerResult_) GetAnalyzerOutcome() *AnalyzerOutcome {
	if !p.IsSetAnalyzerOutcome() {
		return AnalyzerResult__AnalyzerOutcome_DEFAULT
	}
	return p.AnalyzerOutcome
}

var AnalyzerResult__ProcessedInputJSON_DEFAULT string

func (p *AnalyzerResult_) GetProcessedInputJSON() string {
	if !p.IsSetProcessedInputJSON() {
		return AnalyzerResult__ProcessedInputJSON_DEFAULT
	}
	return *p.ProcessedInputJSON
}
func (p *AnalyzerResult_) IsSetAnalyzerOutcome() bool {
	return p.AnalyzerOutcome != nil
}

func (p *AnalyzerResult_) IsSetProcessedInputJSON() bool {
	return p.ProcessedInputJSON != nil
}

func (p *AnalyzerResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AnalyzerResult_) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AnalyzerName = v
	}
	return nil
}

func (p *AnalyzerResult_) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.AnalyzerOutcome = &AnalyzerOutcome{}
	if err := p.AnalyzerOutcome.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AnalyzerOutcome), err)
	}
	return nil
}

func (p *AnalyzerResult_) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ProcessedInputJSON = &v
	}
	return nil
}

func (p *AnalyzerResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AnalyzerResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AnalyzerResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "AnalyzerName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:AnalyzerName: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.AnalyzerName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.AnalyzerName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:AnalyzerName: ", p), err)
	}
	return err
}

func (p *AnalyzerResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "AnalyzerOutcome", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:AnalyzerOutcome: ", p), err)
	}
	if err := p.AnalyzerOutcome.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AnalyzerOutcome), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:AnalyzerOutcome: ", p), err)
	}
	return err
}

func (p *AnalyzerResult_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetProcessedInputJSON() {
		if err := oprot.WriteFieldBegin(ctx, "ProcessedInputJSON", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ProcessedInputJSON: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.ProcessedInputJSON)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ProcessedInputJSON (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ProcessedInputJSON: ", p), err)
		}
	}
	return err
}

func (p *AnalyzerResult_) Equals(other *AnalyzerResult_) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.AnalyzerName != other.AnalyzerName {
		return false
	}
	if !p.AnalyzerOutcome.Equals(other.AnalyzerOutcome) {
		return false
	}
	if p.ProcessedInputJSON != other.ProcessedInputJSON {
		if p.ProcessedInputJSON == nil || other.ProcessedInputJSON == nil {
			return false
		}
		if (*p.ProcessedInputJSON) != (*other.ProcessedInputJSON) {
			return false
		}
	}
	return true
}

func (p *AnalyzerResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AnalyzerResult_(%+v)", *p)
}

// Attributes:
//   - Report
//   - Err
type AnalyzerOutcome struct {
	Report *analyzerreport.AnalyzerReport `thrift:"Report,1" db:"Report" json:"Report,omitempty"`
	Err    *Error                         `thrift:"Err,2" db:"Err" json:"Err,omitempty"`
}

func NewAnalyzerOutcome() *AnalyzerOutcome {
	return &AnalyzerOutcome{}
}

var AnalyzerOutcome_Report_DEFAULT *analyzerreport.AnalyzerReport

func (p *AnalyzerOutcome) GetReport() *analyzerreport.AnalyzerReport {
	if !p.IsSetReport() {
		return AnalyzerOutcome_Report_DEFAULT
	}
	return p.Report
}

var AnalyzerOutcome_Err_DEFAULT *Error

func (p *AnalyzerOutcome) GetErr() *Error {
	if !p.IsSetErr() {
		return AnalyzerOutcome_Err_DEFAULT
	}
	return p.Err
}
func (p *AnalyzerOutcome) CountSetFieldsAnalyzerOutcome() int {
	count := 0
	if p.IsSetReport() {
		count++
	}
	if p.IsSetErr() {
		count++
	}
	return count

}

func (p *AnalyzerOutcome) IsSetReport() bool {
	return p.Report != nil
}

func (p *AnalyzerOutcome) IsSetErr() bool {
	return p.Err != nil
}

func (p *AnalyzerOutcome) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AnalyzerOutcome) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Report = &analyzerreport.AnalyzerReport{}
	if err := p.Report.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Report), err)
	}
	return nil
}

func (p *AnalyzerOutcome) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Err = &Error{}
	if err := p.Err.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
	}
	return nil
}

func (p *AnalyzerOutcome) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if c := p.CountSetFieldsAnalyzerOutcome(); c != 1 {
		return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
	}
	if err := oprot.WriteStructBegin(ctx, "AnalyzerOutcome"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AnalyzerOutcome) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetReport() {
		if err := oprot.WriteFieldBegin(ctx, "Report", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Report: ", p), err)
		}
		if err := p.Report.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Report), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Report: ", p), err)
		}
	}
	return err
}

func (p *AnalyzerOutcome) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err := oprot.WriteFieldBegin(ctx, "Err", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Err: ", p), err)
		}
		if err := p.Err.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Err: ", p), err)
		}
	}
	return err
}

func (p *AnalyzerOutcome) Equals(other *AnalyzerOutcome) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.Report.Equals(other.Report) {
		return false
	}
	if !p.Err.Equals(other.Err) {
		return false
	}
	return true
}

func (p *AnalyzerOutcome) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AnalyzerOutcome(%+v)", *p)
}

// Attributes:
//   - JobID
//   - Results
type AnalyzeResult_ struct {
	JobID   []byte             `thrift:"JobID,1" db:"JobID" json:"JobID"`
	Results []*AnalyzerResult_ `thrift:"Results,2" db:"Results" json:"Results"`
}

func NewAnalyzeResult_() *AnalyzeResult_ {
	return &AnalyzeResult_{}
}

func (p *AnalyzeResult_) GetJobID() []byte {
	return p.JobID
}

func (p *AnalyzeResult_) GetResults() []*AnalyzerResult_ {
	return p.Results
}
func (p *AnalyzeResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AnalyzeResult_) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.JobID = v
	}
	return nil
}

func (p *AnalyzeResult_) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*AnalyzerResult_, 0, size)
	p.Results = tSlice
	for i := 0; i < size; i++ {
		_elem14 := &AnalyzerResult_{}
		if err := _elem14.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem14), err)
		}
		p.Results = append(p.Results, _elem14)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AnalyzeResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AnalyzeResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AnalyzeResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "JobID", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:JobID: ", p), err)
	}
	if err := oprot.WriteBinary(ctx, p.JobID); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.JobID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:JobID: ", p), err)
	}
	return err
}

func (p *AnalyzeResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Results", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Results: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Results)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Results {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Results: ", p), err)
	}
	return err
}

func (p *AnalyzeResult_) Equals(other *AnalyzeResult_) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if bytes.Compare(p.JobID, other.JobID) != 0 {
		return false
	}
	if len(p.Results) != len(other.Results) {
		return false
	}
	for i, _tgt := range p.Results {
		_src15 := other.Results[i]
		if !_tgt.Equals(_src15) {
			return false
		}
	}
	return true
}

func (p *AnalyzeResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AnalyzeResult_(%+v)", *p)
}

// Attributes:
//   - Firmwares
type CheckFirmwareVersionRequest struct {
	Firmwares []*FirmwareVersion `thrift:"firmwares,1" db:"firmwares" json:"firmwares"`
}

func NewCheckFirmwareVersionRequest() *CheckFirmwareVersionRequest {
	return &CheckFirmwareVersionRequest{}
}

func (p *CheckFirmwareVersionRequest) GetFirmwares() []*FirmwareVersion {
	return p.Firmwares
}
func (p *CheckFirmwareVersionRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CheckFirmwareVersionRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*FirmwareVersion, 0, size)
	p.Firmwares = tSlice
	for i := 0; i < size; i++ {
		_elem16 := &FirmwareVersion{}
		if err := _elem16.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem16), err)
		}
		p.Firmwares = append(p.Firmwares, _elem16)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *CheckFirmwareVersionRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "CheckFirmwareVersionRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CheckFirmwareVersionRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "firmwares", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:firmwares: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Firmwares)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Firmwares {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:firmwares: ", p), err)
	}
	return err
}

func (p *CheckFirmwareVersionRequest) Equals(other *CheckFirmwareVersionRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.Firmwares) != len(other.Firmwares) {
		return false
	}
	for i, _tgt := range p.Firmwares {
		_src17 := other.Firmwares[i]
		if !_tgt.Equals(_src17) {
			return false
		}
	}
	return true
}

func (p *CheckFirmwareVersionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckFirmwareVersionRequest(%+v)", *p)
}

// Attributes:
//   - ExistStatus
type CheckFirmwareVersionResult_ struct {
	ExistStatus []bool `thrift:"existStatus,1" db:"existStatus" json:"existStatus"`
}

func NewCheckFirmwareVersionResult_() *CheckFirmwareVersionResult_ {
	return &CheckFirmwareVersionResult_{}
}

func (p *CheckFirmwareVersionResult_) GetExistStatus() []bool {
	return p.ExistStatus
}
func (p *CheckFirmwareVersionResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CheckFirmwareVersionResult_) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]bool, 0, size)
	p.ExistStatus = tSlice
	for i := 0; i < size; i++ {
		var _elem18 bool
		if v, err := iprot.ReadBool(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem18 = v
		}
		p.ExistStatus = append(p.ExistStatus, _elem18)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *CheckFirmwareVersionResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "CheckFirmwareVersionResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CheckFirmwareVersionResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "existStatus", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:existStatus: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.BOOL, len(p.ExistStatus)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ExistStatus {
		if err := oprot.WriteBool(ctx, bool(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:existStatus: ", p), err)
	}
	return err
}

func (p *CheckFirmwareVersionResult_) Equals(other *CheckFirmwareVersionResult_) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.ExistStatus) != len(other.ExistStatus) {
		return false
	}
	for i, _tgt := range p.ExistStatus {
		_src19 := other.ExistStatus[i]
		if _tgt != _src19 {
			return false
		}
	}
	return true
}

func (p *CheckFirmwareVersionResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckFirmwareVersionResult_(%+v)", *p)
}

type AttestationFailureAnalyzerService interface {
	// Parameters:
	//  - Request
	SearchFirmware(ctx context.Context, request *SearchFirmwareRequest) (r *SearchFirmwareResult_, err error)
	// Parameters:
	//  - Request
	SearchReport(ctx context.Context, request *SearchReportRequest) (r *SearchReportResult_, err error)
	// Parameters:
	//  - Request
	Analyze(ctx context.Context, request *AnalyzeRequest) (r *AnalyzeResult_, err error)
	// Parameters:
	//  - Request
	CheckFirmwareVersion(ctx context.Context, request *CheckFirmwareVersionRequest) (r *CheckFirmwareVersionResult_, err error)
}

type AttestationFailureAnalyzerServiceClient struct {
	c    thrift.TClient
	meta thrift.ResponseMeta
}

func NewAttestationFailureAnalyzerServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *AttestationFailureAnalyzerServiceClient {
	return &AttestationFailureAnalyzerServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewAttestationFailureAnalyzerServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *AttestationFailureAnalyzerServiceClient {
	return &AttestationFailureAnalyzerServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewAttestationFailureAnalyzerServiceClient(c thrift.TClient) *AttestationFailureAnalyzerServiceClient {
	return &AttestationFailureAnalyzerServiceClient{
		c: c,
	}
}

func (p *AttestationFailureAnalyzerServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *AttestationFailureAnalyzerServiceClient) LastResponseMeta_() thrift.ResponseMeta {
	return p.meta
}

func (p *AttestationFailureAnalyzerServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
	p.meta = meta
}

// Parameters:
//   - Request
func (p *AttestationFailureAnalyzerServiceClient) SearchFirmware(ctx context.Context, request *SearchFirmwareRequest) (r *SearchFirmwareResult_, err error) {
	var _args20 AttestationFailureAnalyzerServiceSearchFirmwareArgs
	_args20.Request = request
	var _result21 AttestationFailureAnalyzerServiceSearchFirmwareResult
	var meta thrift.ResponseMeta
	meta, err = p.Client_().Call(ctx, "SearchFirmware", &_args20, &_result21)
	p.SetLastResponseMeta_(meta)
	if err != nil {
		return
	}
	return _result21.GetSuccess(), nil
}

// Parameters:
//   - Request
func (p *AttestationFailureAnalyzerServiceClient) SearchReport(ctx context.Context, request *SearchReportRequest) (r *SearchReportResult_, err error) {
	var _args22 AttestationFailureAnalyzerServiceSearchReportArgs
	_args22.Request = request
	var _result23 AttestationFailureAnalyzerServiceSearchReportResult
	var meta thrift.ResponseMeta
	meta, err = p.Client_().Call(ctx, "SearchReport", &_args22, &_result23)
	p.SetLastResponseMeta_(meta)
	if err != nil {
		return
	}
	return _result23.GetSuccess(), nil
}

// Parameters:
//   - Request
func (p *AttestationFailureAnalyzerServiceClient) Analyze(ctx context.Context, request *AnalyzeRequest) (r *AnalyzeResult_, err error) {
	var _args24 AttestationFailureAnalyzerServiceAnalyzeArgs
	_args24.Request = request
	var _result25 AttestationFailureAnalyzerServiceAnalyzeResult
	var meta thrift.ResponseMeta
	meta, err = p.Client_().Call(ctx, "Analyze", &_args24, &_result25)
	p.SetLastResponseMeta_(meta)
	if err != nil {
		return
	}
	return _result25.GetSuccess(), nil
}

// Parameters:
//   - Request
func (p *AttestationFailureAnalyzerServiceClient) CheckFirmwareVersion(ctx context.Context, request *CheckFirmwareVersionRequest) (r *CheckFirmwareVersionResult_, err error) {
	var _args26 AttestationFailureAnalyzerServiceCheckFirmwareVersionArgs
	_args26.Request = request
	var _result27 AttestationFailureAnalyzerServiceCheckFirmwareVersionResult
	var meta thrift.ResponseMeta
	meta, err = p.Client_().Call(ctx, "CheckFirmwareVersion", &_args26, &_result27)
	p.SetLastResponseMeta_(meta)
	if err != nil {
		return
	}
	return _result27.GetSuccess(), nil
}

type AttestationFailureAnalyzerServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      AttestationFailureAnalyzerService
}

func (p *AttestationFailureAnalyzerServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *AttestationFailureAnalyzerServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *AttestationFailureAnalyzerServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewAttestationFailureAnalyzerServiceProcessor(handler AttestationFailureAnalyzerService) *AttestationFailureAnalyzerServiceProcessor {

	self28 := &AttestationFailureAnalyzerServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self28.processorMap["SearchFirmware"] = &attestationFailureAnalyzerServiceProcessorSearchFirmware{handler: handler}
	self28.processorMap["SearchReport"] = &attestationFailureAnalyzerServiceProcessorSearchReport{handler: handler}
	self28.processorMap["Analyze"] = &attestationFailureAnalyzerServiceProcessorAnalyze{handler: handler}
	self28.processorMap["CheckFirmwareVersion"] = &attestationFailureAnalyzerServiceProcessorCheckFirmwareVersion{handler: handler}
	return self28
}

func (p *AttestationFailureAnalyzerServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
	if err2 != nil {
		return false, thrift.WrapTException(err2)
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(ctx, thrift.STRUCT)
	iprot.ReadMessageEnd(ctx)
	x29 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
	x29.Write(ctx, oprot)
	oprot.WriteMessageEnd(ctx)
	oprot.Flush(ctx)
	return false, x29

}

type attestationFailureAnalyzerServiceProcessorSearchFirmware struct {
	handler AttestationFailureAnalyzerService
}

func (p *attestationFailureAnalyzerServiceProcessorSearchFirmware) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AttestationFailureAnalyzerServiceSearchFirmwareArgs{}
	var err2 error
	if err2 = args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "SearchFirmware", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AttestationFailureAnalyzerServiceSearchFirmwareResult{}
	var retval *SearchFirmwareResult_
	if retval, err2 = p.handler.SearchFirmware(ctx, args.Request); err2 != nil {
		tickerCancel()
		if err2 == thrift.ErrAbandonRequest {
			return false, thrift.WrapTException(err2)
		}
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SearchFirmware: "+err2.Error())
		oprot.WriteMessageBegin(ctx, "SearchFirmware", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return true, thrift.WrapTException(err2)
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 = oprot.WriteMessageBegin(ctx, "SearchFirmware", thrift.REPLY, seqId); err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err != nil {
		return
	}
	return true, err
}

type attestationFailureAnalyzerServiceProcessorSearchReport struct {
	handler AttestationFailureAnalyzerService
}

func (p *attestationFailureAnalyzerServiceProcessorSearchReport) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AttestationFailureAnalyzerServiceSearchReportArgs{}
	var err2 error
	if err2 = args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "SearchReport", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AttestationFailureAnalyzerServiceSearchReportResult{}
	var retval *SearchReportResult_
	if retval, err2 = p.handler.SearchReport(ctx, args.Request); err2 != nil {
		tickerCancel()
		if err2 == thrift.ErrAbandonRequest {
			return false, thrift.WrapTException(err2)
		}
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SearchReport: "+err2.Error())
		oprot.WriteMessageBegin(ctx, "SearchReport", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return true, thrift.WrapTException(err2)
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 = oprot.WriteMessageBegin(ctx, "SearchReport", thrift.REPLY, seqId); err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err != nil {
		return
	}
	return true, err
}

type attestationFailureAnalyzerServiceProcessorAnalyze struct {
	handler AttestationFailureAnalyzerService
}

func (p *attestationFailureAnalyzerServiceProcessorAnalyze) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AttestationFailureAnalyzerServiceAnalyzeArgs{}
	var err2 error
	if err2 = args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "Analyze", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AttestationFailureAnalyzerServiceAnalyzeResult{}
	var retval *AnalyzeResult_
	if retval, err2 = p.handler.Analyze(ctx, args.Request); err2 != nil {
		tickerCancel()
		if err2 == thrift.ErrAbandonRequest {
			return false, thrift.WrapTException(err2)
		}
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Analyze: "+err2.Error())
		oprot.WriteMessageBegin(ctx, "Analyze", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return true, thrift.WrapTException(err2)
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 = oprot.WriteMessageBegin(ctx, "Analyze", thrift.REPLY, seqId); err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err != nil {
		return
	}
	return true, err
}

type attestationFailureAnalyzerServiceProcessorCheckFirmwareVersion struct {
	handler AttestationFailureAnalyzerService
}

func (p *attestationFailureAnalyzerServiceProcessorCheckFirmwareVersion) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AttestationFailureAnalyzerServiceCheckFirmwareVersionArgs{}
	var err2 error
	if err2 = args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "CheckFirmwareVersion", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AttestationFailureAnalyzerServiceCheckFirmwareVersionResult{}
	var retval *CheckFirmwareVersionResult_
	if retval, err2 = p.handler.CheckFirmwareVersion(ctx, args.Request); err2 != nil {
		tickerCancel()
		if err2 == thrift.ErrAbandonRequest {
			return false, thrift.WrapTException(err2)
		}
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CheckFirmwareVersion: "+err2.Error())
		oprot.WriteMessageBegin(ctx, "CheckFirmwareVersion", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return true, thrift.WrapTException(err2)
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 = oprot.WriteMessageBegin(ctx, "CheckFirmwareVersion", thrift.REPLY, seqId); err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//   - Request
type AttestationFailureAnalyzerServiceSearchFirmwareArgs struct {
	Request *SearchFirmwareRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewAttestationFailureAnalyzerServiceSearchFirmwareArgs() *AttestationFailureAnalyzerServiceSearchFirmwareArgs {
	return &AttestationFailureAnalyzerServiceSearchFirmwareArgs{}
}

var AttestationFailureAnalyzerServiceSearchFirmwareArgs_Request_DEFAULT *SearchFirmwareRequest

func (p *AttestationFailureAnalyzerServiceSearchFirmwareArgs) GetRequest() *SearchFirmwareRequest {
	if !p.IsSetRequest() {
		return AttestationFailureAnalyzerServiceSearchFirmwareArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *AttestationFailureAnalyzerServiceSearchFirmwareArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *AttestationFailureAnalyzerServiceSearchFirmwareArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AttestationFailureAnalyzerServiceSearchFirmwareArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Request = &SearchFirmwareRequest{}
	if err := p.Request.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *AttestationFailureAnalyzerServiceSearchFirmwareArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SearchFirmware_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AttestationFailureAnalyzerServiceSearchFirmwareArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *AttestationFailureAnalyzerServiceSearchFirmwareArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AttestationFailureAnalyzerServiceSearchFirmwareArgs(%+v)", *p)
}

// Attributes:
//   - Success
type AttestationFailureAnalyzerServiceSearchFirmwareResult struct {
	Success *SearchFirmwareResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAttestationFailureAnalyzerServiceSearchFirmwareResult() *AttestationFailureAnalyzerServiceSearchFirmwareResult {
	return &AttestationFailureAnalyzerServiceSearchFirmwareResult{}
}

var AttestationFailureAnalyzerServiceSearchFirmwareResult_Success_DEFAULT *SearchFirmwareResult_

func (p *AttestationFailureAnalyzerServiceSearchFirmwareResult) GetSuccess() *SearchFirmwareResult_ {
	if !p.IsSetSuccess() {
		return AttestationFailureAnalyzerServiceSearchFirmwareResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AttestationFailureAnalyzerServiceSearchFirmwareResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AttestationFailureAnalyzerServiceSearchFirmwareResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AttestationFailureAnalyzerServiceSearchFirmwareResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &SearchFirmwareResult_{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AttestationFailureAnalyzerServiceSearchFirmwareResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SearchFirmware_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AttestationFailureAnalyzerServiceSearchFirmwareResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AttestationFailureAnalyzerServiceSearchFirmwareResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AttestationFailureAnalyzerServiceSearchFirmwareResult(%+v)", *p)
}

// Attributes:
//   - Request
type AttestationFailureAnalyzerServiceSearchReportArgs struct {
	Request *SearchReportRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewAttestationFailureAnalyzerServiceSearchReportArgs() *AttestationFailureAnalyzerServiceSearchReportArgs {
	return &AttestationFailureAnalyzerServiceSearchReportArgs{}
}

var AttestationFailureAnalyzerServiceSearchReportArgs_Request_DEFAULT *SearchReportRequest

func (p *AttestationFailureAnalyzerServiceSearchReportArgs) GetRequest() *SearchReportRequest {
	if !p.IsSetRequest() {
		return AttestationFailureAnalyzerServiceSearchReportArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *AttestationFailureAnalyzerServiceSearchReportArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *AttestationFailureAnalyzerServiceSearchReportArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AttestationFailureAnalyzerServiceSearchReportArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Request = &SearchReportRequest{}
	if err := p.Request.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *AttestationFailureAnalyzerServiceSearchReportArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SearchReport_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AttestationFailureAnalyzerServiceSearchReportArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *AttestationFailureAnalyzerServiceSearchReportArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AttestationFailureAnalyzerServiceSearchReportArgs(%+v)", *p)
}

// Attributes:
//   - Success
type AttestationFailureAnalyzerServiceSearchReportResult struct {
	Success *SearchReportResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAttestationFailureAnalyzerServiceSearchReportResult() *AttestationFailureAnalyzerServiceSearchReportResult {
	return &AttestationFailureAnalyzerServiceSearchReportResult{}
}

var AttestationFailureAnalyzerServiceSearchReportResult_Success_DEFAULT *SearchReportResult_

func (p *AttestationFailureAnalyzerServiceSearchReportResult) GetSuccess() *SearchReportResult_ {
	if !p.IsSetSuccess() {
		return AttestationFailureAnalyzerServiceSearchReportResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AttestationFailureAnalyzerServiceSearchReportResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AttestationFailureAnalyzerServiceSearchReportResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AttestationFailureAnalyzerServiceSearchReportResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &SearchReportResult_{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AttestationFailureAnalyzerServiceSearchReportResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SearchReport_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AttestationFailureAnalyzerServiceSearchReportResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AttestationFailureAnalyzerServiceSearchReportResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AttestationFailureAnalyzerServiceSearchReportResult(%+v)", *p)
}

// Attributes:
//   - Request
type AttestationFailureAnalyzerServiceAnalyzeArgs struct {
	Request *AnalyzeRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewAttestationFailureAnalyzerServiceAnalyzeArgs() *AttestationFailureAnalyzerServiceAnalyzeArgs {
	return &AttestationFailureAnalyzerServiceAnalyzeArgs{}
}

var AttestationFailureAnalyzerServiceAnalyzeArgs_Request_DEFAULT *AnalyzeRequest

func (p *AttestationFailureAnalyzerServiceAnalyzeArgs) GetRequest() *AnalyzeRequest {
	if !p.IsSetRequest() {
		return AttestationFailureAnalyzerServiceAnalyzeArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *AttestationFailureAnalyzerServiceAnalyzeArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *AttestationFailureAnalyzerServiceAnalyzeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AttestationFailureAnalyzerServiceAnalyzeArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Request = &AnalyzeRequest{}
	if err := p.Request.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *AttestationFailureAnalyzerServiceAnalyzeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Analyze_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AttestationFailureAnalyzerServiceAnalyzeArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *AttestationFailureAnalyzerServiceAnalyzeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AttestationFailureAnalyzerServiceAnalyzeArgs(%+v)", *p)
}

// Attributes:
//   - Success
type AttestationFailureAnalyzerServiceAnalyzeResult struct {
	Success *AnalyzeResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAttestationFailureAnalyzerServiceAnalyzeResult() *AttestationFailureAnalyzerServiceAnalyzeResult {
	return &AttestationFailureAnalyzerServiceAnalyzeResult{}
}

var AttestationFailureAnalyzerServiceAnalyzeResult_Success_DEFAULT *AnalyzeResult_

func (p *AttestationFailureAnalyzerServiceAnalyzeResult) GetSuccess() *AnalyzeResult_ {
	if !p.IsSetSuccess() {
		return AttestationFailureAnalyzerServiceAnalyzeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AttestationFailureAnalyzerServiceAnalyzeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AttestationFailureAnalyzerServiceAnalyzeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AttestationFailureAnalyzerServiceAnalyzeResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AnalyzeResult_{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AttestationFailureAnalyzerServiceAnalyzeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Analyze_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AttestationFailureAnalyzerServiceAnalyzeResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AttestationFailureAnalyzerServiceAnalyzeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AttestationFailureAnalyzerServiceAnalyzeResult(%+v)", *p)
}

// Attributes:
//   - Request
type AttestationFailureAnalyzerServiceCheckFirmwareVersionArgs struct {
	Request *CheckFirmwareVersionRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewAttestationFailureAnalyzerServiceCheckFirmwareVersionArgs() *AttestationFailureAnalyzerServiceCheckFirmwareVersionArgs {
	return &AttestationFailureAnalyzerServiceCheckFirmwareVersionArgs{}
}

var AttestationFailureAnalyzerServiceCheckFirmwareVersionArgs_Request_DEFAULT *CheckFirmwareVersionRequest

func (p *AttestationFailureAnalyzerServiceCheckFirmwareVersionArgs) GetRequest() *CheckFirmwareVersionRequest {
	if !p.IsSetRequest() {
		return AttestationFailureAnalyzerServiceCheckFirmwareVersionArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *AttestationFailureAnalyzerServiceCheckFirmwareVersionArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *AttestationFailureAnalyzerServiceCheckFirmwareVersionArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AttestationFailureAnalyzerServiceCheckFirmwareVersionArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Request = &CheckFirmwareVersionRequest{}
	if err := p.Request.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *AttestationFailureAnalyzerServiceCheckFirmwareVersionArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "CheckFirmwareVersion_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AttestationFailureAnalyzerServiceCheckFirmwareVersionArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *AttestationFailureAnalyzerServiceCheckFirmwareVersionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AttestationFailureAnalyzerServiceCheckFirmwareVersionArgs(%+v)", *p)
}

// Attributes:
//   - Success
type AttestationFailureAnalyzerServiceCheckFirmwareVersionResult struct {
	Success *CheckFirmwareVersionResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAttestationFailureAnalyzerServiceCheckFirmwareVersionResult() *AttestationFailureAnalyzerServiceCheckFirmwareVersionResult {
	return &AttestationFailureAnalyzerServiceCheckFirmwareVersionResult{}
}

var AttestationFailureAnalyzerServiceCheckFirmwareVersionResult_Success_DEFAULT *CheckFirmwareVersionResult_

func (p *AttestationFailureAnalyzerServiceCheckFirmwareVersionResult) GetSuccess() *CheckFirmwareVersionResult_ {
	if !p.IsSetSuccess() {
		return AttestationFailureAnalyzerServiceCheckFirmwareVersionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AttestationFailureAnalyzerServiceCheckFirmwareVersionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AttestationFailureAnalyzerServiceCheckFirmwareVersionResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AttestationFailureAnalyzerServiceCheckFirmwareVersionResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &CheckFirmwareVersionResult_{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AttestationFailureAnalyzerServiceCheckFirmwareVersionResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "CheckFirmwareVersion_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AttestationFailureAnalyzerServiceCheckFirmwareVersionResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AttestationFailureAnalyzerServiceCheckFirmwareVersionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AttestationFailureAnalyzerServiceCheckFirmwareVersionResult(%+v)", *p)
}
