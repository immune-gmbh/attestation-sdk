// Code generated by Thrift Compiler (0.14.0). DO NOT EDIT.

package diffanalysis

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"time"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

type DiffDiagnosis int64

const (
	DiffDiagnosis_Undefined               DiffDiagnosis = 0
	DiffDiagnosis_Match                   DiffDiagnosis = 1
	DiffDiagnosis_UnsuspiciousDamage      DiffDiagnosis = 2
	DiffDiagnosis_SuspiciousDamage        DiffDiagnosis = 3
	DiffDiagnosis_FirmwareVersionMismatch DiffDiagnosis = 4
	DiffDiagnosis_InvalidOriginalFirmware DiffDiagnosis = 5
	DiffDiagnosis_KnownTamperedHost       DiffDiagnosis = 6
)

func (p DiffDiagnosis) String() string {
	switch p {
	case DiffDiagnosis_Undefined:
		return "Undefined"
	case DiffDiagnosis_Match:
		return "Match"
	case DiffDiagnosis_UnsuspiciousDamage:
		return "UnsuspiciousDamage"
	case DiffDiagnosis_SuspiciousDamage:
		return "SuspiciousDamage"
	case DiffDiagnosis_FirmwareVersionMismatch:
		return "FirmwareVersionMismatch"
	case DiffDiagnosis_InvalidOriginalFirmware:
		return "InvalidOriginalFirmware"
	case DiffDiagnosis_KnownTamperedHost:
		return "KnownTamperedHost"
	}
	return "<UNSET>"
}

func DiffDiagnosisFromString(s string) (DiffDiagnosis, error) {
	switch s {
	case "Undefined":
		return DiffDiagnosis_Undefined, nil
	case "Match":
		return DiffDiagnosis_Match, nil
	case "UnsuspiciousDamage":
		return DiffDiagnosis_UnsuspiciousDamage, nil
	case "SuspiciousDamage":
		return DiffDiagnosis_SuspiciousDamage, nil
	case "FirmwareVersionMismatch":
		return DiffDiagnosis_FirmwareVersionMismatch, nil
	case "InvalidOriginalFirmware":
		return DiffDiagnosis_InvalidOriginalFirmware, nil
	case "KnownTamperedHost":
		return DiffDiagnosis_KnownTamperedHost, nil
	}
	return DiffDiagnosis(0), fmt.Errorf("not a valid DiffDiagnosis string")
}

func DiffDiagnosisPtr(v DiffDiagnosis) *DiffDiagnosis { return &v }

func (p DiffDiagnosis) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *DiffDiagnosis) UnmarshalText(text []byte) error {
	q, err := DiffDiagnosisFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *DiffDiagnosis) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = DiffDiagnosis(v)
	return nil
}

func (p *DiffDiagnosis) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// Attributes:
//   - UUID
//   - Description
type NodeInfo struct {
	UUID        string  `thrift:"UUID,1" db:"UUID" json:"UUID"`
	Description *string `thrift:"Description,2" db:"Description" json:"Description,omitempty"`
}

func NewNodeInfo() *NodeInfo {
	return &NodeInfo{}
}

func (p *NodeInfo) GetUUID() string {
	return p.UUID
}

var NodeInfo_Description_DEFAULT string

func (p *NodeInfo) GetDescription() string {
	if !p.IsSetDescription() {
		return NodeInfo_Description_DEFAULT
	}
	return *p.Description
}
func (p *NodeInfo) IsSetDescription() bool {
	return p.Description != nil
}

func (p *NodeInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NodeInfo) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UUID = v
	}
	return nil
}

func (p *NodeInfo) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Description = &v
	}
	return nil
}

func (p *NodeInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "NodeInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NodeInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "UUID", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:UUID: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.UUID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.UUID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:UUID: ", p), err)
	}
	return err
}

func (p *NodeInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err := oprot.WriteFieldBegin(ctx, "Description", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Description: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Description)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.Description (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Description: ", p), err)
		}
	}
	return err
}

func (p *NodeInfo) Equals(other *NodeInfo) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.UUID != other.UUID {
		return false
	}
	if p.Description != other.Description {
		if p.Description == nil || other.Description == nil {
			return false
		}
		if (*p.Description) != (*other.Description) {
			return false
		}
	}
	return true
}

func (p *NodeInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NodeInfo(%+v)", *p)
}

// Attributes:
//   - Offset
//   - Length
type Range_ struct {
	Offset int64 `thrift:"Offset,1" db:"Offset" json:"Offset"`
	Length int64 `thrift:"Length,2" db:"Length" json:"Length"`
}

func NewRange_() *Range_ {
	return &Range_{}
}

func (p *Range_) GetOffset() int64 {
	return p.Offset
}

func (p *Range_) GetLength() int64 {
	return p.Length
}
func (p *Range_) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Range_) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Offset = v
	}
	return nil
}

func (p *Range_) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Length = v
	}
	return nil
}

func (p *Range_) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Range_"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Range_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Offset", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Offset: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.Offset)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Offset (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Offset: ", p), err)
	}
	return err
}

func (p *Range_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Length", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Length: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.Length)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Length (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Length: ", p), err)
	}
	return err
}

func (p *Range_) Equals(other *Range_) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Offset != other.Offset {
		return false
	}
	if p.Length != other.Length {
		return false
	}
	return true
}

func (p *Range_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Range_(%+v)", *p)
}

// Attributes:
//   - Range
//   - ForceData
type RangeOrForcedData struct {
	Range     *Range_ `thrift:"Range,1" db:"Range" json:"Range,omitempty"`
	ForceData []byte  `thrift:"ForceData,2" db:"ForceData" json:"ForceData,omitempty"`
}

func NewRangeOrForcedData() *RangeOrForcedData {
	return &RangeOrForcedData{}
}

var RangeOrForcedData_Range_DEFAULT *Range_

func (p *RangeOrForcedData) GetRange() *Range_ {
	if !p.IsSetRange() {
		return RangeOrForcedData_Range_DEFAULT
	}
	return p.Range
}

var RangeOrForcedData_ForceData_DEFAULT []byte

func (p *RangeOrForcedData) GetForceData() []byte {
	return p.ForceData
}
func (p *RangeOrForcedData) CountSetFieldsRangeOrForcedData() int {
	count := 0
	if p.IsSetRange() {
		count++
	}
	if p.IsSetForceData() {
		count++
	}
	return count

}

func (p *RangeOrForcedData) IsSetRange() bool {
	return p.Range != nil
}

func (p *RangeOrForcedData) IsSetForceData() bool {
	return p.ForceData != nil
}

func (p *RangeOrForcedData) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RangeOrForcedData) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Range = &Range_{}
	if err := p.Range.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Range), err)
	}
	return nil
}

func (p *RangeOrForcedData) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ForceData = v
	}
	return nil
}

func (p *RangeOrForcedData) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if c := p.CountSetFieldsRangeOrForcedData(); c != 1 {
		return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
	}
	if err := oprot.WriteStructBegin(ctx, "RangeOrForcedData"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RangeOrForcedData) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetRange() {
		if err := oprot.WriteFieldBegin(ctx, "Range", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Range: ", p), err)
		}
		if err := p.Range.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Range), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Range: ", p), err)
		}
	}
	return err
}

func (p *RangeOrForcedData) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetForceData() {
		if err := oprot.WriteFieldBegin(ctx, "ForceData", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ForceData: ", p), err)
		}
		if err := oprot.WriteBinary(ctx, p.ForceData); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ForceData (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ForceData: ", p), err)
		}
	}
	return err
}

func (p *RangeOrForcedData) Equals(other *RangeOrForcedData) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.Range.Equals(other.Range) {
		return false
	}
	if bytes.Compare(p.ForceData, other.ForceData) != 0 {
		return false
	}
	return true
}

func (p *RangeOrForcedData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RangeOrForcedData(%+v)", *p)
}

// Attributes:
//   - ID
//   - Data
type DataChunk struct {
	ID   string             `thrift:"ID,1" db:"ID" json:"ID"`
	Data *RangeOrForcedData `thrift:"Data,2" db:"Data" json:"Data"`
}

func NewDataChunk() *DataChunk {
	return &DataChunk{}
}

func (p *DataChunk) GetID() string {
	return p.ID
}

var DataChunk_Data_DEFAULT *RangeOrForcedData

func (p *DataChunk) GetData() *RangeOrForcedData {
	if !p.IsSetData() {
		return DataChunk_Data_DEFAULT
	}
	return p.Data
}
func (p *DataChunk) IsSetData() bool {
	return p.Data != nil
}

func (p *DataChunk) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DataChunk) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *DataChunk) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Data = &RangeOrForcedData{}
	if err := p.Data.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
	}
	return nil
}

func (p *DataChunk) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "DataChunk"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DataChunk) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ID", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err)
	}
	return err
}

func (p *DataChunk) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Data", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Data: ", p), err)
	}
	if err := p.Data.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Data: ", p), err)
	}
	return err
}

func (p *DataChunk) Equals(other *DataChunk) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.ID != other.ID {
		return false
	}
	if !p.Data.Equals(other.Data) {
		return false
	}
	return true
}

func (p *DataChunk) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DataChunk(%+v)", *p)
}

// Attributes:
//   - ID
//   - DataChunks
type Measurement struct {
	ID         string       `thrift:"ID,1" db:"ID" json:"ID"`
	DataChunks []*DataChunk `thrift:"DataChunks,2" db:"DataChunks" json:"DataChunks"`
}

func NewMeasurement() *Measurement {
	return &Measurement{}
}

func (p *Measurement) GetID() string {
	return p.ID
}

func (p *Measurement) GetDataChunks() []*DataChunk {
	return p.DataChunks
}
func (p *Measurement) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Measurement) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Measurement) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*DataChunk, 0, size)
	p.DataChunks = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &DataChunk{}
		if err := _elem0.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.DataChunks = append(p.DataChunks, _elem0)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Measurement) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Measurement"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Measurement) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ID", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err)
	}
	return err
}

func (p *Measurement) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "DataChunks", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:DataChunks: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.DataChunks)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.DataChunks {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:DataChunks: ", p), err)
	}
	return err
}

func (p *Measurement) Equals(other *Measurement) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.ID != other.ID {
		return false
	}
	if len(p.DataChunks) != len(other.DataChunks) {
		return false
	}
	for i, _tgt := range p.DataChunks {
		_src1 := other.DataChunks[i]
		if !_tgt.Equals(_src1) {
			return false
		}
	}
	return true
}

func (p *Measurement) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Measurement(%+v)", *p)
}

// Attributes:
//   - Measurement
//   - RelatedDataChunks
type RelatedMeasurement struct {
	Measurement       *Measurement `thrift:"Measurement,1" db:"Measurement" json:"Measurement"`
	RelatedDataChunks []*DataChunk `thrift:"RelatedDataChunks,2" db:"RelatedDataChunks" json:"RelatedDataChunks"`
}

func NewRelatedMeasurement() *RelatedMeasurement {
	return &RelatedMeasurement{}
}

var RelatedMeasurement_Measurement_DEFAULT *Measurement

func (p *RelatedMeasurement) GetMeasurement() *Measurement {
	if !p.IsSetMeasurement() {
		return RelatedMeasurement_Measurement_DEFAULT
	}
	return p.Measurement
}

func (p *RelatedMeasurement) GetRelatedDataChunks() []*DataChunk {
	return p.RelatedDataChunks
}
func (p *RelatedMeasurement) IsSetMeasurement() bool {
	return p.Measurement != nil
}

func (p *RelatedMeasurement) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RelatedMeasurement) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Measurement = &Measurement{}
	if err := p.Measurement.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Measurement), err)
	}
	return nil
}

func (p *RelatedMeasurement) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*DataChunk, 0, size)
	p.RelatedDataChunks = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &DataChunk{}
		if err := _elem2.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
		}
		p.RelatedDataChunks = append(p.RelatedDataChunks, _elem2)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *RelatedMeasurement) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "RelatedMeasurement"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RelatedMeasurement) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Measurement", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Measurement: ", p), err)
	}
	if err := p.Measurement.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Measurement), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Measurement: ", p), err)
	}
	return err
}

func (p *RelatedMeasurement) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "RelatedDataChunks", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:RelatedDataChunks: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.RelatedDataChunks)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.RelatedDataChunks {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:RelatedDataChunks: ", p), err)
	}
	return err
}

func (p *RelatedMeasurement) Equals(other *RelatedMeasurement) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.Measurement.Equals(other.Measurement) {
		return false
	}
	if len(p.RelatedDataChunks) != len(other.RelatedDataChunks) {
		return false
	}
	for i, _tgt := range p.RelatedDataChunks {
		_src3 := other.RelatedDataChunks[i]
		if !_tgt.Equals(_src3) {
			return false
		}
	}
	return true
}

func (p *RelatedMeasurement) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RelatedMeasurement(%+v)", *p)
}

// Attributes:
//   - OBSOLETE_Start
//   - OBSOLETE_Length
//   - HammingDistance
//   - HammingDistanceNon00orFF
//   - Range
//   - RelatedMeasurements
//   - Nodes
type DiffEntry struct {
	OBSOLETE_Start           int64                 `thrift:"OBSOLETE_Start,1" db:"OBSOLETE_Start" json:"OBSOLETE_Start"`
	OBSOLETE_Length          int64                 `thrift:"OBSOLETE_Length,2" db:"OBSOLETE_Length" json:"OBSOLETE_Length"`
	HammingDistance          int64                 `thrift:"HammingDistance,3" db:"HammingDistance" json:"HammingDistance"`
	HammingDistanceNon00orFF int64                 `thrift:"HammingDistanceNon00orFF,4" db:"HammingDistanceNon00orFF" json:"HammingDistanceNon00orFF"`
	Range                    *Range_               `thrift:"Range,5" db:"Range" json:"Range"`
	RelatedMeasurements      []*RelatedMeasurement `thrift:"RelatedMeasurements,6" db:"RelatedMeasurements" json:"RelatedMeasurements"`
	Nodes                    []*NodeInfo           `thrift:"Nodes,7" db:"Nodes" json:"Nodes"`
}

func NewDiffEntry() *DiffEntry {
	return &DiffEntry{}
}

func (p *DiffEntry) GetOBSOLETE_Start() int64 {
	return p.OBSOLETE_Start
}

func (p *DiffEntry) GetOBSOLETE_Length() int64 {
	return p.OBSOLETE_Length
}

func (p *DiffEntry) GetHammingDistance() int64 {
	return p.HammingDistance
}

func (p *DiffEntry) GetHammingDistanceNon00orFF() int64 {
	return p.HammingDistanceNon00orFF
}

var DiffEntry_Range_DEFAULT *Range_

func (p *DiffEntry) GetRange() *Range_ {
	if !p.IsSetRange() {
		return DiffEntry_Range_DEFAULT
	}
	return p.Range
}

func (p *DiffEntry) GetRelatedMeasurements() []*RelatedMeasurement {
	return p.RelatedMeasurements
}

func (p *DiffEntry) GetNodes() []*NodeInfo {
	return p.Nodes
}
func (p *DiffEntry) IsSetRange() bool {
	return p.Range != nil
}

func (p *DiffEntry) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DiffEntry) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.OBSOLETE_Start = v
	}
	return nil
}

func (p *DiffEntry) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.OBSOLETE_Length = v
	}
	return nil
}

func (p *DiffEntry) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.HammingDistance = v
	}
	return nil
}

func (p *DiffEntry) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.HammingDistanceNon00orFF = v
	}
	return nil
}

func (p *DiffEntry) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	p.Range = &Range_{}
	if err := p.Range.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Range), err)
	}
	return nil
}

func (p *DiffEntry) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*RelatedMeasurement, 0, size)
	p.RelatedMeasurements = tSlice
	for i := 0; i < size; i++ {
		_elem4 := &RelatedMeasurement{}
		if err := _elem4.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
		}
		p.RelatedMeasurements = append(p.RelatedMeasurements, _elem4)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *DiffEntry) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*NodeInfo, 0, size)
	p.Nodes = tSlice
	for i := 0; i < size; i++ {
		_elem5 := &NodeInfo{}
		if err := _elem5.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem5), err)
		}
		p.Nodes = append(p.Nodes, _elem5)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *DiffEntry) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "DiffEntry"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField7(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DiffEntry) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "OBSOLETE_Start", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:OBSOLETE_Start: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.OBSOLETE_Start)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.OBSOLETE_Start (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:OBSOLETE_Start: ", p), err)
	}
	return err
}

func (p *DiffEntry) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "OBSOLETE_Length", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:OBSOLETE_Length: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.OBSOLETE_Length)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.OBSOLETE_Length (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:OBSOLETE_Length: ", p), err)
	}
	return err
}

func (p *DiffEntry) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "HammingDistance", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:HammingDistance: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.HammingDistance)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.HammingDistance (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:HammingDistance: ", p), err)
	}
	return err
}

func (p *DiffEntry) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "HammingDistanceNon00orFF", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:HammingDistanceNon00orFF: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.HammingDistanceNon00orFF)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.HammingDistanceNon00orFF (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:HammingDistanceNon00orFF: ", p), err)
	}
	return err
}

func (p *DiffEntry) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Range", thrift.STRUCT, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Range: ", p), err)
	}
	if err := p.Range.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Range), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Range: ", p), err)
	}
	return err
}

func (p *DiffEntry) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "RelatedMeasurements", thrift.LIST, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:RelatedMeasurements: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.RelatedMeasurements)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.RelatedMeasurements {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:RelatedMeasurements: ", p), err)
	}
	return err
}

func (p *DiffEntry) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Nodes", thrift.LIST, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:Nodes: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Nodes)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Nodes {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:Nodes: ", p), err)
	}
	return err
}

func (p *DiffEntry) Equals(other *DiffEntry) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.OBSOLETE_Start != other.OBSOLETE_Start {
		return false
	}
	if p.OBSOLETE_Length != other.OBSOLETE_Length {
		return false
	}
	if p.HammingDistance != other.HammingDistance {
		return false
	}
	if p.HammingDistanceNon00orFF != other.HammingDistanceNon00orFF {
		return false
	}
	if !p.Range.Equals(other.Range) {
		return false
	}
	if len(p.RelatedMeasurements) != len(other.RelatedMeasurements) {
		return false
	}
	for i, _tgt := range p.RelatedMeasurements {
		_src6 := other.RelatedMeasurements[i]
		if !_tgt.Equals(_src6) {
			return false
		}
	}
	if len(p.Nodes) != len(other.Nodes) {
		return false
	}
	for i, _tgt := range p.Nodes {
		_src7 := other.Nodes[i]
		if !_tgt.Equals(_src7) {
			return false
		}
	}
	return true
}

func (p *DiffEntry) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DiffEntry(%+v)", *p)
}

// Attributes:
//   - Diagnosis
//   - DiffEntries
//   - ImageOffset
type CustomReport struct {
	Diagnosis   DiffDiagnosis `thrift:"Diagnosis,1" db:"Diagnosis" json:"Diagnosis"`
	DiffEntries []*DiffEntry  `thrift:"DiffEntries,2" db:"DiffEntries" json:"DiffEntries"`
	ImageOffset int64         `thrift:"ImageOffset,3" db:"ImageOffset" json:"ImageOffset"`
}

func NewCustomReport() *CustomReport {
	return &CustomReport{}
}

func (p *CustomReport) GetDiagnosis() DiffDiagnosis {
	return p.Diagnosis
}

func (p *CustomReport) GetDiffEntries() []*DiffEntry {
	return p.DiffEntries
}

func (p *CustomReport) GetImageOffset() int64 {
	return p.ImageOffset
}
func (p *CustomReport) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CustomReport) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := DiffDiagnosis(v)
		p.Diagnosis = temp
	}
	return nil
}

func (p *CustomReport) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*DiffEntry, 0, size)
	p.DiffEntries = tSlice
	for i := 0; i < size; i++ {
		_elem8 := &DiffEntry{}
		if err := _elem8.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
		}
		p.DiffEntries = append(p.DiffEntries, _elem8)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *CustomReport) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ImageOffset = v
	}
	return nil
}

func (p *CustomReport) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "CustomReport"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CustomReport) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Diagnosis", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Diagnosis: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Diagnosis)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Diagnosis (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Diagnosis: ", p), err)
	}
	return err
}

func (p *CustomReport) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "DiffEntries", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:DiffEntries: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.DiffEntries)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.DiffEntries {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:DiffEntries: ", p), err)
	}
	return err
}

func (p *CustomReport) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ImageOffset", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ImageOffset: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.ImageOffset)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ImageOffset (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ImageOffset: ", p), err)
	}
	return err
}

func (p *CustomReport) Equals(other *CustomReport) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Diagnosis != other.Diagnosis {
		return false
	}
	if len(p.DiffEntries) != len(other.DiffEntries) {
		return false
	}
	for i, _tgt := range p.DiffEntries {
		_src9 := other.DiffEntries[i]
		if !_tgt.Equals(_src9) {
			return false
		}
	}
	if p.ImageOffset != other.ImageOffset {
		return false
	}
	return true
}

func (p *CustomReport) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CustomReport(%+v)", *p)
}
