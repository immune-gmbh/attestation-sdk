// Code generated by Thrift Compiler (0.14.0). DO NOT EDIT.

package pspsignanalysis

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/immune-gmbh/attestation-sdk/pkg/analyzers/amd/types/generated/psptypes"
	"time"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

var _ = psptypes.GoUnusedProtection__

type Validation int64

const (
	Validation_Unknown            Validation = 0
	Validation_NotFound           Validation = 1
	Validation_InvalidFormat      Validation = 2
	Validation_KeyNotFound        Validation = 3
	Validation_IncorrectSignature Validation = 4
	Validation_Correct            Validation = 5
)

func (p Validation) String() string {
	switch p {
	case Validation_Unknown:
		return "Unknown"
	case Validation_NotFound:
		return "NotFound"
	case Validation_InvalidFormat:
		return "InvalidFormat"
	case Validation_KeyNotFound:
		return "KeyNotFound"
	case Validation_IncorrectSignature:
		return "IncorrectSignature"
	case Validation_Correct:
		return "Correct"
	}
	return "<UNSET>"
}

func ValidationFromString(s string) (Validation, error) {
	switch s {
	case "Unknown":
		return Validation_Unknown, nil
	case "NotFound":
		return Validation_NotFound, nil
	case "InvalidFormat":
		return Validation_InvalidFormat, nil
	case "KeyNotFound":
		return Validation_KeyNotFound, nil
	case "IncorrectSignature":
		return Validation_IncorrectSignature, nil
	case "Correct":
		return Validation_Correct, nil
	}
	return Validation(0), fmt.Errorf("not a valid Validation string")
}

func ValidationPtr(v Validation) *Validation { return &v }

func (p Validation) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *Validation) UnmarshalText(text []byte) error {
	q, err := ValidationFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *Validation) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = Validation(v)
	return nil
}

func (p *Validation) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// Attributes:
//   - Directory
//   - Entry
//   - ValidationResult_
//   - ValidationDescription
type ValidatedItem struct {
	Directory             psptypes.DirectoryType   `thrift:"Directory,1" db:"Directory" json:"Directory"`
	Entry                 *psptypes.DirectoryEntry `thrift:"Entry,2" db:"Entry" json:"Entry,omitempty"`
	ValidationResult_     Validation               `thrift:"ValidationResult,3" db:"ValidationResult" json:"ValidationResult"`
	ValidationDescription string                   `thrift:"ValidationDescription,4" db:"ValidationDescription" json:"ValidationDescription"`
}

func NewValidatedItem() *ValidatedItem {
	return &ValidatedItem{}
}

func (p *ValidatedItem) GetDirectory() psptypes.DirectoryType {
	return p.Directory
}

var ValidatedItem_Entry_DEFAULT *psptypes.DirectoryEntry

func (p *ValidatedItem) GetEntry() *psptypes.DirectoryEntry {
	if !p.IsSetEntry() {
		return ValidatedItem_Entry_DEFAULT
	}
	return p.Entry
}

func (p *ValidatedItem) GetValidationResult_() Validation {
	return p.ValidationResult_
}

func (p *ValidatedItem) GetValidationDescription() string {
	return p.ValidationDescription
}
func (p *ValidatedItem) IsSetEntry() bool {
	return p.Entry != nil
}

func (p *ValidatedItem) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ValidatedItem) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := psptypes.DirectoryType(v)
		p.Directory = temp
	}
	return nil
}

func (p *ValidatedItem) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Entry = &psptypes.DirectoryEntry{}
	if err := p.Entry.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Entry), err)
	}
	return nil
}

func (p *ValidatedItem) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := Validation(v)
		p.ValidationResult_ = temp
	}
	return nil
}

func (p *ValidatedItem) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ValidationDescription = v
	}
	return nil
}

func (p *ValidatedItem) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ValidatedItem"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ValidatedItem) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Directory", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Directory: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Directory)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Directory (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Directory: ", p), err)
	}
	return err
}

func (p *ValidatedItem) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetEntry() {
		if err := oprot.WriteFieldBegin(ctx, "Entry", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Entry: ", p), err)
		}
		if err := p.Entry.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Entry), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Entry: ", p), err)
		}
	}
	return err
}

func (p *ValidatedItem) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ValidationResult", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ValidationResult: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.ValidationResult_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ValidationResult (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ValidationResult: ", p), err)
	}
	return err
}

func (p *ValidatedItem) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ValidationDescription", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ValidationDescription: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ValidationDescription)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ValidationDescription (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ValidationDescription: ", p), err)
	}
	return err
}

func (p *ValidatedItem) Equals(other *ValidatedItem) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Directory != other.Directory {
		return false
	}
	if !p.Entry.Equals(other.Entry) {
		return false
	}
	if p.ValidationResult_ != other.ValidationResult_ {
		return false
	}
	if p.ValidationDescription != other.ValidationDescription {
		return false
	}
	return true
}

func (p *ValidatedItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ValidatedItem(%+v)", *p)
}

// Attributes:
//   - Items
type CustomReport struct {
	Items []*ValidatedItem `thrift:"Items,1" db:"Items" json:"Items"`
}

func NewCustomReport() *CustomReport {
	return &CustomReport{}
}

func (p *CustomReport) GetItems() []*ValidatedItem {
	return p.Items
}
func (p *CustomReport) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CustomReport) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ValidatedItem, 0, size)
	p.Items = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &ValidatedItem{}
		if err := _elem0.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.Items = append(p.Items, _elem0)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *CustomReport) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "CustomReport"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CustomReport) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Items", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Items: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Items)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Items {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Items: ", p), err)
	}
	return err
}

func (p *CustomReport) Equals(other *CustomReport) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.Items) != len(other.Items) {
		return false
	}
	for i, _tgt := range p.Items {
		_src1 := other.Items[i]
		if !_tgt.Equals(_src1) {
			return false
		}
	}
	return true
}

func (p *CustomReport) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CustomReport(%+v)", *p)
}
