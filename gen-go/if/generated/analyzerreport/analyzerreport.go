// Code generated by Thrift Compiler (0.14.0). DO NOT EDIT.

package analyzerreport

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/immune-gmbh/attestation-sdk/pkg/analyzers/amd/apcbsectokens/report/generated/apcbsecanalysis"
	"github.com/immune-gmbh/attestation-sdk/pkg/analyzers/amd/biosrtmvolume/report/generated/biosrtmanalysis"
	"github.com/immune-gmbh/attestation-sdk/pkg/analyzers/amd/pspsignature/report/generated/pspsignanalysis"
	"github.com/immune-gmbh/attestation-sdk/pkg/analyzers/diffmeasuredboot/report/generated/diffanalysis"
	"github.com/immune-gmbh/attestation-sdk/pkg/analyzers/intelacm/report/generated/intelacmanalysis"
	"github.com/immune-gmbh/attestation-sdk/pkg/analyzers/reproducepcr/report/generated/reproducepcranalysis"
	"time"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

var _ = apcbsecanalysis.GoUnusedProtection__
var _ = biosrtmanalysis.GoUnusedProtection__
var _ = pspsignanalysis.GoUnusedProtection__
var _ = diffanalysis.GoUnusedProtection__
var _ = intelacmanalysis.GoUnusedProtection__
var _ = reproducepcranalysis.GoUnusedProtection__

type Severity int64

const (
	Severity_SeverityUnknown  Severity = 0
	Severity_SeverityInfo     Severity = 1
	Severity_SeverityWarning  Severity = 2
	Severity_SeverityCritical Severity = 3
)

func (p Severity) String() string {
	switch p {
	case Severity_SeverityUnknown:
		return "SeverityUnknown"
	case Severity_SeverityInfo:
		return "SeverityInfo"
	case Severity_SeverityWarning:
		return "SeverityWarning"
	case Severity_SeverityCritical:
		return "SeverityCritical"
	}
	return "<UNSET>"
}

func SeverityFromString(s string) (Severity, error) {
	switch s {
	case "SeverityUnknown":
		return Severity_SeverityUnknown, nil
	case "SeverityInfo":
		return Severity_SeverityInfo, nil
	case "SeverityWarning":
		return Severity_SeverityWarning, nil
	case "SeverityCritical":
		return Severity_SeverityCritical, nil
	}
	return Severity(0), fmt.Errorf("not a valid Severity string")
}

func SeverityPtr(v Severity) *Severity { return &v }

func (p Severity) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *Severity) UnmarshalText(text []byte) error {
	q, err := SeverityFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *Severity) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = Severity(v)
	return nil
}

func (p *Severity) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type IssueInfo struct {
}

func NewIssueInfo() *IssueInfo {
	return &IssueInfo{}
}

func (p *IssueInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IssueInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "IssueInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IssueInfo) Equals(other *IssueInfo) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	return true
}

func (p *IssueInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IssueInfo(%+v)", *p)
}

// Attributes:
//   - Custom
//   - Severity
//   - Description
type Issue struct {
	Custom      *IssueInfo `thrift:"Custom,1" db:"Custom" json:"Custom,omitempty"`
	Severity    Severity   `thrift:"Severity,2" db:"Severity" json:"Severity"`
	Description *string    `thrift:"Description,3" db:"Description" json:"Description,omitempty"`
}

func NewIssue() *Issue {
	return &Issue{}
}

var Issue_Custom_DEFAULT *IssueInfo

func (p *Issue) GetCustom() *IssueInfo {
	if !p.IsSetCustom() {
		return Issue_Custom_DEFAULT
	}
	return p.Custom
}

func (p *Issue) GetSeverity() Severity {
	return p.Severity
}

var Issue_Description_DEFAULT string

func (p *Issue) GetDescription() string {
	if !p.IsSetDescription() {
		return Issue_Description_DEFAULT
	}
	return *p.Description
}
func (p *Issue) IsSetCustom() bool {
	return p.Custom != nil
}

func (p *Issue) IsSetDescription() bool {
	return p.Description != nil
}

func (p *Issue) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Issue) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Custom = &IssueInfo{}
	if err := p.Custom.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Custom), err)
	}
	return nil
}

func (p *Issue) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Severity(v)
		p.Severity = temp
	}
	return nil
}

func (p *Issue) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Description = &v
	}
	return nil
}

func (p *Issue) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Issue"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Issue) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetCustom() {
		if err := oprot.WriteFieldBegin(ctx, "Custom", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Custom: ", p), err)
		}
		if err := p.Custom.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Custom), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Custom: ", p), err)
		}
	}
	return err
}

func (p *Issue) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "Severity", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Severity: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Severity)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Severity (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Severity: ", p), err)
	}
	return err
}

func (p *Issue) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err := oprot.WriteFieldBegin(ctx, "Description", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Description: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Description)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.Description (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Description: ", p), err)
		}
	}
	return err
}

func (p *Issue) Equals(other *Issue) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.Custom.Equals(other.Custom) {
		return false
	}
	if p.Severity != other.Severity {
		return false
	}
	if p.Description != other.Description {
		if p.Description == nil || other.Description == nil {
			return false
		}
		if (*p.Description) != (*other.Description) {
			return false
		}
	}
	return true
}

func (p *Issue) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Issue(%+v)", *p)
}

// Attributes:
//   - DiffMeasuredBoot
//   - IntelACM
//   - ReproducePCR
//   - PSPSignature
//   - BIOSRTMVolume
//   - APCBSecurityTokens
type ReportInfo struct {
	DiffMeasuredBoot   *diffanalysis.CustomReport         `thrift:"DiffMeasuredBoot,1" db:"DiffMeasuredBoot" json:"DiffMeasuredBoot,omitempty"`
	IntelACM           *intelacmanalysis.IntelACMDiagInfo `thrift:"IntelACM,2" db:"IntelACM" json:"IntelACM,omitempty"`
	ReproducePCR       *reproducepcranalysis.CustomReport `thrift:"ReproducePCR,3" db:"ReproducePCR" json:"ReproducePCR,omitempty"`
	PSPSignature       *pspsignanalysis.CustomReport      `thrift:"PSPSignature,4" db:"PSPSignature" json:"PSPSignature,omitempty"`
	BIOSRTMVolume      *biosrtmanalysis.CustomReport      `thrift:"BIOSRTMVolume,5" db:"BIOSRTMVolume" json:"BIOSRTMVolume,omitempty"`
	APCBSecurityTokens *apcbsecanalysis.CustomReport      `thrift:"APCBSecurityTokens,6" db:"APCBSecurityTokens" json:"APCBSecurityTokens,omitempty"`
}

func NewReportInfo() *ReportInfo {
	return &ReportInfo{}
}

var ReportInfo_DiffMeasuredBoot_DEFAULT *diffanalysis.CustomReport

func (p *ReportInfo) GetDiffMeasuredBoot() *diffanalysis.CustomReport {
	if !p.IsSetDiffMeasuredBoot() {
		return ReportInfo_DiffMeasuredBoot_DEFAULT
	}
	return p.DiffMeasuredBoot
}

var ReportInfo_IntelACM_DEFAULT *intelacmanalysis.IntelACMDiagInfo

func (p *ReportInfo) GetIntelACM() *intelacmanalysis.IntelACMDiagInfo {
	if !p.IsSetIntelACM() {
		return ReportInfo_IntelACM_DEFAULT
	}
	return p.IntelACM
}

var ReportInfo_ReproducePCR_DEFAULT *reproducepcranalysis.CustomReport

func (p *ReportInfo) GetReproducePCR() *reproducepcranalysis.CustomReport {
	if !p.IsSetReproducePCR() {
		return ReportInfo_ReproducePCR_DEFAULT
	}
	return p.ReproducePCR
}

var ReportInfo_PSPSignature_DEFAULT *pspsignanalysis.CustomReport

func (p *ReportInfo) GetPSPSignature() *pspsignanalysis.CustomReport {
	if !p.IsSetPSPSignature() {
		return ReportInfo_PSPSignature_DEFAULT
	}
	return p.PSPSignature
}

var ReportInfo_BIOSRTMVolume_DEFAULT *biosrtmanalysis.CustomReport

func (p *ReportInfo) GetBIOSRTMVolume() *biosrtmanalysis.CustomReport {
	if !p.IsSetBIOSRTMVolume() {
		return ReportInfo_BIOSRTMVolume_DEFAULT
	}
	return p.BIOSRTMVolume
}

var ReportInfo_APCBSecurityTokens_DEFAULT *apcbsecanalysis.CustomReport

func (p *ReportInfo) GetAPCBSecurityTokens() *apcbsecanalysis.CustomReport {
	if !p.IsSetAPCBSecurityTokens() {
		return ReportInfo_APCBSecurityTokens_DEFAULT
	}
	return p.APCBSecurityTokens
}
func (p *ReportInfo) CountSetFieldsReportInfo() int {
	count := 0
	if p.IsSetDiffMeasuredBoot() {
		count++
	}
	if p.IsSetIntelACM() {
		count++
	}
	if p.IsSetReproducePCR() {
		count++
	}
	if p.IsSetPSPSignature() {
		count++
	}
	if p.IsSetBIOSRTMVolume() {
		count++
	}
	if p.IsSetAPCBSecurityTokens() {
		count++
	}
	return count

}

func (p *ReportInfo) IsSetDiffMeasuredBoot() bool {
	return p.DiffMeasuredBoot != nil
}

func (p *ReportInfo) IsSetIntelACM() bool {
	return p.IntelACM != nil
}

func (p *ReportInfo) IsSetReproducePCR() bool {
	return p.ReproducePCR != nil
}

func (p *ReportInfo) IsSetPSPSignature() bool {
	return p.PSPSignature != nil
}

func (p *ReportInfo) IsSetBIOSRTMVolume() bool {
	return p.BIOSRTMVolume != nil
}

func (p *ReportInfo) IsSetAPCBSecurityTokens() bool {
	return p.APCBSecurityTokens != nil
}

func (p *ReportInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReportInfo) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.DiffMeasuredBoot = &diffanalysis.CustomReport{}
	if err := p.DiffMeasuredBoot.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DiffMeasuredBoot), err)
	}
	return nil
}

func (p *ReportInfo) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.IntelACM = &intelacmanalysis.IntelACMDiagInfo{}
	if err := p.IntelACM.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IntelACM), err)
	}
	return nil
}

func (p *ReportInfo) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	p.ReproducePCR = &reproducepcranalysis.CustomReport{}
	if err := p.ReproducePCR.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ReproducePCR), err)
	}
	return nil
}

func (p *ReportInfo) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	p.PSPSignature = &pspsignanalysis.CustomReport{}
	if err := p.PSPSignature.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PSPSignature), err)
	}
	return nil
}

func (p *ReportInfo) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	p.BIOSRTMVolume = &biosrtmanalysis.CustomReport{}
	if err := p.BIOSRTMVolume.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BIOSRTMVolume), err)
	}
	return nil
}

func (p *ReportInfo) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	p.APCBSecurityTokens = &apcbsecanalysis.CustomReport{}
	if err := p.APCBSecurityTokens.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.APCBSecurityTokens), err)
	}
	return nil
}

func (p *ReportInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if c := p.CountSetFieldsReportInfo(); c != 1 {
		return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
	}
	if err := oprot.WriteStructBegin(ctx, "ReportInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReportInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetDiffMeasuredBoot() {
		if err := oprot.WriteFieldBegin(ctx, "DiffMeasuredBoot", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:DiffMeasuredBoot: ", p), err)
		}
		if err := p.DiffMeasuredBoot.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DiffMeasuredBoot), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:DiffMeasuredBoot: ", p), err)
		}
	}
	return err
}

func (p *ReportInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetIntelACM() {
		if err := oprot.WriteFieldBegin(ctx, "IntelACM", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:IntelACM: ", p), err)
		}
		if err := p.IntelACM.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IntelACM), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:IntelACM: ", p), err)
		}
	}
	return err
}

func (p *ReportInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetReproducePCR() {
		if err := oprot.WriteFieldBegin(ctx, "ReproducePCR", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ReproducePCR: ", p), err)
		}
		if err := p.ReproducePCR.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ReproducePCR), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ReproducePCR: ", p), err)
		}
	}
	return err
}

func (p *ReportInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetPSPSignature() {
		if err := oprot.WriteFieldBegin(ctx, "PSPSignature", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:PSPSignature: ", p), err)
		}
		if err := p.PSPSignature.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PSPSignature), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:PSPSignature: ", p), err)
		}
	}
	return err
}

func (p *ReportInfo) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetBIOSRTMVolume() {
		if err := oprot.WriteFieldBegin(ctx, "BIOSRTMVolume", thrift.STRUCT, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:BIOSRTMVolume: ", p), err)
		}
		if err := p.BIOSRTMVolume.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BIOSRTMVolume), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:BIOSRTMVolume: ", p), err)
		}
	}
	return err
}

func (p *ReportInfo) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAPCBSecurityTokens() {
		if err := oprot.WriteFieldBegin(ctx, "APCBSecurityTokens", thrift.STRUCT, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:APCBSecurityTokens: ", p), err)
		}
		if err := p.APCBSecurityTokens.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.APCBSecurityTokens), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:APCBSecurityTokens: ", p), err)
		}
	}
	return err
}

func (p *ReportInfo) Equals(other *ReportInfo) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.DiffMeasuredBoot.Equals(other.DiffMeasuredBoot) {
		return false
	}
	if !p.IntelACM.Equals(other.IntelACM) {
		return false
	}
	if !p.ReproducePCR.Equals(other.ReproducePCR) {
		return false
	}
	if !p.PSPSignature.Equals(other.PSPSignature) {
		return false
	}
	if !p.BIOSRTMVolume.Equals(other.BIOSRTMVolume) {
		return false
	}
	if !p.APCBSecurityTokens.Equals(other.APCBSecurityTokens) {
		return false
	}
	return true
}

func (p *ReportInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReportInfo(%+v)", *p)
}

// Attributes:
//   - Custom
//   - Issues
//   - Comments
type AnalyzerReport struct {
	Custom   *ReportInfo `thrift:"Custom,1" db:"Custom" json:"Custom,omitempty"`
	Issues   []*Issue    `thrift:"Issues,2" db:"Issues" json:"Issues,omitempty"`
	Comments []string    `thrift:"Comments,3" db:"Comments" json:"Comments,omitempty"`
}

func NewAnalyzerReport() *AnalyzerReport {
	return &AnalyzerReport{}
}

var AnalyzerReport_Custom_DEFAULT *ReportInfo

func (p *AnalyzerReport) GetCustom() *ReportInfo {
	if !p.IsSetCustom() {
		return AnalyzerReport_Custom_DEFAULT
	}
	return p.Custom
}

var AnalyzerReport_Issues_DEFAULT []*Issue

func (p *AnalyzerReport) GetIssues() []*Issue {
	return p.Issues
}

var AnalyzerReport_Comments_DEFAULT []string

func (p *AnalyzerReport) GetComments() []string {
	return p.Comments
}
func (p *AnalyzerReport) IsSetCustom() bool {
	return p.Custom != nil
}

func (p *AnalyzerReport) IsSetIssues() bool {
	return p.Issues != nil
}

func (p *AnalyzerReport) IsSetComments() bool {
	return p.Comments != nil
}

func (p *AnalyzerReport) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AnalyzerReport) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Custom = &ReportInfo{}
	if err := p.Custom.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Custom), err)
	}
	return nil
}

func (p *AnalyzerReport) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Issue, 0, size)
	p.Issues = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &Issue{}
		if err := _elem0.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.Issues = append(p.Issues, _elem0)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AnalyzerReport) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Comments = tSlice
	for i := 0; i < size; i++ {
		var _elem1 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem1 = v
		}
		p.Comments = append(p.Comments, _elem1)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AnalyzerReport) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AnalyzerReport"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AnalyzerReport) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetCustom() {
		if err := oprot.WriteFieldBegin(ctx, "Custom", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Custom: ", p), err)
		}
		if err := p.Custom.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Custom), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Custom: ", p), err)
		}
	}
	return err
}

func (p *AnalyzerReport) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetIssues() {
		if err := oprot.WriteFieldBegin(ctx, "Issues", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Issues: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Issues)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Issues {
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Issues: ", p), err)
		}
	}
	return err
}

func (p *AnalyzerReport) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetComments() {
		if err := oprot.WriteFieldBegin(ctx, "Comments", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Comments: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Comments)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Comments {
			if err := oprot.WriteString(ctx, string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Comments: ", p), err)
		}
	}
	return err
}

func (p *AnalyzerReport) Equals(other *AnalyzerReport) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.Custom.Equals(other.Custom) {
		return false
	}
	if len(p.Issues) != len(other.Issues) {
		return false
	}
	for i, _tgt := range p.Issues {
		_src2 := other.Issues[i]
		if !_tgt.Equals(_src2) {
			return false
		}
	}
	if len(p.Comments) != len(other.Comments) {
		return false
	}
	for i, _tgt := range p.Comments {
		_src3 := other.Comments[i]
		if _tgt != _src3 {
			return false
		}
	}
	return true
}

func (p *AnalyzerReport) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AnalyzerReport(%+v)", *p)
}
