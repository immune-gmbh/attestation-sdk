// Code generated by Thrift Compiler (0.14.0). DO NOT EDIT.

package measurements

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"time"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

type Flow int64

const (
	Flow_AUTO                           Flow = 0
	Flow_INTEL_LEGACY_TXT_DISABLED      Flow = 1
	Flow_INTEL_LEGACY_TXT_ENABLED       Flow = 2
	Flow_INTEL_CBNT0T                   Flow = 3
	Flow_INTEL_LEGACY_TPM12_TXT_ENABLED Flow = 4
	Flow_AMD_MILAN_LEGACY_LOCALITY_0    Flow = 5
	Flow_AMD_MILAN_LEGACY_LOCALITY_3    Flow = 6
	Flow_AMD_MILAN_LOCALITY_0           Flow = 7
	Flow_AMD_MILAN_LOCALITY_3           Flow = 8
	Flow_AMD_GENOA_LOCALITY_0           Flow = 9
	Flow_AMD_GENOA_LOCALITY_3           Flow = 10
)

func (p Flow) String() string {
	switch p {
	case Flow_AUTO:
		return "AUTO"
	case Flow_INTEL_LEGACY_TXT_DISABLED:
		return "INTEL_LEGACY_TXT_DISABLED"
	case Flow_INTEL_LEGACY_TXT_ENABLED:
		return "INTEL_LEGACY_TXT_ENABLED"
	case Flow_INTEL_CBNT0T:
		return "INTEL_CBNT0T"
	case Flow_INTEL_LEGACY_TPM12_TXT_ENABLED:
		return "INTEL_LEGACY_TPM12_TXT_ENABLED"
	case Flow_AMD_MILAN_LEGACY_LOCALITY_0:
		return "AMD_MILAN_LEGACY_LOCALITY_0"
	case Flow_AMD_MILAN_LEGACY_LOCALITY_3:
		return "AMD_MILAN_LEGACY_LOCALITY_3"
	case Flow_AMD_MILAN_LOCALITY_0:
		return "AMD_MILAN_LOCALITY_0"
	case Flow_AMD_MILAN_LOCALITY_3:
		return "AMD_MILAN_LOCALITY_3"
	case Flow_AMD_GENOA_LOCALITY_0:
		return "AMD_GENOA_LOCALITY_0"
	case Flow_AMD_GENOA_LOCALITY_3:
		return "AMD_GENOA_LOCALITY_3"
	}
	return "<UNSET>"
}

func FlowFromString(s string) (Flow, error) {
	switch s {
	case "AUTO":
		return Flow_AUTO, nil
	case "INTEL_LEGACY_TXT_DISABLED":
		return Flow_INTEL_LEGACY_TXT_DISABLED, nil
	case "INTEL_LEGACY_TXT_ENABLED":
		return Flow_INTEL_LEGACY_TXT_ENABLED, nil
	case "INTEL_CBNT0T":
		return Flow_INTEL_CBNT0T, nil
	case "INTEL_LEGACY_TPM12_TXT_ENABLED":
		return Flow_INTEL_LEGACY_TPM12_TXT_ENABLED, nil
	case "AMD_MILAN_LEGACY_LOCALITY_0":
		return Flow_AMD_MILAN_LEGACY_LOCALITY_0, nil
	case "AMD_MILAN_LEGACY_LOCALITY_3":
		return Flow_AMD_MILAN_LEGACY_LOCALITY_3, nil
	case "AMD_MILAN_LOCALITY_0":
		return Flow_AMD_MILAN_LOCALITY_0, nil
	case "AMD_MILAN_LOCALITY_3":
		return Flow_AMD_MILAN_LOCALITY_3, nil
	case "AMD_GENOA_LOCALITY_0":
		return Flow_AMD_GENOA_LOCALITY_0, nil
	case "AMD_GENOA_LOCALITY_3":
		return Flow_AMD_GENOA_LOCALITY_3, nil
	}
	return Flow(0), fmt.Errorf("not a valid Flow string")
}

func FlowPtr(v Flow) *Flow { return &v }

func (p Flow) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *Flow) UnmarshalText(text []byte) error {
	q, err := FlowFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *Flow) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = Flow(v)
	return nil
}

func (p *Flow) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}
